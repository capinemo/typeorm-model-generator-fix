{"version":3,"file":"/home/nemo/work/github/typeorm-model-generator/src/Engine.ts","sources":["/home/nemo/work/github/typeorm-model-generator/src/Engine.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AAErC,uDAAgD;AAChD,2DAAoD;AAGpD,6DAAsD;AACtD,uDAAgD;AAChD,yDAAkD;AAClD,yDAAkD;AAClD,6DAA2D;AAC3D,uDAAqD;AAGrD,SAAgB,YAAY,CAAC,UAAkB;IAC3C,QAAQ,UAAU,EAAE;QAChB,KAAK,OAAO;YACR,OAAO,IAAI,qBAAW,EAAE,CAAC;QAC7B,KAAK,UAAU;YACX,OAAO,IAAI,wBAAc,EAAE,CAAC;QAChC,KAAK,OAAO;YACR,OAAO,IAAI,qBAAW,EAAE,CAAC;QAC7B,KAAK,SAAS;YACV,OAAO,IAAI,uBAAa,EAAE,CAAC;QAC/B,KAAK,QAAQ;YACT,OAAO,IAAI,sBAAY,EAAE,CAAC;QAC9B,KAAK,QAAQ;YACT,OAAO,IAAI,sBAAY,EAAE,CAAC;QAC9B;YACI,SAAS,CAAC,QAAQ,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YAC7D,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;KAC1D;AACL,CAAC;AAlBD,oCAkBC;AAEM,KAAK,UAAU,uBAAuB,CACzC,MAAsB,EACtB,iBAAqC,EACrC,iBAAqC;IAErC,IAAI,OAAO,GAAG,MAAM,mBAAmB,CACnC,MAAM,EACN,iBAAiB,EACjB,iBAAiB,CACpB,CAAC;IACF,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;QACtB,SAAS,CAAC,QAAQ,CACd,4EAA4E,EAC5E,KAAK,CACR,CAAC;QACF,OAAO;KACV;IACD,OAAO,GAAG,4BAAuB,CAC7B,OAAO,EACP,iBAAiB,EACjB,MAAM,CAAC,aAAa,CACvB,CAAC;IACF,yBAAoB,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,OAAO,CAAC,CAAC;AACxE,CAAC;AAvBD,0DAuBC;AACM,KAAK,UAAU,mBAAmB,CACrC,MAAsB,EACtB,iBAAqC,EACrC,iBAAqC;IAErC,OAAO,MAAM,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;AAC1E,CAAC;AAND,kDAMC","sourcesContent":["import * as TomgUtils from \"./Utils\";\nimport AbstractDriver from \"./drivers/AbstractDriver\";\nimport MssqlDriver from \"./drivers/MssqlDriver\";\nimport MariaDbDriver from \"./drivers/MariaDbDriver\";\nimport IConnectionOptions from \"./IConnectionOptions\";\nimport IGenerationOptions from \"./IGenerationOptions\";\nimport PostgresDriver from \"./drivers/PostgresDriver\";\nimport MysqlDriver from \"./drivers/MysqlDriver\";\nimport OracleDriver from \"./drivers/OracleDriver\";\nimport SqliteDriver from \"./drivers/SqliteDriver\";\nimport modelCustomizationPhase from \"./ModelCustomization\";\nimport modelGenerationPhase from \"./ModelGeneration\";\nimport { Entity } from \"./models/Entity\";\n\nexport function createDriver(driverName: string): AbstractDriver {\n    switch (driverName) {\n        case \"mssql\":\n            return new MssqlDriver();\n        case \"postgres\":\n            return new PostgresDriver();\n        case \"mysql\":\n            return new MysqlDriver();\n        case \"mariadb\":\n            return new MariaDbDriver();\n        case \"oracle\":\n            return new OracleDriver();\n        case \"sqlite\":\n            return new SqliteDriver();\n        default:\n            TomgUtils.LogError(\"Database engine not recognized.\", false);\n            throw new Error(\"Database engine not recognized.\");\n    }\n}\n\nexport async function createModelFromDatabase(\n    driver: AbstractDriver,\n    connectionOptions: IConnectionOptions,\n    generationOptions: IGenerationOptions\n): Promise<void> {\n    let dbModel = await dataCollectionPhase(\n        driver,\n        connectionOptions,\n        generationOptions\n    );\n    if (dbModel.length === 0) {\n        TomgUtils.LogError(\n            \"Tables not found in selected database. Skipping creation of typeorm model.\",\n            false\n        );\n        return;\n    }\n    dbModel = modelCustomizationPhase(\n        dbModel,\n        generationOptions,\n        driver.defaultValues\n    );\n    modelGenerationPhase(connectionOptions, generationOptions, dbModel);\n}\nexport async function dataCollectionPhase(\n    driver: AbstractDriver,\n    connectionOptions: IConnectionOptions,\n    generationOptions: IGenerationOptions\n): Promise<Entity[]> {\n    return driver.GetDataFromServer(connectionOptions, generationOptions);\n}\n"]}