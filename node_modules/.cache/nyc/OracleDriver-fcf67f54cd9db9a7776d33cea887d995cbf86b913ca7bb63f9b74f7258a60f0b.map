{"version":3,"file":"/home/nemo/work/github/typeorm-model-generator/src/drivers/OracleDriver.ts","sources":["/home/nemo/work/github/typeorm-model-generator/src/drivers/OracleDriver.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved\nimport type * as Oracle from \"oracledb\";\nimport * as TypeormDriver from \"typeorm/driver/oracle/OracleDriver\";\nimport { DataTypeDefaults } from \"typeorm/driver/types/DataTypeDefaults\";\nimport * as TomgUtils from \"../Utils\";\nimport AbstractDriver from \"./AbstractDriver\";\nimport IConnectionOptions from \"../IConnectionOptions\";\nimport { Entity } from \"../models/Entity\";\nimport { Column } from \"../models/Column\";\nimport { Index } from \"../models/Index\";\nimport IGenerationOptions from \"../IGenerationOptions\";\nimport { RelationInternal } from \"../models/RelationInternal\";\n\nexport default class OracleDriver extends AbstractDriver {\n    public defaultValues: DataTypeDefaults = new TypeormDriver.OracleDriver({\n        options: undefined,\n    } as any).dataTypeDefaults;\n\n    public readonly standardPort = 1521;\n\n    public readonly standardUser = \"SYS\";\n\n    public readonly standardSchema = \"\";\n\n    private Oracle: typeof Oracle;\n\n    private Connection: Oracle.Connection;\n\n    public constructor() {\n        super();\n        try {\n            // eslint-disable-next-line import/no-extraneous-dependencies, global-require, import/no-unresolved\n            this.Oracle = require(\"oracledb\");\n            this.Oracle.outFormat = (this.Oracle as any).OBJECT;\n        } catch (error) {\n            TomgUtils.LogError(\"\", false, error);\n            throw error;\n        }\n    }\n\n    public GetAllTablesQuery = async (\n        schema: string,\n        dbNames: string,\n        tableNames: string[]\n    ) => {\n        const tableCondition =\n            tableNames.length > 0\n                ? ` AND NOT TABLE_NAME IN ('${tableNames.join(\"','\")}')`\n                : \"\";\n        const response = (\n            await this.Connection.execute<{\n                TABLE_SCHEMA: string;\n                TABLE_NAME: string;\n                DB_NAME: string;\n            }>(\n                `SELECT NULL AS TABLE_SCHEMA, TABLE_NAME, NULL AS DB_NAME FROM all_tables WHERE owner = (select user from dual) ${tableCondition}`\n            )\n        ).rows!;\n        return response;\n    };\n\n    public async GetCoulmnsFromEntity(entities: Entity[]): Promise<Entity[]> {\n        const response = (\n            await this.Connection.execute<{\n                TABLE_NAME: string;\n                COLUMN_NAME: string;\n                DATA_DEFAULT: string;\n                NULLABLE: string;\n                DATA_TYPE: string;\n                DATA_LENGTH: number;\n                DATA_PRECISION: number;\n                DATA_SCALE: number;\n                IDENTITY_COLUMN: string; // doesn't exist in old oracle versions (#195)\n                IS_UNIQUE: number;\n            }>(`SELECT utc.*, (select count(*) from USER_CONS_COLUMNS ucc\n             JOIN USER_CONSTRAINTS uc ON  uc.CONSTRAINT_NAME = ucc.CONSTRAINT_NAME and uc.CONSTRAINT_TYPE='U'\n            where ucc.column_name = utc.COLUMN_NAME AND ucc.table_name = utc.TABLE_NAME) IS_UNIQUE\n           FROM USER_TAB_COLUMNS utc`)\n        ).rows!;\n\n        entities.forEach((ent) => {\n            response\n                .filter((filterVal) => filterVal.TABLE_NAME === ent.tscName)\n                .forEach((resp) => {\n                    const tscName = resp.COLUMN_NAME;\n                    const options: Column[\"options\"] = {\n                        name: resp.COLUMN_NAME,\n                    };\n                    if (resp.NULLABLE === \"Y\") options.nullable = true;\n                    if (resp.IS_UNIQUE > 0) options.unique = true;\n                    const generated =\n                        resp.IDENTITY_COLUMN === \"YES\" ? true : undefined;\n                    const defaultValue =\n                        !resp.DATA_DEFAULT || resp.DATA_DEFAULT.includes('\"')\n                            ? undefined\n                            : OracleDriver.ReturnDefaultValueFunction(\n                                  resp.DATA_DEFAULT\n                              );\n                    const DATA_TYPE = resp.DATA_TYPE.replace(/\\([0-9]+\\)/g, \"\");\n                    const columnType = DATA_TYPE.toLowerCase();\n                    let tscType = \"\";\n                    switch (DATA_TYPE.toLowerCase()) {\n                        case \"char\":\n                            tscType = \"string\";\n                            break;\n                        case \"nchar\":\n                            tscType = \"string\";\n                            break;\n                        case \"nvarchar2\":\n                            tscType = \"string\";\n                            break;\n                        case \"varchar2\":\n                            tscType = \"string\";\n                            break;\n                        case \"long\":\n                            tscType = \"string\";\n                            break;\n                        case \"raw\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"long raw\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"number\":\n                            tscType = \"number\";\n                            break;\n                        case \"numeric\":\n                            tscType = \"number\";\n                            break;\n                        case \"float\":\n                            tscType = \"number\";\n                            break;\n                        case \"dec\":\n                            tscType = \"number\";\n                            break;\n                        case \"decimal\":\n                            tscType = \"number\";\n                            break;\n                        case \"integer\":\n                            tscType = \"number\";\n                            break;\n                        case \"int\":\n                            tscType = \"number\";\n                            break;\n                        case \"smallint\":\n                            tscType = \"number\";\n                            break;\n                        case \"real\":\n                            tscType = \"number\";\n                            break;\n                        case \"double precision\":\n                            tscType = \"number\";\n                            break;\n                        case \"date\":\n                            tscType = \"Date\";\n                            break;\n                        case \"timestamp\":\n                            tscType = \"Date\";\n                            break;\n                        case \"timestamp with time zone\":\n                            tscType = \"Date\";\n                            break;\n                        case \"timestamp with local time zone\":\n                            tscType = \"Date\";\n                            break;\n                        case \"interval year to month\":\n                            tscType = \"string\";\n                            break;\n                        case \"interval day to second\":\n                            tscType = \"string\";\n                            break;\n                        case \"bfile\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"blob\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"clob\":\n                            tscType = \"string\";\n                            break;\n                        case \"nclob\":\n                            tscType = \"string\";\n                            break;\n                        case \"rowid\":\n                            tscType = \"number\";\n                            break;\n                        case \"urowid\":\n                            tscType = \"number\";\n                            break;\n                        default:\n                            tscType = \"NonNullable<unknown>\";\n                            TomgUtils.LogError(\n                                `Unknown column type:${DATA_TYPE}`\n                            );\n                            break;\n                    }\n                    if (\n                        this.ColumnTypesWithPrecision.some(\n                            (v) => v === columnType\n                        )\n                    ) {\n                        if (resp.DATA_PRECISION !== null) {\n                            options.precision = resp.DATA_PRECISION;\n                        }\n                        if (resp.DATA_SCALE !== null) {\n                            options.scale = resp.DATA_SCALE;\n                        }\n                    }\n                    if (\n                        this.ColumnTypesWithLength.some((v) => v === columnType)\n                    ) {\n                        options.length =\n                            resp.DATA_LENGTH > 0 ? resp.DATA_LENGTH : undefined;\n                    }\n\n                    ent.columns.push({\n                        generated,\n                        type: columnType,\n                        default: defaultValue,\n                        options,\n                        tscName,\n                        tscType,\n                    });\n                });\n        });\n        return entities;\n    }\n\n    public async GetIndexesFromEntity(entities: Entity[]): Promise<Entity[]> {\n        const response = (\n            await this.Connection.execute<{\n                COLUMN_NAME: string;\n                TABLE_NAME: string;\n                INDEX_NAME: string;\n                UNIQUENESS: string;\n                ISPRIMARYKEY: number;\n            }>(`SELECT ind.TABLE_NAME, ind.INDEX_NAME, col.COLUMN_NAME,ind.UNIQUENESS, CASE WHEN uc.CONSTRAINT_NAME IS NULL THEN 0 ELSE 1 END ISPRIMARYKEY\n        FROM USER_INDEXES ind\n        JOIN USER_IND_COLUMNS col ON ind.INDEX_NAME=col.INDEX_NAME\n        LEFT JOIN USER_CONSTRAINTS uc ON  uc.INDEX_NAME = ind.INDEX_NAME\n        ORDER BY col.INDEX_NAME ASC ,col.COLUMN_POSITION ASC`)\n        ).rows!;\n\n        entities.forEach((ent) => {\n            const entityIndices = response.filter(\n                (filterVal) => filterVal.TABLE_NAME === ent.tscName\n            );\n            const indexNames = new Set(entityIndices.map((v) => v.INDEX_NAME));\n            indexNames.forEach((indexName) => {\n                const records = entityIndices.filter(\n                    (v) => v.INDEX_NAME === indexName\n                );\n                const indexInfo: Index = {\n                    columns: [],\n                    options: {},\n                    name: records[0].INDEX_NAME,\n                };\n                if (records[0].ISPRIMARYKEY === 1) indexInfo.primary = true;\n                if (records[0].UNIQUENESS === \"UNIQUE\")\n                    indexInfo.options.unique = true;\n                records.forEach((record) => {\n                    indexInfo.columns.push(record.COLUMN_NAME);\n                });\n                ent.indices.push(indexInfo);\n            });\n        });\n\n        return entities;\n    }\n\n    public async GetRelations(\n        entities: Entity[],\n        schema: string,\n        dbNames: string,\n        generationOptions: IGenerationOptions\n    ): Promise<Entity[]> {\n        const response = (\n            await this.Connection.execute<{\n                OWNER_TABLE_NAME: string;\n                OWNER_POSITION: string;\n                OWNER_COLUMN_NAME: string;\n                CHILD_TABLE_NAME: string;\n                CHILD_COLUMN_NAME: string;\n                DELETE_RULE: \"RESTRICT\" | \"CASCADE\" | \"SET NULL\" | \"NO ACTION\";\n                CONSTRAINT_NAME: string;\n            }>(`select owner.TABLE_NAME OWNER_TABLE_NAME,ownCol.POSITION OWNER_POSITION,ownCol.COLUMN_NAME OWNER_COLUMN_NAME,\n        child.TABLE_NAME CHILD_TABLE_NAME ,childCol.COLUMN_NAME CHILD_COLUMN_NAME,\n        owner.DELETE_RULE,\n        owner.CONSTRAINT_NAME\n        from user_constraints owner\n        join user_constraints child on owner.r_constraint_name=child.CONSTRAINT_NAME and child.constraint_type in ('P','U')\n        JOIN USER_CONS_COLUMNS ownCol ON owner.CONSTRAINT_NAME = ownCol.CONSTRAINT_NAME\n        JOIN USER_CONS_COLUMNS childCol ON child.CONSTRAINT_NAME = childCol.CONSTRAINT_NAME AND ownCol.POSITION=childCol.POSITION\n        ORDER BY OWNER_TABLE_NAME ASC, owner.CONSTRAINT_NAME ASC, OWNER_POSITION ASC`)\n        ).rows!;\n\n        const relationsTemp: RelationInternal[] = [] as RelationInternal[];\n        const relationKeys = new Set(response.map((v) => v.CONSTRAINT_NAME));\n\n        relationKeys.forEach((relationId) => {\n            const rows = response.filter(\n                (v) => v.CONSTRAINT_NAME === relationId\n            );\n            const ownerTable = entities.find(\n                (v) => v.sqlName === rows[0].OWNER_TABLE_NAME\n            );\n            const relatedTable = entities.find(\n                (v) => v.sqlName === rows[0].CHILD_TABLE_NAME\n            );\n\n            if (!ownerTable || !relatedTable) {\n                TomgUtils.LogError(\n                    `Relation between tables ${rows[0].OWNER_TABLE_NAME} and ${rows[0].CHILD_TABLE_NAME} wasn't found in entity model.`,\n                    true\n                );\n                return;\n            }\n            const internal: RelationInternal = {\n                ownerColumns: [],\n                relatedColumns: [],\n                ownerTable,\n                relatedTable,\n            };\n            if (rows[0].DELETE_RULE !== \"NO ACTION\") {\n                internal.onDelete = rows[0].DELETE_RULE;\n            }\n            rows.forEach((row) => {\n                internal.ownerColumns.push(row.OWNER_COLUMN_NAME);\n                internal.relatedColumns.push(row.CHILD_COLUMN_NAME);\n            });\n            relationsTemp.push(internal);\n        });\n\n        const retVal = OracleDriver.GetRelationsFromRelationTempInfo(\n            relationsTemp,\n            entities,\n            generationOptions\n        );\n        return retVal;\n    }\n\n    public async DisconnectFromServer() {\n        if (this.Connection) {\n            await this.Connection.close();\n        }\n    }\n\n    public async ConnectToServer(connectionOptions: IConnectionOptions) {\n        let config: Oracle.ConnectionAttributes;\n        if (connectionOptions.user === String(process.env.ORACLE_UsernameSys)) {\n            config = {\n                connectString: `${connectionOptions.host}:${connectionOptions.port}/${connectionOptions.databaseName}`,\n                externalAuth: connectionOptions.ssl,\n                password: connectionOptions.password,\n                privilege: this.Oracle.SYSDBA,\n                user: connectionOptions.user,\n            };\n        } else {\n            config = {\n                connectString: `${connectionOptions.host}:${connectionOptions.port}/${connectionOptions.databaseName}`,\n                externalAuth: connectionOptions.ssl,\n                password: connectionOptions.password,\n                user: connectionOptions.user,\n            };\n        }\n        const promise = new Promise<boolean>((resolve, reject) => {\n            this.Oracle.getConnection(config, (err, connection) => {\n                if (!err) {\n                    this.Connection = connection;\n                    resolve(true);\n                } else {\n                    TomgUtils.LogError(\n                        \"Error connecting to Oracle Server.\",\n                        false,\n                        err.message\n                    );\n                    reject(err);\n                }\n            });\n        });\n\n        await promise;\n    }\n\n    public async CreateDB(dbName: string) {\n        await this.Connection.execute(\n            `CREATE USER ${dbName} IDENTIFIED BY ${String(\n                process.env.ORACLE_Password\n            )}`\n        );\n        await this.Connection.execute(`GRANT CONNECT TO ${dbName}`);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    public async UseDB() {\n        // not supported\n    }\n\n    public async DropDB(dbName: string) {\n        await this.Connection.execute(`DROP USER ${dbName} CASCADE`);\n    }\n\n    public async CheckIfDBExists(dbName: string): Promise<boolean> {\n        const { rows } = await this.Connection.execute<any>(\n            `select count(*) as CNT from dba_users where username='${dbName.toUpperCase()}'`\n        );\n        return rows![0][0] > 0 || rows![0].CNT;\n    }\n\n    private static ReturnDefaultValueFunction(\n        defVal: string | null\n    ): string | undefined {\n        let defaultVal = defVal?.trim();\n        if (!defaultVal) {\n            return undefined;\n        }\n        if (defaultVal.endsWith(\" \")) {\n            defaultVal = defaultVal.slice(0, -1);\n        }\n\n        return `() => \"${defaultVal}\"`;\n    }\n}\n"]}