"use strict";function cov_23xx5xczy1(){var path="/home/nemo/work/github/typeorm-model-generator/src/drivers/AbstractDriver.ts";var hash="941d19d6509394e02404bcb262c0aa4c253b71dd";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/nemo/work/github/typeorm-model-generator/src/drivers/AbstractDriver.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:18},end:{line:3,column:37}},"2":{start:{line:6,column:8},end:{line:12,column:10}},"3":{start:{line:13,column:8},end:{line:32,column:10}},"4":{start:{line:33,column:8},end:{line:47,column:10}},"5":{start:{line:50,column:21},end:{line:50,column:28}},"6":{start:{line:51,column:35},end:{line:66,column:58}},"7":{start:{line:51,column:61},end:{line:66,column:57}},"8":{start:{line:52,column:42},end:{line:52,column:96}},"9":{start:{line:58,column:45},end:{line:58,column:54}},"10":{start:{line:60,column:28},end:{line:60,column:37}},"11":{start:{line:61,column:31},end:{line:66,column:43}},"12":{start:{line:62,column:46},end:{line:62,column:52}},"13":{start:{line:63,column:30},end:{line:63,column:38}},"14":{start:{line:65,column:50},end:{line:65,column:56}},"15":{start:{line:66,column:34},end:{line:66,column:42}},"16":{start:{line:67,column:8},end:{line:111,column:11}},"17":{start:{line:68,column:32},end:{line:68,column:107}},"18":{start:{line:68,column:52},end:{line:68,column:106}},"19":{start:{line:69,column:33},end:{line:69,column:108}},"20":{start:{line:69,column:53},end:{line:69,column:107}},"21":{start:{line:70,column:34},end:{line:70,column:110}},"22":{start:{line:70,column:68},end:{line:70,column:109}},"23":{start:{line:71,column:35},end:{line:71,column:112}},"24":{start:{line:71,column:70},end:{line:71,column:111}},"25":{start:{line:72,column:12},end:{line:72,column:54}},"26":{start:{line:73,column:12},end:{line:73,column:55}},"27":{start:{line:74,column:12},end:{line:74,column:62}},"28":{start:{line:75,column:12},end:{line:75,column:62}},"29":{start:{line:76,column:12},end:{line:76,column:103}},"30":{start:{line:77,column:12},end:{line:77,column:104}},"31":{start:{line:78,column:12},end:{line:78,column:66}},"32":{start:{line:79,column:12},end:{line:79,column:66}},"33":{start:{line:80,column:12},end:{line:96,column:14}},"34":{start:{line:83,column:20},end:{line:87,column:22}},"35":{start:{line:90,column:20},end:{line:94,column:22}},"36":{start:{line:97,column:12},end:{line:100,column:13}},"37":{start:{line:98,column:16},end:{line:99,column:44}},"38":{start:{line:101,column:12},end:{line:103,column:13}},"39":{start:{line:102,column:16},end:{line:102,column:78}},"40":{start:{line:104,column:12},end:{line:104,column:54}},"41":{start:{line:105,column:12},end:{line:105,column:55}},"42":{start:{line:106,column:12},end:{line:106,column:56}},"43":{start:{line:107,column:12},end:{line:107,column:57}},"44":{start:{line:108,column:12},end:{line:110,column:15}},"45":{start:{line:109,column:16},end:{line:109,column:62}},"46":{start:{line:112,column:8},end:{line:112,column:22}},"47":{start:{line:115,column:22},end:{line:115,column:24}},"48":{start:{line:116,column:8},end:{line:116,column:54}},"49":{start:{line:117,column:33},end:{line:117,column:102}},"50":{start:{line:118,column:8},end:{line:118,column:122}},"51":{start:{line:119,column:8},end:{line:119,column:99}},"52":{start:{line:120,column:8},end:{line:120,column:99}},"53":{start:{line:121,column:8},end:{line:121,column:62}},"54":{start:{line:122,column:8},end:{line:122,column:120}},"55":{start:{line:123,column:8},end:{line:123,column:42}},"56":{start:{line:124,column:8},end:{line:124,column:66}},"57":{start:{line:125,column:8},end:{line:125,column:23}},"58":{start:{line:128,column:25},end:{line:128,column:82}},"59":{start:{line:129,column:20},end:{line:129,column:22}},"60":{start:{line:130,column:8},end:{line:142,column:11}},"61":{start:{line:131,column:12},end:{line:141,column:15}},"62":{start:{line:143,column:8},end:{line:143,column:19}},"63":{start:{line:146,column:8},end:{line:242,column:11}},"64":{start:{line:147,column:32},end:{line:147,column:108}},"65":{start:{line:147,column:58},end:{line:147,column:107}},"66":{start:{line:148,column:12},end:{line:151,column:13}},"67":{start:{line:149,column:16},end:{line:149,column:197}},"68":{start:{line:150,column:16},end:{line:150,column:23}},"69":{start:{line:152,column:37},end:{line:152,column:115}},"70":{start:{line:152,column:63},end:{line:152,column:114}},"71":{start:{line:153,column:12},end:{line:156,column:13}},"72":{start:{line:154,column:16},end:{line:154,column:199}},"73":{start:{line:155,column:16},end:{line:155,column:23}},"74":{start:{line:157,column:33},end:{line:157,column:35}},"75":{start:{line:158,column:35},end:{line:158,column:37}},"76":{start:{line:159,column:12},end:{line:174,column:13}},"77":{start:{line:159,column:43},end:{line:159,column:44}},"78":{start:{line:160,column:36},end:{line:161,column:66}},"79":{start:{line:160,column:73},end:{line:161,column:65}},"80":{start:{line:162,column:16},end:{line:165,column:17}},"81":{start:{line:163,column:20},end:{line:163,column:217}},"82":{start:{line:164,column:20},end:{line:164,column:27}},"83":{start:{line:166,column:38},end:{line:167,column:68}},"84":{start:{line:166,column:80},end:{line:167,column:67}},"85":{start:{line:168,column:16},end:{line:171,column:17}},"86":{start:{line:169,column:20},end:{line:169,column:221}},"87":{start:{line:170,column:20},end:{line:170,column:27}},"88":{start:{line:172,column:16},end:{line:172,column:47}},"89":{start:{line:173,column:16},end:{line:173,column:51}},"90":{start:{line:176,column:12},end:{line:176,column:32}},"91":{start:{line:177,column:26},end:{line:179,column:108}},"92":{start:{line:177,column:60},end:{line:179,column:107}},"93":{start:{line:179,column:52},end:{line:179,column:106}},"94":{start:{line:179,column:78},end:{line:179,column:105}},"95":{start:{line:180,column:12},end:{line:180,column:33}},"96":{start:{line:181,column:12},end:{line:183,column:15}},"97":{start:{line:182,column:16},end:{line:182,column:54}},"98":{start:{line:184,column:12},end:{line:186,column:15}},"99":{start:{line:185,column:16},end:{line:185,column:59}},"100":{start:{line:187,column:28},end:{line:187,column:30}},"101":{start:{line:188,column:12},end:{line:193,column:13}},"102":{start:{line:189,column:16},end:{line:189,column:96}},"103":{start:{line:192,column:16},end:{line:192,column:105}},"104":{start:{line:194,column:36},end:{line:197,column:13}},"105":{start:{line:198,column:34},end:{line:210,column:13}},"106":{start:{line:202,column:35},end:{line:205,column:21}},"107":{start:{line:206,column:20},end:{line:206,column:34}},"108":{start:{line:211,column:12},end:{line:213,column:13}},"109":{start:{line:212,column:16},end:{line:212,column:64}},"110":{start:{line:214,column:36},end:{line:219,column:13}},"111":{start:{line:220,column:12},end:{line:220,column:54}},"112":{start:{line:221,column:12},end:{line:221,column:69}},"113":{start:{line:222,column:12},end:{line:241,column:13}},"114":{start:{line:223,column:42},end:{line:223,column:44}},"115":{start:{line:224,column:16},end:{line:224,column:106}},"116":{start:{line:225,column:32},end:{line:225,column:34}},"117":{start:{line:226,column:16},end:{line:234,column:17}},"118":{start:{line:227,column:20},end:{line:227,column:63}},"119":{start:{line:230,column:20},end:{line:230,column:56}},"120":{start:{line:231,column:20},end:{line:233,column:21}},"121":{start:{line:232,column:24},end:{line:232,column:47}},"122":{start:{line:235,column:16},end:{line:239,column:19}},"123":{start:{line:243,column:8},end:{line:243,column:24}},"124":{start:{line:246,column:8},end:{line:264,column:11}},"125":{start:{line:247,column:33},end:{line:247,column:70}},"126":{start:{line:247,column:60},end:{line:247,column:69}},"127":{start:{line:248,column:12},end:{line:258,column:15}},"128":{start:{line:249,column:33},end:{line:250,column:77}},"129":{start:{line:250,column:54},end:{line:250,column:76}},"130":{start:{line:253,column:16},end:{line:253,column:35}},"131":{start:{line:254,column:16},end:{line:257,column:17}},"132":{start:{line:256,column:20},end:{line:256,column:46}},"133":{start:{line:259,column:12},end:{line:263,column:13}},"134":{start:{line:260,column:16},end:{line:260,column:35}},"135":{start:{line:262,column:16},end:{line:262,column:80}},"136":{start:{line:268,column:8},end:{line:268,column:64}},"137":{start:{line:271,column:0},end:{line:271,column:33}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:48,column:5}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:49,column:4},end:{line:49,column:5}},loc:{start:{line:49,column:44},end:{line:113,column:5}},line:49},"2":{name:"(anonymous_2)",decl:{start:{line:51,column:49},end:{line:51,column:50}},loc:{start:{line:51,column:61},end:{line:66,column:57}},line:51},"3":{name:"(anonymous_3)",decl:{start:{line:52,column:35},end:{line:52,column:36}},loc:{start:{line:52,column:42},end:{line:52,column:96}},line:52},"4":{name:"(anonymous_4)",decl:{start:{line:58,column:38},end:{line:58,column:39}},loc:{start:{line:58,column:45},end:{line:58,column:54}},line:58},"5":{name:"(anonymous_5)",decl:{start:{line:60,column:21},end:{line:60,column:22}},loc:{start:{line:60,column:28},end:{line:60,column:37}},line:60},"6":{name:"(anonymous_6)",decl:{start:{line:61,column:24},end:{line:61,column:25}},loc:{start:{line:61,column:31},end:{line:66,column:43}},line:61},"7":{name:"(anonymous_7)",decl:{start:{line:62,column:39},end:{line:62,column:40}},loc:{start:{line:62,column:46},end:{line:62,column:52}},line:62},"8":{name:"(anonymous_8)",decl:{start:{line:63,column:22},end:{line:63,column:23}},loc:{start:{line:63,column:30},end:{line:63,column:38}},line:63},"9":{name:"(anonymous_9)",decl:{start:{line:65,column:43},end:{line:65,column:44}},loc:{start:{line:65,column:50},end:{line:65,column:56}},line:65},"10":{name:"(anonymous_10)",decl:{start:{line:66,column:26},end:{line:66,column:27}},loc:{start:{line:66,column:34},end:{line:66,column:42}},line:66},"11":{name:"(anonymous_11)",decl:{start:{line:67,column:35},end:{line:67,column:36}},loc:{start:{line:67,column:55},end:{line:111,column:9}},line:67},"12":{name:"(anonymous_12)",decl:{start:{line:68,column:45},end:{line:68,column:46}},loc:{start:{line:68,column:52},end:{line:68,column:106}},line:68},"13":{name:"(anonymous_13)",decl:{start:{line:69,column:46},end:{line:69,column:47}},loc:{start:{line:69,column:53},end:{line:69,column:107}},line:69},"14":{name:"(anonymous_14)",decl:{start:{line:70,column:61},end:{line:70,column:62}},loc:{start:{line:70,column:68},end:{line:70,column:109}},line:70},"15":{name:"(anonymous_15)",decl:{start:{line:71,column:63},end:{line:71,column:64}},loc:{start:{line:71,column:70},end:{line:71,column:111}},line:71},"16":{name:"(anonymous_16)",decl:{start:{line:82,column:79},end:{line:82,column:80}},loc:{start:{line:82,column:89},end:{line:88,column:17}},line:82},"17":{name:"(anonymous_17)",decl:{start:{line:89,column:86},end:{line:89,column:87}},loc:{start:{line:89,column:96},end:{line:95,column:17}},line:89},"18":{name:"(anonymous_18)",decl:{start:{line:108,column:35},end:{line:108,column:36}},loc:{start:{line:108,column:44},end:{line:110,column:13}},line:108},"19":{name:"(anonymous_19)",decl:{start:{line:114,column:4},end:{line:114,column:5}},loc:{start:{line:114,column:66},end:{line:126,column:5}},line:114},"20":{name:"(anonymous_20)",decl:{start:{line:127,column:4},end:{line:127,column:5}},loc:{start:{line:127,column:52},end:{line:144,column:5}},line:127},"21":{name:"(anonymous_21)",decl:{start:{line:130,column:25},end:{line:130,column:26}},loc:{start:{line:130,column:34},end:{line:142,column:9}},line:130},"22":{name:"(anonymous_22)",decl:{start:{line:145,column:4},end:{line:145,column:5}},loc:{start:{line:145,column:88},end:{line:244,column:5}},line:145},"23":{name:"(anonymous_23)",decl:{start:{line:146,column:30},end:{line:146,column:31}},loc:{start:{line:146,column:47},end:{line:242,column:9}},line:146},"24":{name:"(anonymous_24)",decl:{start:{line:147,column:46},end:{line:147,column:47}},loc:{start:{line:147,column:58},end:{line:147,column:107}},line:147},"25":{name:"(anonymous_25)",decl:{start:{line:152,column:51},end:{line:152,column:52}},loc:{start:{line:152,column:63},end:{line:152,column:114}},line:152},"26":{name:"(anonymous_26)",decl:{start:{line:160,column:61},end:{line:160,column:62}},loc:{start:{line:160,column:73},end:{line:161,column:65}},line:160},"27":{name:"(anonymous_27)",decl:{start:{line:166,column:68},end:{line:166,column:69}},loc:{start:{line:166,column:80},end:{line:167,column:67}},line:166},"28":{name:"(anonymous_28)",decl:{start:{line:177,column:51},end:{line:177,column:52}},loc:{start:{line:177,column:60},end:{line:179,column:107}},line:177},"29":{name:"(anonymous_29)",decl:{start:{line:179,column:35},end:{line:179,column:36}},loc:{start:{line:179,column:52},end:{line:179,column:106}},line:179},"30":{name:"(anonymous_30)",decl:{start:{line:179,column:69},end:{line:179,column:70}},loc:{start:{line:179,column:78},end:{line:179,column:105}},line:179},"31":{name:"(anonymous_31)",decl:{start:{line:181,column:33},end:{line:181,column:34}},loc:{start:{line:181,column:45},end:{line:183,column:13}},line:181},"32":{name:"(anonymous_32)",decl:{start:{line:184,column:35},end:{line:184,column:36}},loc:{start:{line:184,column:47},end:{line:186,column:13}},line:184},"33":{name:"(anonymous_33)",decl:{start:{line:201,column:64},end:{line:201,column:65}},loc:{start:{line:201,column:76},end:{line:207,column:17}},line:201},"34":{name:"(anonymous_34)",decl:{start:{line:245,column:4},end:{line:245,column:5}},loc:{start:{line:245,column:50},end:{line:265,column:5}},line:245},"35":{name:"(anonymous_35)",decl:{start:{line:246,column:24},end:{line:246,column:25}},loc:{start:{line:246,column:36},end:{line:264,column:9}},line:246},"36":{name:"(anonymous_36)",decl:{start:{line:247,column:53},end:{line:247,column:54}},loc:{start:{line:247,column:60},end:{line:247,column:69}},line:247},"37":{name:"(anonymous_37)",decl:{start:{line:249,column:24},end:{line:249,column:25}},loc:{start:{line:249,column:33},end:{line:250,column:77}},line:249},"38":{name:"(anonymous_38)",decl:{start:{line:250,column:42},end:{line:250,column:43}},loc:{start:{line:250,column:54},end:{line:250,column:76}},line:250},"39":{name:"(anonymous_39)",decl:{start:{line:251,column:25},end:{line:251,column:26}},loc:{start:{line:251,column:34},end:{line:258,column:13}},line:251},"40":{name:"(anonymous_40)",decl:{start:{line:259,column:37},end:{line:259,column:38}},loc:{start:{line:259,column:44},end:{line:261,column:13}},line:259},"41":{name:"(anonymous_41)",decl:{start:{line:267,column:4},end:{line:267,column:5}},loc:{start:{line:267,column:56},end:{line:269,column:5}},line:267}},branchMap:{"0":{loc:{start:{line:51,column:61},end:{line:66,column:57}},type:"binary-expr",locations:[{start:{line:51,column:61},end:{line:51,column:90}},{start:{line:52,column:12},end:{line:52,column:97}},{start:{line:53,column:12},end:{line:54,column:48}},{start:{line:55,column:12},end:{line:56,column:60}},{start:{line:57,column:12},end:{line:58,column:62}},{start:{line:59,column:12},end:{line:66,column:57}}],line:51},"1":{loc:{start:{line:52,column:42},end:{line:52,column:96}},type:"binary-expr",locations:[{start:{line:52,column:42},end:{line:52,column:61}},{start:{line:52,column:65},end:{line:52,column:96}}],line:52},"2":{loc:{start:{line:61,column:31},end:{line:66,column:43}},type:"binary-expr",locations:[{start:{line:61,column:31},end:{line:63,column:39}},{start:{line:64,column:16},end:{line:66,column:43}}],line:61},"3":{loc:{start:{line:97,column:12},end:{line:100,column:13}},type:"if",locations:[{start:{line:97,column:12},end:{line:100,column:13}},{start:{line:97,column:12},end:{line:100,column:13}}],line:97},"4":{loc:{start:{line:101,column:12},end:{line:103,column:13}},type:"if",locations:[{start:{line:101,column:12},end:{line:103,column:13}},{start:{line:101,column:12},end:{line:103,column:13}}],line:101},"5":{loc:{start:{line:138,column:26},end:{line:138,column:66}},type:"cond-expr",locations:[{start:{line:138,column:50},end:{line:138,column:61}},{start:{line:138,column:64},end:{line:138,column:66}}],line:138},"6":{loc:{start:{line:148,column:12},end:{line:151,column:13}},type:"if",locations:[{start:{line:148,column:12},end:{line:151,column:13}},{start:{line:148,column:12},end:{line:151,column:13}}],line:148},"7":{loc:{start:{line:153,column:12},end:{line:156,column:13}},type:"if",locations:[{start:{line:153,column:12},end:{line:156,column:13}},{start:{line:153,column:12},end:{line:156,column:13}}],line:153},"8":{loc:{start:{line:162,column:16},end:{line:165,column:17}},type:"if",locations:[{start:{line:162,column:16},end:{line:165,column:17}},{start:{line:162,column:16},end:{line:165,column:17}}],line:162},"9":{loc:{start:{line:168,column:16},end:{line:171,column:17}},type:"if",locations:[{start:{line:168,column:16},end:{line:171,column:17}},{start:{line:168,column:16},end:{line:171,column:17}}],line:168},"10":{loc:{start:{line:177,column:60},end:{line:179,column:107}},type:"binary-expr",locations:[{start:{line:177,column:60},end:{line:177,column:78}},{start:{line:178,column:16},end:{line:178,column:58}},{start:{line:179,column:16},end:{line:179,column:107}}],line:177},"11":{loc:{start:{line:188,column:12},end:{line:193,column:13}},type:"if",locations:[{start:{line:188,column:12},end:{line:193,column:13}},{start:{line:188,column:12},end:{line:193,column:13}}],line:188},"12":{loc:{start:{line:209,column:30},end:{line:209,column:68}},type:"cond-expr",locations:[{start:{line:209,column:44},end:{line:209,column:55}},{start:{line:209,column:58},end:{line:209,column:68}}],line:209},"13":{loc:{start:{line:211,column:12},end:{line:213,column:13}},type:"if",locations:[{start:{line:211,column:12},end:{line:213,column:13}},{start:{line:211,column:12},end:{line:213,column:13}}],line:211},"14":{loc:{start:{line:218,column:30},end:{line:218,column:68}},type:"cond-expr",locations:[{start:{line:218,column:44},end:{line:218,column:55}},{start:{line:218,column:58},end:{line:218,column:68}}],line:218},"15":{loc:{start:{line:222,column:12},end:{line:241,column:13}},type:"if",locations:[{start:{line:222,column:12},end:{line:241,column:13}},{start:{line:222,column:12},end:{line:241,column:13}}],line:222},"16":{loc:{start:{line:222,column:16},end:{line:222,column:74}},type:"binary-expr",locations:[{start:{line:222,column:16},end:{line:222,column:45}},{start:{line:222,column:49},end:{line:222,column:74}}],line:222},"17":{loc:{start:{line:226,column:16},end:{line:234,column:17}},type:"if",locations:[{start:{line:226,column:16},end:{line:234,column:17}},{start:{line:226,column:16},end:{line:234,column:17}}],line:226},"18":{loc:{start:{line:231,column:20},end:{line:233,column:21}},type:"if",locations:[{start:{line:231,column:20},end:{line:233,column:21}},{start:{line:231,column:20},end:{line:233,column:21}}],line:231},"19":{loc:{start:{line:249,column:33},end:{line:250,column:77}},type:"binary-expr",locations:[{start:{line:249,column:33},end:{line:249,column:45}},{start:{line:250,column:16},end:{line:250,column:77}}],line:249},"20":{loc:{start:{line:254,column:16},end:{line:257,column:17}},type:"if",locations:[{start:{line:254,column:16},end:{line:257,column:17}},{start:{line:254,column:16},end:{line:257,column:17}}],line:254},"21":{loc:{start:{line:254,column:20},end:{line:255,column:38}},type:"binary-expr",locations:[{start:{line:254,column:20},end:{line:254,column:53}},{start:{line:255,column:20},end:{line:255,column:38}}],line:254},"22":{loc:{start:{line:259,column:12},end:{line:263,column:13}},type:"if",locations:[{start:{line:259,column:12},end:{line:263,column:13}},{start:{line:259,column:12},end:{line:263,column:13}}],line:259}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},b:{"0":[0,0,0,0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0]},inputSourceMap:{version:3,file:"/home/nemo/work/github/typeorm-model-generator/src/drivers/AbstractDriver.ts",sources:["/home/nemo/work/github/typeorm-model-generator/src/drivers/AbstractDriver.ts"],names:[],mappings:"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",sourcesContent:["import {\n    WithLengthColumnType,\n    WithPrecisionColumnType,\n    WithWidthColumnType,\n} from \"typeorm/driver/types/ColumnTypes\";\nimport { JoinColumnOptions, RelationOptions } from \"typeorm\";\nimport { DataTypeDefaults } from \"typeorm/driver/types/DataTypeDefaults\";\nimport * as TomgUtils from \"../Utils\";\nimport IConnectionOptions from \"../IConnectionOptions\";\nimport { Entity } from \"../models/Entity\";\nimport { RelationInternal } from \"../models/RelationInternal\";\nimport { Relation } from \"../models/Relation\";\nimport IGenerationOptions from \"../IGenerationOptions\";\nimport { Column } from \"../models/Column\";\n\nexport default abstract class AbstractDriver {\n    public abstract standardPort: number;\n\n    public abstract standardSchema: string;\n\n    public abstract standardUser: string;\n\n    public abstract defaultValues: DataTypeDefaults;\n\n    public ColumnTypesWithWidth: WithWidthColumnType[] = [\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"int\",\n        \"bigint\",\n    ];\n\n    public ColumnTypesWithPrecision: WithPrecisionColumnType[] = [\n        \"float\",\n        \"double\",\n        \"dec\",\n        \"decimal\",\n        \"numeric\",\n        \"real\",\n        \"double precision\",\n        \"number\",\n        \"datetime\",\n        \"datetime2\",\n        \"datetimeoffset\",\n        \"time\",\n        \"time with time zone\",\n        \"time without time zone\",\n        \"timestamp\",\n        \"timestamp without time zone\",\n        \"timestamp with time zone\",\n        \"timestamp with local time zone\",\n    ];\n\n    public ColumnTypesWithLength: WithLengthColumnType[] = [\n        \"character varying\",\n        \"varying character\",\n        \"nvarchar\",\n        \"character\",\n        \"native character\",\n        \"varchar\",\n        \"char\",\n        \"nchar\",\n        \"varchar2\",\n        \"nvarchar2\",\n        \"raw\",\n        \"binary\",\n        \"varbinary\",\n    ];\n\n    public abstract GetAllTablesQuery: (\n        schema: string,\n        dbNames: string,\n        tableNames: string[]\n    ) => Promise<\n        {\n            TABLE_SCHEMA: string;\n            TABLE_NAME: string;\n            DB_NAME: string;\n        }[]\n    >;\n\n    public static FindManyToManyRelations(dbModel: Entity[]) {\n        let retVal = dbModel;\n        const manyToManyEntities = retVal.filter(\n            (entity) =>\n                entity.relations.length === 2 &&\n                entity.relations.every(\n                    (v) =>\n                        v.joinColumnOptions && v.relationType !== \"ManyToMany\"\n                ) &&\n                entity.relations[0].relatedTable !==\n                    entity.relations[1].relatedTable &&\n                entity.relations[0].joinColumnOptions!.length ===\n                    entity.relations[1].joinColumnOptions!.length &&\n                entity.columns.length ===\n                    entity.columns.filter((c) => c.primary).length &&\n                entity.columns\n                    .map((v) => v.tscName)\n                    .filter(\n                        (v) =>\n                            !entity.relations[0]\n                                .joinColumnOptions!.map((x) => x.name)\n                                .some((jc) => jc === v) &&\n                            !entity.relations[1]\n                                .joinColumnOptions!.map((x) => x.name)\n                                .some((jc) => jc === v)\n                    ).length === 0\n        );\n        manyToManyEntities.forEach((junctionEntity) => {\n            const firstEntity = dbModel.find(\n                (v) => v.tscName === junctionEntity.relations[0].relatedTable\n            )!;\n            const secondEntity = dbModel.find(\n                (v) => v.tscName === junctionEntity.relations[1].relatedTable\n            )!;\n\n            const firstRelation = firstEntity.relations.find(\n                (v) => v.relatedTable === junctionEntity.tscName\n            )!;\n            const secondRelation = secondEntity.relations.find(\n                (v) => v.relatedTable === junctionEntity.tscName\n            )!;\n\n            firstRelation.relationType = \"ManyToMany\";\n            secondRelation.relationType = \"ManyToMany\";\n            firstRelation.relatedTable = secondEntity.tscName;\n            secondRelation.relatedTable = firstEntity.tscName;\n\n            firstRelation.fieldName = TomgUtils.findNameForNewField(\n                secondEntity.tscName,\n                firstEntity\n            );\n            secondRelation.fieldName = TomgUtils.findNameForNewField(\n                firstEntity.tscName,\n                secondEntity\n            );\n            firstRelation.relatedField = secondRelation.fieldName;\n            secondRelation.relatedField = firstRelation.fieldName;\n\n            firstRelation.joinTableOptions = {\n                name: junctionEntity.sqlName,\n                joinColumns: junctionEntity.relations[0].joinColumnOptions!.map(\n                    (v, i) => {\n                        return {\n                            referencedColumnName: v.referencedColumnName,\n                            name: junctionEntity.relations[0]\n                                .joinColumnOptions![i].name,\n                        };\n                    }\n                ),\n                inverseJoinColumns: junctionEntity.relations[1].joinColumnOptions!.map(\n                    (v, i) => {\n                        return {\n                            referencedColumnName: v.referencedColumnName,\n                            name: junctionEntity.relations[1]\n                                .joinColumnOptions![i].name,\n                        };\n                    }\n                ),\n            };\n            if (junctionEntity.database) {\n                firstRelation.joinTableOptions.database =\n                    junctionEntity.database;\n            }\n            if (junctionEntity.schema) {\n                firstRelation.joinTableOptions.schema = junctionEntity.schema;\n            }\n\n            firstRelation.relationOptions = undefined;\n            secondRelation.relationOptions = undefined;\n            firstRelation.joinColumnOptions = undefined;\n            secondRelation.joinColumnOptions = undefined;\n            retVal = retVal.filter((ent) => {\n                return ent.tscName !== junctionEntity.tscName;\n            });\n        });\n        return retVal;\n    }\n\n    public async GetDataFromServer(\n        connectionOptions: IConnectionOptions,\n        generationOptions: IGenerationOptions\n    ): Promise<Entity[]> {\n        let dbModel = [] as Entity[];\n        await this.ConnectToServer(connectionOptions);\n        const sqlEscapedSchema = AbstractDriver.escapeCommaSeparatedList(\n            connectionOptions.schemaName\n        );\n        dbModel = await this.GetAllTables(\n            sqlEscapedSchema,\n            connectionOptions.databaseName,\n            connectionOptions.skipTables\n        );\n        await this.GetCoulmnsFromEntity(\n            dbModel,\n            sqlEscapedSchema,\n            connectionOptions.databaseName\n        );\n        await this.GetIndexesFromEntity(\n            dbModel,\n            sqlEscapedSchema,\n            connectionOptions.databaseName\n        );\n        AbstractDriver.FindPrimaryColumnsFromIndexes(dbModel);\n        dbModel = await this.GetRelations(\n            dbModel,\n            sqlEscapedSchema,\n            connectionOptions.databaseName,\n            generationOptions\n        );\n        await this.DisconnectFromServer();\n        dbModel = AbstractDriver.FindManyToManyRelations(dbModel);\n        return dbModel;\n    }\n\n    public abstract async ConnectToServer(connectionOptons: IConnectionOptions);\n\n    public async GetAllTables(\n        schema: string,\n        dbNames: string,\n        tableNames: string[]\n    ): Promise<Entity[]> {\n        const response = await this.GetAllTablesQuery(\n            schema,\n            dbNames,\n            tableNames\n        );\n        const ret: Entity[] = [] as Entity[];\n        response.forEach((val) => {\n            ret.push({\n                columns: [],\n                indices: [],\n                relations: [],\n                relationIds: [],\n                sqlName: val.TABLE_NAME,\n                tscName: val.TABLE_NAME,\n                database: dbNames.includes(\",\") ? val.DB_NAME : \"\",\n                schema: val.TABLE_SCHEMA,\n                fileImports: [],\n            });\n        });\n        return ret;\n    }\n\n    public static GetRelationsFromRelationTempInfo(\n        relationsTemp: RelationInternal[],\n        entities: Entity[],\n        generationOptions: IGenerationOptions\n    ) {\n        relationsTemp.forEach((relationTmp) => {\n            const ownerEntity = entities.find(\n                (entity) => entity.tscName === relationTmp.ownerTable.tscName\n            );\n            if (!ownerEntity) {\n                TomgUtils.LogError(\n                    `Relation between tables ${relationTmp.ownerTable.sqlName} and ${relationTmp.relatedTable.sqlName} didn't found entity model ${relationTmp.ownerTable.sqlName}.`\n                );\n                return;\n            }\n            const referencedEntity = entities.find(\n                (entity) => entity.tscName === relationTmp.relatedTable.tscName\n            );\n            if (!referencedEntity) {\n                TomgUtils.LogError(\n                    `Relation between tables ${relationTmp.ownerTable.sqlName} and ${relationTmp.relatedTable.sqlName} didn't found entity model ${relationTmp.relatedTable.sqlName}.`\n                );\n                return;\n            }\n\n            const ownerColumns: Column[] = [];\n            const relatedColumns: Column[] = [];\n            for (\n                let relationColumnIndex = 0;\n                relationColumnIndex < relationTmp.ownerColumns.length;\n                relationColumnIndex++\n            ) {\n                const ownerColumn = ownerEntity.columns.find(\n                    (column) =>\n                        column.tscName ===\n                        relationTmp.ownerColumns[relationColumnIndex]\n                );\n                if (!ownerColumn) {\n                    TomgUtils.LogError(\n                        `Relation between tables ${relationTmp.ownerTable.sqlName} and ${relationTmp.relatedTable.sqlName} didn't found entity column ${relationTmp.ownerTable.sqlName}.${ownerColumn}.`\n                    );\n                    return;\n                }\n                const relatedColumn = referencedEntity.columns.find(\n                    (column) =>\n                        column.tscName ===\n                        relationTmp.relatedColumns[relationColumnIndex]\n                );\n                if (!relatedColumn) {\n                    TomgUtils.LogError(\n                        `Relation between tables ${relationTmp.ownerTable.sqlName} and ${relationTmp.relatedTable.sqlName} didn't found entity column ${relationTmp.relatedTable.sqlName}.${relatedColumn}.`\n                    );\n                    return;\n                }\n                ownerColumns.push(ownerColumn);\n                relatedColumns.push(relatedColumn);\n            }\n            let isOneToMany: boolean;\n            isOneToMany = false;\n            const index = ownerEntity.indices.find(\n                (ind) =>\n                    ind.options.unique &&\n                    ind.columns.length === ownerColumns.length &&\n                    ownerColumns.every((ownerColumn) =>\n                        ind.columns.some((col) => col === ownerColumn.tscName)\n                    )\n            );\n            isOneToMany = !index;\n\n            ownerColumns.forEach((column) => {\n                column.isUsedInRelationAsOwner = true;\n            });\n            relatedColumns.forEach((column) => {\n                column.isUsedInRelationAsReferenced = true;\n            });\n            let fieldName = \"\";\n            if (ownerColumns.length === 1) {\n                fieldName = TomgUtils.findNameForNewField(\n                    ownerColumns[0].tscName,\n                    ownerEntity\n                );\n            } else {\n                fieldName = TomgUtils.findNameForNewField(\n                    relationTmp.relatedTable.tscName,\n                    ownerEntity\n                );\n            }\n\n            const relationOptions: RelationOptions = {\n                onDelete: relationTmp.onDelete,\n                onUpdate: relationTmp.onUpdate,\n            };\n\n            const ownerRelation: Relation = {\n                fieldName,\n                relatedField: TomgUtils.findNameForNewField(\n                    relationTmp.ownerTable.tscName,\n                    relationTmp.relatedTable\n                ),\n                joinColumnOptions: relationTmp.ownerColumns.map((v, idx) => {\n                    const retVal: Required<JoinColumnOptions> = {\n                        name: v,\n                        referencedColumnName: relationTmp.relatedColumns[idx],\n                    };\n                    return retVal;\n                }),\n                relatedTable: relationTmp.relatedTable.tscName,\n                relationType: isOneToMany ? \"ManyToOne\" : \"OneToOne\",\n            };\n            if (JSON.stringify(relationOptions) !== \"{}\") {\n                ownerRelation.relationOptions = relationOptions;\n            }\n            const relatedRelation: Relation = {\n                fieldName: ownerRelation.relatedField,\n                relatedField: ownerRelation.fieldName,\n                relatedTable: relationTmp.ownerTable.tscName,\n                relationType: isOneToMany ? \"OneToMany\" : \"OneToOne\",\n            };\n\n            ownerEntity.relations.push(ownerRelation);\n            relationTmp.relatedTable.relations.push(relatedRelation);\n\n            if (generationOptions.relationIds && ownerColumns.length === 1) {\n                let relationIdFieldName = \"\";\n                relationIdFieldName = TomgUtils.findNameForNewField(\n                    ownerColumns[0].tscName,\n                    ownerEntity\n                );\n\n                let fieldType = \"\";\n                if (isOneToMany) {\n                    fieldType = `${ownerColumns[0].tscType}[]`;\n                } else {\n                    fieldType = ownerColumns[0].tscType;\n                    if (ownerColumns[0].options.nullable) {\n                        fieldType += \" | null\";\n                    }\n                }\n\n                ownerEntity.relationIds.push({\n                    fieldName: relationIdFieldName,\n                    fieldType,\n                    relationField: ownerRelation.fieldName,\n                });\n                // TODO: RelationId on ManyToMany\n            }\n        });\n        return entities;\n    }\n\n    public abstract async GetCoulmnsFromEntity(\n        entities: Entity[],\n        schema: string,\n        dbNames: string\n    ): Promise<Entity[]>;\n\n    public abstract async GetIndexesFromEntity(\n        entities: Entity[],\n        schema: string,\n        dbNames: string\n    ): Promise<Entity[]>;\n\n    public abstract async GetRelations(\n        entities: Entity[],\n        schema: string,\n        dbNames: string,\n        generationOptions: IGenerationOptions\n    ): Promise<Entity[]>;\n\n    public static FindPrimaryColumnsFromIndexes(dbModel: Entity[]) {\n        dbModel.forEach((entity) => {\n            const primaryIndex = entity.indices.find((v) => v.primary);\n            entity.columns\n                .filter(\n                    (col) =>\n                        primaryIndex &&\n                        primaryIndex.columns.some(\n                            (cIndex) => cIndex === col.tscName\n                        )\n                )\n                .forEach((col) => {\n                    // eslint-disable-next-line no-param-reassign\n                    col.primary = true;\n                    if (\n                        primaryIndex!.columns.length === 1 &&\n                        col.options.unique\n                    ) {\n                        delete col.options.unique;\n                    }\n                });\n            if (\n                !entity.columns.some((v) => {\n                    return !!v.primary;\n                })\n            ) {\n                TomgUtils.LogError(`Table ${entity.tscName} has no PK.`, false);\n            }\n        });\n    }\n\n    public abstract async DisconnectFromServer();\n\n    public abstract async CreateDB(dbName: string);\n\n    public abstract async DropDB(dbName: string);\n\n    public abstract async UseDB(dbName: string);\n\n    public abstract async CheckIfDBExists(dbName: string): Promise<boolean>;\n\n    // TODO: change name\n    protected static escapeCommaSeparatedList(commaSeparatedList: string) {\n        return `'${commaSeparatedList.split(\",\").join(\"','\")}'`;\n    }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"941d19d6509394e02404bcb262c0aa4c253b71dd"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_23xx5xczy1=function(){return actualCoverage;};return actualCoverage;}cov_23xx5xczy1();cov_23xx5xczy1().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const TomgUtils=(cov_23xx5xczy1().s[1]++,require("../Utils"));class AbstractDriver{constructor(){cov_23xx5xczy1().f[0]++;cov_23xx5xczy1().s[2]++;this.ColumnTypesWithWidth=["tinyint","smallint","mediumint","int","bigint"];cov_23xx5xczy1().s[3]++;this.ColumnTypesWithPrecision=["float","double","dec","decimal","numeric","real","double precision","number","datetime","datetime2","datetimeoffset","time","time with time zone","time without time zone","timestamp","timestamp without time zone","timestamp with time zone","timestamp with local time zone"];cov_23xx5xczy1().s[4]++;this.ColumnTypesWithLength=["character varying","varying character","nvarchar","character","native character","varchar","char","nchar","varchar2","nvarchar2","raw","binary","varbinary"];}static FindManyToManyRelations(dbModel){cov_23xx5xczy1().f[1]++;let retVal=(cov_23xx5xczy1().s[5]++,dbModel);const manyToManyEntities=(cov_23xx5xczy1().s[6]++,retVal.filter(entity=>{cov_23xx5xczy1().f[2]++;cov_23xx5xczy1().s[7]++;return(cov_23xx5xczy1().b[0][0]++,entity.relations.length===2)&&(cov_23xx5xczy1().b[0][1]++,entity.relations.every(v=>{cov_23xx5xczy1().f[3]++;cov_23xx5xczy1().s[8]++;return(cov_23xx5xczy1().b[1][0]++,v.joinColumnOptions)&&(cov_23xx5xczy1().b[1][1]++,v.relationType!=="ManyToMany");}))&&(cov_23xx5xczy1().b[0][2]++,entity.relations[0].relatedTable!==entity.relations[1].relatedTable)&&(cov_23xx5xczy1().b[0][3]++,entity.relations[0].joinColumnOptions.length===entity.relations[1].joinColumnOptions.length)&&(cov_23xx5xczy1().b[0][4]++,entity.columns.length===entity.columns.filter(c=>{cov_23xx5xczy1().f[4]++;cov_23xx5xczy1().s[9]++;return c.primary;}).length)&&(cov_23xx5xczy1().b[0][5]++,entity.columns.map(v=>{cov_23xx5xczy1().f[5]++;cov_23xx5xczy1().s[10]++;return v.tscName;}).filter(v=>{cov_23xx5xczy1().f[6]++;cov_23xx5xczy1().s[11]++;return(cov_23xx5xczy1().b[2][0]++,!entity.relations[0].joinColumnOptions.map(x=>{cov_23xx5xczy1().f[7]++;cov_23xx5xczy1().s[12]++;return x.name;}).some(jc=>{cov_23xx5xczy1().f[8]++;cov_23xx5xczy1().s[13]++;return jc===v;}))&&(cov_23xx5xczy1().b[2][1]++,!entity.relations[1].joinColumnOptions.map(x=>{cov_23xx5xczy1().f[9]++;cov_23xx5xczy1().s[14]++;return x.name;}).some(jc=>{cov_23xx5xczy1().f[10]++;cov_23xx5xczy1().s[15]++;return jc===v;}));}).length===0);}));cov_23xx5xczy1().s[16]++;manyToManyEntities.forEach(junctionEntity=>{cov_23xx5xczy1().f[11]++;const firstEntity=(cov_23xx5xczy1().s[17]++,dbModel.find(v=>{cov_23xx5xczy1().f[12]++;cov_23xx5xczy1().s[18]++;return v.tscName===junctionEntity.relations[0].relatedTable;}));const secondEntity=(cov_23xx5xczy1().s[19]++,dbModel.find(v=>{cov_23xx5xczy1().f[13]++;cov_23xx5xczy1().s[20]++;return v.tscName===junctionEntity.relations[1].relatedTable;}));const firstRelation=(cov_23xx5xczy1().s[21]++,firstEntity.relations.find(v=>{cov_23xx5xczy1().f[14]++;cov_23xx5xczy1().s[22]++;return v.relatedTable===junctionEntity.tscName;}));const secondRelation=(cov_23xx5xczy1().s[23]++,secondEntity.relations.find(v=>{cov_23xx5xczy1().f[15]++;cov_23xx5xczy1().s[24]++;return v.relatedTable===junctionEntity.tscName;}));cov_23xx5xczy1().s[25]++;firstRelation.relationType="ManyToMany";cov_23xx5xczy1().s[26]++;secondRelation.relationType="ManyToMany";cov_23xx5xczy1().s[27]++;firstRelation.relatedTable=secondEntity.tscName;cov_23xx5xczy1().s[28]++;secondRelation.relatedTable=firstEntity.tscName;cov_23xx5xczy1().s[29]++;firstRelation.fieldName=TomgUtils.findNameForNewField(secondEntity.tscName,firstEntity);cov_23xx5xczy1().s[30]++;secondRelation.fieldName=TomgUtils.findNameForNewField(firstEntity.tscName,secondEntity);cov_23xx5xczy1().s[31]++;firstRelation.relatedField=secondRelation.fieldName;cov_23xx5xczy1().s[32]++;secondRelation.relatedField=firstRelation.fieldName;cov_23xx5xczy1().s[33]++;firstRelation.joinTableOptions={name:junctionEntity.sqlName,joinColumns:junctionEntity.relations[0].joinColumnOptions.map((v,i)=>{cov_23xx5xczy1().f[16]++;cov_23xx5xczy1().s[34]++;return{referencedColumnName:v.referencedColumnName,name:junctionEntity.relations[0].joinColumnOptions[i].name};}),inverseJoinColumns:junctionEntity.relations[1].joinColumnOptions.map((v,i)=>{cov_23xx5xczy1().f[17]++;cov_23xx5xczy1().s[35]++;return{referencedColumnName:v.referencedColumnName,name:junctionEntity.relations[1].joinColumnOptions[i].name};})};cov_23xx5xczy1().s[36]++;if(junctionEntity.database){cov_23xx5xczy1().b[3][0]++;cov_23xx5xczy1().s[37]++;firstRelation.joinTableOptions.database=junctionEntity.database;}else{cov_23xx5xczy1().b[3][1]++;}cov_23xx5xczy1().s[38]++;if(junctionEntity.schema){cov_23xx5xczy1().b[4][0]++;cov_23xx5xczy1().s[39]++;firstRelation.joinTableOptions.schema=junctionEntity.schema;}else{cov_23xx5xczy1().b[4][1]++;}cov_23xx5xczy1().s[40]++;firstRelation.relationOptions=undefined;cov_23xx5xczy1().s[41]++;secondRelation.relationOptions=undefined;cov_23xx5xczy1().s[42]++;firstRelation.joinColumnOptions=undefined;cov_23xx5xczy1().s[43]++;secondRelation.joinColumnOptions=undefined;cov_23xx5xczy1().s[44]++;retVal=retVal.filter(ent=>{cov_23xx5xczy1().f[18]++;cov_23xx5xczy1().s[45]++;return ent.tscName!==junctionEntity.tscName;});});cov_23xx5xczy1().s[46]++;return retVal;}async GetDataFromServer(connectionOptions,generationOptions){cov_23xx5xczy1().f[19]++;let dbModel=(cov_23xx5xczy1().s[47]++,[]);cov_23xx5xczy1().s[48]++;await this.ConnectToServer(connectionOptions);const sqlEscapedSchema=(cov_23xx5xczy1().s[49]++,AbstractDriver.escapeCommaSeparatedList(connectionOptions.schemaName));cov_23xx5xczy1().s[50]++;dbModel=await this.GetAllTables(sqlEscapedSchema,connectionOptions.databaseName,connectionOptions.skipTables);cov_23xx5xczy1().s[51]++;await this.GetCoulmnsFromEntity(dbModel,sqlEscapedSchema,connectionOptions.databaseName);cov_23xx5xczy1().s[52]++;await this.GetIndexesFromEntity(dbModel,sqlEscapedSchema,connectionOptions.databaseName);cov_23xx5xczy1().s[53]++;AbstractDriver.FindPrimaryColumnsFromIndexes(dbModel);cov_23xx5xczy1().s[54]++;dbModel=await this.GetRelations(dbModel,sqlEscapedSchema,connectionOptions.databaseName,generationOptions);cov_23xx5xczy1().s[55]++;await this.DisconnectFromServer();cov_23xx5xczy1().s[56]++;dbModel=AbstractDriver.FindManyToManyRelations(dbModel);cov_23xx5xczy1().s[57]++;return dbModel;}async GetAllTables(schema,dbNames,tableNames){cov_23xx5xczy1().f[20]++;const response=(cov_23xx5xczy1().s[58]++,await this.GetAllTablesQuery(schema,dbNames,tableNames));const ret=(cov_23xx5xczy1().s[59]++,[]);cov_23xx5xczy1().s[60]++;response.forEach(val=>{cov_23xx5xczy1().f[21]++;cov_23xx5xczy1().s[61]++;ret.push({columns:[],indices:[],relations:[],relationIds:[],sqlName:val.TABLE_NAME,tscName:val.TABLE_NAME,database:dbNames.includes(",")?(cov_23xx5xczy1().b[5][0]++,val.DB_NAME):(cov_23xx5xczy1().b[5][1]++,""),schema:val.TABLE_SCHEMA,fileImports:[]});});cov_23xx5xczy1().s[62]++;return ret;}static GetRelationsFromRelationTempInfo(relationsTemp,entities,generationOptions){cov_23xx5xczy1().f[22]++;cov_23xx5xczy1().s[63]++;relationsTemp.forEach(relationTmp=>{cov_23xx5xczy1().f[23]++;const ownerEntity=(cov_23xx5xczy1().s[64]++,entities.find(entity=>{cov_23xx5xczy1().f[24]++;cov_23xx5xczy1().s[65]++;return entity.tscName===relationTmp.ownerTable.tscName;}));cov_23xx5xczy1().s[66]++;if(!ownerEntity){cov_23xx5xczy1().b[6][0]++;cov_23xx5xczy1().s[67]++;TomgUtils.LogError(`Relation between tables ${relationTmp.ownerTable.sqlName} and ${relationTmp.relatedTable.sqlName} didn't found entity model ${relationTmp.ownerTable.sqlName}.`);cov_23xx5xczy1().s[68]++;return;}else{cov_23xx5xczy1().b[6][1]++;}const referencedEntity=(cov_23xx5xczy1().s[69]++,entities.find(entity=>{cov_23xx5xczy1().f[25]++;cov_23xx5xczy1().s[70]++;return entity.tscName===relationTmp.relatedTable.tscName;}));cov_23xx5xczy1().s[71]++;if(!referencedEntity){cov_23xx5xczy1().b[7][0]++;cov_23xx5xczy1().s[72]++;TomgUtils.LogError(`Relation between tables ${relationTmp.ownerTable.sqlName} and ${relationTmp.relatedTable.sqlName} didn't found entity model ${relationTmp.relatedTable.sqlName}.`);cov_23xx5xczy1().s[73]++;return;}else{cov_23xx5xczy1().b[7][1]++;}const ownerColumns=(cov_23xx5xczy1().s[74]++,[]);const relatedColumns=(cov_23xx5xczy1().s[75]++,[]);cov_23xx5xczy1().s[76]++;for(let relationColumnIndex=(cov_23xx5xczy1().s[77]++,0);relationColumnIndex<relationTmp.ownerColumns.length;relationColumnIndex++){const ownerColumn=(cov_23xx5xczy1().s[78]++,ownerEntity.columns.find(column=>{cov_23xx5xczy1().f[26]++;cov_23xx5xczy1().s[79]++;return column.tscName===relationTmp.ownerColumns[relationColumnIndex];}));cov_23xx5xczy1().s[80]++;if(!ownerColumn){cov_23xx5xczy1().b[8][0]++;cov_23xx5xczy1().s[81]++;TomgUtils.LogError(`Relation between tables ${relationTmp.ownerTable.sqlName} and ${relationTmp.relatedTable.sqlName} didn't found entity column ${relationTmp.ownerTable.sqlName}.${ownerColumn}.`);cov_23xx5xczy1().s[82]++;return;}else{cov_23xx5xczy1().b[8][1]++;}const relatedColumn=(cov_23xx5xczy1().s[83]++,referencedEntity.columns.find(column=>{cov_23xx5xczy1().f[27]++;cov_23xx5xczy1().s[84]++;return column.tscName===relationTmp.relatedColumns[relationColumnIndex];}));cov_23xx5xczy1().s[85]++;if(!relatedColumn){cov_23xx5xczy1().b[9][0]++;cov_23xx5xczy1().s[86]++;TomgUtils.LogError(`Relation between tables ${relationTmp.ownerTable.sqlName} and ${relationTmp.relatedTable.sqlName} didn't found entity column ${relationTmp.relatedTable.sqlName}.${relatedColumn}.`);cov_23xx5xczy1().s[87]++;return;}else{cov_23xx5xczy1().b[9][1]++;}cov_23xx5xczy1().s[88]++;ownerColumns.push(ownerColumn);cov_23xx5xczy1().s[89]++;relatedColumns.push(relatedColumn);}let isOneToMany;cov_23xx5xczy1().s[90]++;isOneToMany=false;const index=(cov_23xx5xczy1().s[91]++,ownerEntity.indices.find(ind=>{cov_23xx5xczy1().f[28]++;cov_23xx5xczy1().s[92]++;return(cov_23xx5xczy1().b[10][0]++,ind.options.unique)&&(cov_23xx5xczy1().b[10][1]++,ind.columns.length===ownerColumns.length)&&(cov_23xx5xczy1().b[10][2]++,ownerColumns.every(ownerColumn=>{cov_23xx5xczy1().f[29]++;cov_23xx5xczy1().s[93]++;return ind.columns.some(col=>{cov_23xx5xczy1().f[30]++;cov_23xx5xczy1().s[94]++;return col===ownerColumn.tscName;});}));}));cov_23xx5xczy1().s[95]++;isOneToMany=!index;cov_23xx5xczy1().s[96]++;ownerColumns.forEach(column=>{cov_23xx5xczy1().f[31]++;cov_23xx5xczy1().s[97]++;column.isUsedInRelationAsOwner=true;});cov_23xx5xczy1().s[98]++;relatedColumns.forEach(column=>{cov_23xx5xczy1().f[32]++;cov_23xx5xczy1().s[99]++;column.isUsedInRelationAsReferenced=true;});let fieldName=(cov_23xx5xczy1().s[100]++,"");cov_23xx5xczy1().s[101]++;if(ownerColumns.length===1){cov_23xx5xczy1().b[11][0]++;cov_23xx5xczy1().s[102]++;fieldName=TomgUtils.findNameForNewField(ownerColumns[0].tscName,ownerEntity);}else{cov_23xx5xczy1().b[11][1]++;cov_23xx5xczy1().s[103]++;fieldName=TomgUtils.findNameForNewField(relationTmp.relatedTable.tscName,ownerEntity);}const relationOptions=(cov_23xx5xczy1().s[104]++,{onDelete:relationTmp.onDelete,onUpdate:relationTmp.onUpdate});const ownerRelation=(cov_23xx5xczy1().s[105]++,{fieldName,relatedField:TomgUtils.findNameForNewField(relationTmp.ownerTable.tscName,relationTmp.relatedTable),joinColumnOptions:relationTmp.ownerColumns.map((v,idx)=>{cov_23xx5xczy1().f[33]++;const retVal=(cov_23xx5xczy1().s[106]++,{name:v,referencedColumnName:relationTmp.relatedColumns[idx]});cov_23xx5xczy1().s[107]++;return retVal;}),relatedTable:relationTmp.relatedTable.tscName,relationType:isOneToMany?(cov_23xx5xczy1().b[12][0]++,"ManyToOne"):(cov_23xx5xczy1().b[12][1]++,"OneToOne")});cov_23xx5xczy1().s[108]++;if(JSON.stringify(relationOptions)!=="{}"){cov_23xx5xczy1().b[13][0]++;cov_23xx5xczy1().s[109]++;ownerRelation.relationOptions=relationOptions;}else{cov_23xx5xczy1().b[13][1]++;}const relatedRelation=(cov_23xx5xczy1().s[110]++,{fieldName:ownerRelation.relatedField,relatedField:ownerRelation.fieldName,relatedTable:relationTmp.ownerTable.tscName,relationType:isOneToMany?(cov_23xx5xczy1().b[14][0]++,"OneToMany"):(cov_23xx5xczy1().b[14][1]++,"OneToOne")});cov_23xx5xczy1().s[111]++;ownerEntity.relations.push(ownerRelation);cov_23xx5xczy1().s[112]++;relationTmp.relatedTable.relations.push(relatedRelation);cov_23xx5xczy1().s[113]++;if((cov_23xx5xczy1().b[16][0]++,generationOptions.relationIds)&&(cov_23xx5xczy1().b[16][1]++,ownerColumns.length===1)){cov_23xx5xczy1().b[15][0]++;let relationIdFieldName=(cov_23xx5xczy1().s[114]++,"");cov_23xx5xczy1().s[115]++;relationIdFieldName=TomgUtils.findNameForNewField(ownerColumns[0].tscName,ownerEntity);let fieldType=(cov_23xx5xczy1().s[116]++,"");cov_23xx5xczy1().s[117]++;if(isOneToMany){cov_23xx5xczy1().b[17][0]++;cov_23xx5xczy1().s[118]++;fieldType=`${ownerColumns[0].tscType}[]`;}else{cov_23xx5xczy1().b[17][1]++;cov_23xx5xczy1().s[119]++;fieldType=ownerColumns[0].tscType;cov_23xx5xczy1().s[120]++;if(ownerColumns[0].options.nullable){cov_23xx5xczy1().b[18][0]++;cov_23xx5xczy1().s[121]++;fieldType+=" | null";}else{cov_23xx5xczy1().b[18][1]++;}}cov_23xx5xczy1().s[122]++;ownerEntity.relationIds.push({fieldName:relationIdFieldName,fieldType,relationField:ownerRelation.fieldName});// TODO: RelationId on ManyToMany
}else{cov_23xx5xczy1().b[15][1]++;}});cov_23xx5xczy1().s[123]++;return entities;}static FindPrimaryColumnsFromIndexes(dbModel){cov_23xx5xczy1().f[34]++;cov_23xx5xczy1().s[124]++;dbModel.forEach(entity=>{cov_23xx5xczy1().f[35]++;const primaryIndex=(cov_23xx5xczy1().s[125]++,entity.indices.find(v=>{cov_23xx5xczy1().f[36]++;cov_23xx5xczy1().s[126]++;return v.primary;}));cov_23xx5xczy1().s[127]++;entity.columns.filter(col=>{cov_23xx5xczy1().f[37]++;cov_23xx5xczy1().s[128]++;return(cov_23xx5xczy1().b[19][0]++,primaryIndex)&&(cov_23xx5xczy1().b[19][1]++,primaryIndex.columns.some(cIndex=>{cov_23xx5xczy1().f[38]++;cov_23xx5xczy1().s[129]++;return cIndex===col.tscName;}));}).forEach(col=>{cov_23xx5xczy1().f[39]++;cov_23xx5xczy1().s[130]++;// eslint-disable-next-line no-param-reassign
col.primary=true;cov_23xx5xczy1().s[131]++;if((cov_23xx5xczy1().b[21][0]++,primaryIndex.columns.length===1)&&(cov_23xx5xczy1().b[21][1]++,col.options.unique)){cov_23xx5xczy1().b[20][0]++;cov_23xx5xczy1().s[132]++;delete col.options.unique;}else{cov_23xx5xczy1().b[20][1]++;}});cov_23xx5xczy1().s[133]++;if(!entity.columns.some(v=>{cov_23xx5xczy1().f[40]++;cov_23xx5xczy1().s[134]++;return!!v.primary;})){cov_23xx5xczy1().b[22][0]++;cov_23xx5xczy1().s[135]++;TomgUtils.LogError(`Table ${entity.tscName} has no PK.`,false);}else{cov_23xx5xczy1().b[22][1]++;}});}// TODO: change name
static escapeCommaSeparatedList(commaSeparatedList){cov_23xx5xczy1().f[41]++;cov_23xx5xczy1().s[136]++;return`'${commaSeparatedList.split(",").join("','")}'`;}}cov_23xx5xczy1().s[137]++;exports.default=AbstractDriver;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,