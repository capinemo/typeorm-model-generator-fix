"use strict";function cov_r30x9wae1(){var path="/home/nemo/work/github/typeorm-model-generator/src/drivers/OracleDriver.ts";var hash="4174251c8db7d2fba377a1f0072ea226a9fdec76";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/nemo/work/github/typeorm-model-generator/src/drivers/OracleDriver.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:22},end:{line:3,column:67}},"2":{start:{line:4,column:18},end:{line:4,column:37}},"3":{start:{line:5,column:25},end:{line:5,column:52}},"4":{start:{line:8,column:8},end:{line:8,column:16}},"5":{start:{line:9,column:8},end:{line:11,column:28}},"6":{start:{line:12,column:8},end:{line:12,column:33}},"7":{start:{line:13,column:8},end:{line:13,column:34}},"8":{start:{line:14,column:8},end:{line:14,column:33}},"9":{start:{line:15,column:8},end:{line:21,column:10}},"10":{start:{line:16,column:35},end:{line:18,column:20}},"11":{start:{line:19,column:29},end:{line:19,column:197}},"12":{start:{line:20,column:12},end:{line:20,column:28}},"13":{start:{line:22,column:8},end:{line:30,column:9}},"14":{start:{line:24,column:12},end:{line:24,column:46}},"15":{start:{line:25,column:12},end:{line:25,column:55}},"16":{start:{line:28,column:12},end:{line:28,column:49}},"17":{start:{line:29,column:12},end:{line:29,column:24}},"18":{start:{line:33,column:25},end:{line:36,column:44}},"19":{start:{line:37,column:8},end:{line:170,column:11}},"20":{start:{line:38,column:12},end:{line:169,column:15}},"21":{start:{line:39,column:39},end:{line:39,column:75}},"22":{start:{line:41,column:32},end:{line:41,column:48}},"23":{start:{line:42,column:32},end:{line:44,column:17}},"24":{start:{line:45,column:16},end:{line:46,column:44}},"25":{start:{line:46,column:20},end:{line:46,column:44}},"26":{start:{line:47,column:16},end:{line:48,column:42}},"27":{start:{line:48,column:20},end:{line:48,column:42}},"28":{start:{line:49,column:34},end:{line:49,column:83}},"29":{start:{line:50,column:37},end:{line:52,column:80}},"30":{start:{line:53,column:34},end:{line:53,column:75}},"31":{start:{line:54,column:35},end:{line:54,column:58}},"32":{start:{line:55,column:30},end:{line:55,column:32}},"33":{start:{line:56,column:16},end:{line:148,column:17}},"34":{start:{line:58,column:24},end:{line:58,column:43}},"35":{start:{line:59,column:24},end:{line:59,column:30}},"36":{start:{line:61,column:24},end:{line:61,column:43}},"37":{start:{line:62,column:24},end:{line:62,column:30}},"38":{start:{line:64,column:24},end:{line:64,column:43}},"39":{start:{line:65,column:24},end:{line:65,column:30}},"40":{start:{line:67,column:24},end:{line:67,column:43}},"41":{start:{line:68,column:24},end:{line:68,column:30}},"42":{start:{line:70,column:24},end:{line:70,column:43}},"43":{start:{line:71,column:24},end:{line:71,column:30}},"44":{start:{line:73,column:24},end:{line:73,column:43}},"45":{start:{line:74,column:24},end:{line:74,column:30}},"46":{start:{line:76,column:24},end:{line:76,column:43}},"47":{start:{line:77,column:24},end:{line:77,column:30}},"48":{start:{line:79,column:24},end:{line:79,column:43}},"49":{start:{line:80,column:24},end:{line:80,column:30}},"50":{start:{line:82,column:24},end:{line:82,column:43}},"51":{start:{line:83,column:24},end:{line:83,column:30}},"52":{start:{line:85,column:24},end:{line:85,column:43}},"53":{start:{line:86,column:24},end:{line:86,column:30}},"54":{start:{line:88,column:24},end:{line:88,column:43}},"55":{start:{line:89,column:24},end:{line:89,column:30}},"56":{start:{line:91,column:24},end:{line:91,column:43}},"57":{start:{line:92,column:24},end:{line:92,column:30}},"58":{start:{line:94,column:24},end:{line:94,column:43}},"59":{start:{line:95,column:24},end:{line:95,column:30}},"60":{start:{line:97,column:24},end:{line:97,column:43}},"61":{start:{line:98,column:24},end:{line:98,column:30}},"62":{start:{line:100,column:24},end:{line:100,column:43}},"63":{start:{line:101,column:24},end:{line:101,column:30}},"64":{start:{line:103,column:24},end:{line:103,column:43}},"65":{start:{line:104,column:24},end:{line:104,column:30}},"66":{start:{line:106,column:24},end:{line:106,column:43}},"67":{start:{line:107,column:24},end:{line:107,column:30}},"68":{start:{line:109,column:24},end:{line:109,column:41}},"69":{start:{line:110,column:24},end:{line:110,column:30}},"70":{start:{line:112,column:24},end:{line:112,column:41}},"71":{start:{line:113,column:24},end:{line:113,column:30}},"72":{start:{line:115,column:24},end:{line:115,column:41}},"73":{start:{line:116,column:24},end:{line:116,column:30}},"74":{start:{line:118,column:24},end:{line:118,column:41}},"75":{start:{line:119,column:24},end:{line:119,column:30}},"76":{start:{line:121,column:24},end:{line:121,column:43}},"77":{start:{line:122,column:24},end:{line:122,column:30}},"78":{start:{line:124,column:24},end:{line:124,column:43}},"79":{start:{line:125,column:24},end:{line:125,column:30}},"80":{start:{line:127,column:24},end:{line:127,column:43}},"81":{start:{line:128,column:24},end:{line:128,column:30}},"82":{start:{line:130,column:24},end:{line:130,column:43}},"83":{start:{line:131,column:24},end:{line:131,column:30}},"84":{start:{line:133,column:24},end:{line:133,column:43}},"85":{start:{line:134,column:24},end:{line:134,column:30}},"86":{start:{line:136,column:24},end:{line:136,column:43}},"87":{start:{line:137,column:24},end:{line:137,column:30}},"88":{start:{line:139,column:24},end:{line:139,column:43}},"89":{start:{line:140,column:24},end:{line:140,column:30}},"90":{start:{line:142,column:24},end:{line:142,column:43}},"91":{start:{line:143,column:24},end:{line:143,column:30}},"92":{start:{line:145,column:24},end:{line:145,column:57}},"93":{start:{line:146,column:24},end:{line:146,column:79}},"94":{start:{line:147,column:24},end:{line:147,column:30}},"95":{start:{line:149,column:16},end:{line:156,column:17}},"96":{start:{line:149,column:62},end:{line:149,column:78}},"97":{start:{line:150,column:20},end:{line:152,column:21}},"98":{start:{line:151,column:24},end:{line:151,column:64}},"99":{start:{line:153,column:20},end:{line:155,column:21}},"100":{start:{line:154,column:24},end:{line:154,column:56}},"101":{start:{line:157,column:16},end:{line:160,column:17}},"102":{start:{line:157,column:59},end:{line:157,column:75}},"103":{start:{line:158,column:20},end:{line:159,column:76}},"104":{start:{line:161,column:16},end:{line:168,column:19}},"105":{start:{line:171,column:8},end:{line:171,column:24}},"106":{start:{line:174,column:25},end:{line:178,column:68}},"107":{start:{line:179,column:8},end:{line:198,column:11}},"108":{start:{line:180,column:34},end:{line:180,column:102}},"109":{start:{line:180,column:65},end:{line:180,column:101}},"110":{start:{line:181,column:31},end:{line:181,column:78}},"111":{start:{line:181,column:64},end:{line:181,column:76}},"112":{start:{line:182,column:12},end:{line:197,column:15}},"113":{start:{line:183,column:32},end:{line:183,column:87}},"114":{start:{line:183,column:60},end:{line:183,column:86}},"115":{start:{line:184,column:34},end:{line:188,column:17}},"116":{start:{line:189,column:16},end:{line:190,column:45}},"117":{start:{line:190,column:20},end:{line:190,column:45}},"118":{start:{line:191,column:16},end:{line:192,column:52}},"119":{start:{line:192,column:20},end:{line:192,column:52}},"120":{start:{line:193,column:16},end:{line:195,column:19}},"121":{start:{line:194,column:20},end:{line:194,column:63}},"122":{start:{line:196,column:16},end:{line:196,column:44}},"123":{start:{line:199,column:8},end:{line:199,column:24}},"124":{start:{line:202,column:25},end:{line:210,column:92}},"125":{start:{line:211,column:30},end:{line:211,column:32}},"126":{start:{line:212,column:29},end:{line:212,column:76}},"127":{start:{line:212,column:57},end:{line:212,column:74}},"128":{start:{line:213,column:8},end:{line:235,column:11}},"129":{start:{line:214,column:25},end:{line:214,column:81}},"130":{start:{line:214,column:48},end:{line:214,column:80}},"131":{start:{line:215,column:31},end:{line:215,column:91}},"132":{start:{line:215,column:52},end:{line:215,column:90}},"133":{start:{line:216,column:33},end:{line:216,column:93}},"134":{start:{line:216,column:54},end:{line:216,column:92}},"135":{start:{line:217,column:12},end:{line:220,column:13}},"136":{start:{line:218,column:16},end:{line:218,column:158}},"137":{start:{line:219,column:16},end:{line:219,column:23}},"138":{start:{line:221,column:29},end:{line:226,column:13}},"139":{start:{line:227,column:12},end:{line:229,column:13}},"140":{start:{line:228,column:16},end:{line:228,column:56}},"141":{start:{line:230,column:12},end:{line:233,column:15}},"142":{start:{line:231,column:16},end:{line:231,column:66}},"143":{start:{line:232,column:16},end:{line:232,column:68}},"144":{start:{line:234,column:12},end:{line:234,column:41}},"145":{start:{line:236,column:23},end:{line:236,column:112}},"146":{start:{line:237,column:8},end:{line:237,column:22}},"147":{start:{line:240,column:8},end:{line:242,column:9}},"148":{start:{line:241,column:12},end:{line:241,column:42}},"149":{start:{line:246,column:8},end:{line:262,column:9}},"150":{start:{line:247,column:12},end:{line:253,column:14}},"151":{start:{line:256,column:12},end:{line:261,column:14}},"152":{start:{line:263,column:24},end:{line:274,column:10}},"153":{start:{line:264,column:12},end:{line:273,column:15}},"154":{start:{line:265,column:16},end:{line:272,column:17}},"155":{start:{line:266,column:20},end:{line:266,column:49}},"156":{start:{line:267,column:20},end:{line:267,column:34}},"157":{start:{line:270,column:20},end:{line:270,column:97}},"158":{start:{line:271,column:20},end:{line:271,column:32}},"159":{start:{line:275,column:8},end:{line:275,column:22}},"160":{start:{line:278,column:8},end:{line:278,column:116}},"161":{start:{line:279,column:8},end:{line:279,column:68}},"162":{start:{line:286,column:8},end:{line:286,column:69}},"163":{start:{line:289,column:25},end:{line:289,column:136}},"164":{start:{line:290,column:8},end:{line:290,column:45}},"165":{start:{line:293,column:25},end:{line:293,column:86}},"166":{start:{line:294,column:8},end:{line:296,column:9}},"167":{start:{line:295,column:12},end:{line:295,column:29}},"168":{start:{line:297,column:8},end:{line:299,column:9}},"169":{start:{line:298,column:12},end:{line:298,column:49}},"170":{start:{line:300,column:8},end:{line:300,column:39}},"171":{start:{line:303,column:0},end:{line:303,column:31}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:4},end:{line:7,column:5}},loc:{start:{line:7,column:18},end:{line:31,column:5}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:33},end:{line:15,column:34}},loc:{start:{line:15,column:72},end:{line:21,column:9}},line:15},"2":{name:"(anonymous_2)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:41},end:{line:172,column:5}},line:32},"3":{name:"(anonymous_3)",decl:{start:{line:37,column:25},end:{line:37,column:26}},loc:{start:{line:37,column:34},end:{line:170,column:9}},line:37},"4":{name:"(anonymous_4)",decl:{start:{line:39,column:24},end:{line:39,column:25}},loc:{start:{line:39,column:39},end:{line:39,column:75}},line:39},"5":{name:"(anonymous_5)",decl:{start:{line:40,column:25},end:{line:40,column:26}},loc:{start:{line:40,column:35},end:{line:169,column:13}},line:40},"6":{name:"(anonymous_6)",decl:{start:{line:149,column:55},end:{line:149,column:56}},loc:{start:{line:149,column:62},end:{line:149,column:78}},line:149},"7":{name:"(anonymous_7)",decl:{start:{line:157,column:52},end:{line:157,column:53}},loc:{start:{line:157,column:59},end:{line:157,column:75}},line:157},"8":{name:"(anonymous_8)",decl:{start:{line:173,column:4},end:{line:173,column:5}},loc:{start:{line:173,column:41},end:{line:200,column:5}},line:173},"9":{name:"(anonymous_9)",decl:{start:{line:179,column:25},end:{line:179,column:26}},loc:{start:{line:179,column:34},end:{line:198,column:9}},line:179},"10":{name:"(anonymous_10)",decl:{start:{line:180,column:50},end:{line:180,column:51}},loc:{start:{line:180,column:65},end:{line:180,column:101}},line:180},"11":{name:"(anonymous_11)",decl:{start:{line:181,column:57},end:{line:181,column:58}},loc:{start:{line:181,column:64},end:{line:181,column:76}},line:181},"12":{name:"(anonymous_12)",decl:{start:{line:182,column:31},end:{line:182,column:32}},loc:{start:{line:182,column:46},end:{line:197,column:13}},line:182},"13":{name:"(anonymous_13)",decl:{start:{line:183,column:53},end:{line:183,column:54}},loc:{start:{line:183,column:60},end:{line:183,column:86}},line:183},"14":{name:"(anonymous_14)",decl:{start:{line:193,column:32},end:{line:193,column:33}},loc:{start:{line:193,column:44},end:{line:195,column:17}},line:193},"15":{name:"(anonymous_15)",decl:{start:{line:201,column:4},end:{line:201,column:5}},loc:{start:{line:201,column:69},end:{line:238,column:5}},line:201},"16":{name:"(anonymous_16)",decl:{start:{line:212,column:50},end:{line:212,column:51}},loc:{start:{line:212,column:57},end:{line:212,column:74}},line:212},"17":{name:"(anonymous_17)",decl:{start:{line:213,column:29},end:{line:213,column:30}},loc:{start:{line:213,column:45},end:{line:235,column:9}},line:213},"18":{name:"(anonymous_18)",decl:{start:{line:214,column:41},end:{line:214,column:42}},loc:{start:{line:214,column:48},end:{line:214,column:80}},line:214},"19":{name:"(anonymous_19)",decl:{start:{line:215,column:45},end:{line:215,column:46}},loc:{start:{line:215,column:52},end:{line:215,column:90}},line:215},"20":{name:"(anonymous_20)",decl:{start:{line:216,column:47},end:{line:216,column:48}},loc:{start:{line:216,column:54},end:{line:216,column:92}},line:216},"21":{name:"(anonymous_21)",decl:{start:{line:230,column:25},end:{line:230,column:26}},loc:{start:{line:230,column:34},end:{line:233,column:13}},line:230},"22":{name:"(anonymous_22)",decl:{start:{line:239,column:4},end:{line:239,column:5}},loc:{start:{line:239,column:33},end:{line:243,column:5}},line:239},"23":{name:"(anonymous_23)",decl:{start:{line:244,column:4},end:{line:244,column:5}},loc:{start:{line:244,column:45},end:{line:276,column:5}},line:244},"24":{name:"(anonymous_24)",decl:{start:{line:263,column:36},end:{line:263,column:37}},loc:{start:{line:263,column:57},end:{line:274,column:9}},line:263},"25":{name:"(anonymous_25)",decl:{start:{line:264,column:46},end:{line:264,column:47}},loc:{start:{line:264,column:67},end:{line:273,column:13}},line:264},"26":{name:"(anonymous_26)",decl:{start:{line:277,column:4},end:{line:277,column:5}},loc:{start:{line:277,column:27},end:{line:280,column:5}},line:277},"27":{name:"(anonymous_27)",decl:{start:{line:282,column:4},end:{line:282,column:5}},loc:{start:{line:282,column:18},end:{line:284,column:5}},line:282},"28":{name:"(anonymous_28)",decl:{start:{line:285,column:4},end:{line:285,column:5}},loc:{start:{line:285,column:25},end:{line:287,column:5}},line:285},"29":{name:"(anonymous_29)",decl:{start:{line:288,column:4},end:{line:288,column:5}},loc:{start:{line:288,column:34},end:{line:291,column:5}},line:288},"30":{name:"(anonymous_30)",decl:{start:{line:292,column:4},end:{line:292,column:5}},loc:{start:{line:292,column:46},end:{line:301,column:5}},line:292}},branchMap:{"0":{loc:{start:{line:16,column:35},end:{line:18,column:20}},type:"cond-expr",locations:[{start:{line:17,column:18},end:{line:17,column:72}},{start:{line:18,column:18},end:{line:18,column:20}}],line:16},"1":{loc:{start:{line:45,column:16},end:{line:46,column:44}},type:"if",locations:[{start:{line:45,column:16},end:{line:46,column:44}},{start:{line:45,column:16},end:{line:46,column:44}}],line:45},"2":{loc:{start:{line:47,column:16},end:{line:48,column:42}},type:"if",locations:[{start:{line:47,column:16},end:{line:48,column:42}},{start:{line:47,column:16},end:{line:48,column:42}}],line:47},"3":{loc:{start:{line:49,column:34},end:{line:49,column:83}},type:"cond-expr",locations:[{start:{line:49,column:67},end:{line:49,column:71}},{start:{line:49,column:74},end:{line:49,column:83}}],line:49},"4":{loc:{start:{line:50,column:37},end:{line:52,column:80}},type:"cond-expr",locations:[{start:{line:51,column:22},end:{line:51,column:31}},{start:{line:52,column:22},end:{line:52,column:80}}],line:50},"5":{loc:{start:{line:50,column:37},end:{line:50,column:90}},type:"binary-expr",locations:[{start:{line:50,column:37},end:{line:50,column:55}},{start:{line:50,column:59},end:{line:50,column:90}}],line:50},"6":{loc:{start:{line:56,column:16},end:{line:148,column:17}},type:"switch",locations:[{start:{line:57,column:20},end:{line:59,column:30}},{start:{line:60,column:20},end:{line:62,column:30}},{start:{line:63,column:20},end:{line:65,column:30}},{start:{line:66,column:20},end:{line:68,column:30}},{start:{line:69,column:20},end:{line:71,column:30}},{start:{line:72,column:20},end:{line:74,column:30}},{start:{line:75,column:20},end:{line:77,column:30}},{start:{line:78,column:20},end:{line:80,column:30}},{start:{line:81,column:20},end:{line:83,column:30}},{start:{line:84,column:20},end:{line:86,column:30}},{start:{line:87,column:20},end:{line:89,column:30}},{start:{line:90,column:20},end:{line:92,column:30}},{start:{line:93,column:20},end:{line:95,column:30}},{start:{line:96,column:20},end:{line:98,column:30}},{start:{line:99,column:20},end:{line:101,column:30}},{start:{line:102,column:20},end:{line:104,column:30}},{start:{line:105,column:20},end:{line:107,column:30}},{start:{line:108,column:20},end:{line:110,column:30}},{start:{line:111,column:20},end:{line:113,column:30}},{start:{line:114,column:20},end:{line:116,column:30}},{start:{line:117,column:20},end:{line:119,column:30}},{start:{line:120,column:20},end:{line:122,column:30}},{start:{line:123,column:20},end:{line:125,column:30}},{start:{line:126,column:20},end:{line:128,column:30}},{start:{line:129,column:20},end:{line:131,column:30}},{start:{line:132,column:20},end:{line:134,column:30}},{start:{line:135,column:20},end:{line:137,column:30}},{start:{line:138,column:20},end:{line:140,column:30}},{start:{line:141,column:20},end:{line:143,column:30}},{start:{line:144,column:20},end:{line:147,column:30}}],line:56},"7":{loc:{start:{line:149,column:16},end:{line:156,column:17}},type:"if",locations:[{start:{line:149,column:16},end:{line:156,column:17}},{start:{line:149,column:16},end:{line:156,column:17}}],line:149},"8":{loc:{start:{line:150,column:20},end:{line:152,column:21}},type:"if",locations:[{start:{line:150,column:20},end:{line:152,column:21}},{start:{line:150,column:20},end:{line:152,column:21}}],line:150},"9":{loc:{start:{line:153,column:20},end:{line:155,column:21}},type:"if",locations:[{start:{line:153,column:20},end:{line:155,column:21}},{start:{line:153,column:20},end:{line:155,column:21}}],line:153},"10":{loc:{start:{line:157,column:16},end:{line:160,column:17}},type:"if",locations:[{start:{line:157,column:16},end:{line:160,column:17}},{start:{line:157,column:16},end:{line:160,column:17}}],line:157},"11":{loc:{start:{line:159,column:24},end:{line:159,column:75}},type:"cond-expr",locations:[{start:{line:159,column:47},end:{line:159,column:63}},{start:{line:159,column:66},end:{line:159,column:75}}],line:159},"12":{loc:{start:{line:189,column:16},end:{line:190,column:45}},type:"if",locations:[{start:{line:189,column:16},end:{line:190,column:45}},{start:{line:189,column:16},end:{line:190,column:45}}],line:189},"13":{loc:{start:{line:191,column:16},end:{line:192,column:52}},type:"if",locations:[{start:{line:191,column:16},end:{line:192,column:52}},{start:{line:191,column:16},end:{line:192,column:52}}],line:191},"14":{loc:{start:{line:217,column:12},end:{line:220,column:13}},type:"if",locations:[{start:{line:217,column:12},end:{line:220,column:13}},{start:{line:217,column:12},end:{line:220,column:13}}],line:217},"15":{loc:{start:{line:217,column:16},end:{line:217,column:44}},type:"binary-expr",locations:[{start:{line:217,column:16},end:{line:217,column:27}},{start:{line:217,column:31},end:{line:217,column:44}}],line:217},"16":{loc:{start:{line:227,column:12},end:{line:229,column:13}},type:"if",locations:[{start:{line:227,column:12},end:{line:229,column:13}},{start:{line:227,column:12},end:{line:229,column:13}}],line:227},"17":{loc:{start:{line:240,column:8},end:{line:242,column:9}},type:"if",locations:[{start:{line:240,column:8},end:{line:242,column:9}},{start:{line:240,column:8},end:{line:242,column:9}}],line:240},"18":{loc:{start:{line:246,column:8},end:{line:262,column:9}},type:"if",locations:[{start:{line:246,column:8},end:{line:262,column:9}},{start:{line:246,column:8},end:{line:262,column:9}}],line:246},"19":{loc:{start:{line:265,column:16},end:{line:272,column:17}},type:"if",locations:[{start:{line:265,column:16},end:{line:272,column:17}},{start:{line:265,column:16},end:{line:272,column:17}}],line:265},"20":{loc:{start:{line:290,column:15},end:{line:290,column:44}},type:"binary-expr",locations:[{start:{line:290,column:15},end:{line:290,column:29}},{start:{line:290,column:33},end:{line:290,column:44}}],line:290},"21":{loc:{start:{line:293,column:25},end:{line:293,column:86}},type:"cond-expr",locations:[{start:{line:293,column:64},end:{line:293,column:70}},{start:{line:293,column:73},end:{line:293,column:86}}],line:293},"22":{loc:{start:{line:293,column:25},end:{line:293,column:61}},type:"binary-expr",locations:[{start:{line:293,column:25},end:{line:293,column:40}},{start:{line:293,column:44},end:{line:293,column:61}}],line:293},"23":{loc:{start:{line:294,column:8},end:{line:296,column:9}},type:"if",locations:[{start:{line:294,column:8},end:{line:296,column:9}},{start:{line:294,column:8},end:{line:296,column:9}}],line:294},"24":{loc:{start:{line:297,column:8},end:{line:299,column:9}},type:"if",locations:[{start:{line:297,column:8},end:{line:299,column:9}},{start:{line:297,column:8},end:{line:299,column:9}}],line:297}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},inputSourceMap:{version:3,file:"/home/nemo/work/github/typeorm-model-generator/src/drivers/OracleDriver.ts",sources:["/home/nemo/work/github/typeorm-model-generator/src/drivers/OracleDriver.ts"],names:[],mappings:"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",sourcesContent:["// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved\nimport type * as Oracle from \"oracledb\";\nimport * as TypeormDriver from \"typeorm/driver/oracle/OracleDriver\";\nimport { DataTypeDefaults } from \"typeorm/driver/types/DataTypeDefaults\";\nimport * as TomgUtils from \"../Utils\";\nimport AbstractDriver from \"./AbstractDriver\";\nimport IConnectionOptions from \"../IConnectionOptions\";\nimport { Entity } from \"../models/Entity\";\nimport { Column } from \"../models/Column\";\nimport { Index } from \"../models/Index\";\nimport IGenerationOptions from \"../IGenerationOptions\";\nimport { RelationInternal } from \"../models/RelationInternal\";\n\nexport default class OracleDriver extends AbstractDriver {\n    public defaultValues: DataTypeDefaults = new TypeormDriver.OracleDriver({\n        options: undefined,\n    } as any).dataTypeDefaults;\n\n    public readonly standardPort = 1521;\n\n    public readonly standardUser = \"SYS\";\n\n    public readonly standardSchema = \"\";\n\n    private Oracle: typeof Oracle;\n\n    private Connection: Oracle.Connection;\n\n    public constructor() {\n        super();\n        try {\n            // eslint-disable-next-line import/no-extraneous-dependencies, global-require, import/no-unresolved\n            this.Oracle = require(\"oracledb\");\n            this.Oracle.outFormat = (this.Oracle as any).OBJECT;\n        } catch (error) {\n            TomgUtils.LogError(\"\", false, error);\n            throw error;\n        }\n    }\n\n    public GetAllTablesQuery = async (\n        schema: string,\n        dbNames: string,\n        tableNames: string[]\n    ) => {\n        const tableCondition =\n            tableNames.length > 0\n                ? ` AND NOT TABLE_NAME IN ('${tableNames.join(\"','\")}')`\n                : \"\";\n        const response = (\n            await this.Connection.execute<{\n                TABLE_SCHEMA: string;\n                TABLE_NAME: string;\n                DB_NAME: string;\n            }>(\n                `SELECT NULL AS TABLE_SCHEMA, TABLE_NAME, NULL AS DB_NAME FROM all_tables WHERE owner = (select user from dual) ${tableCondition}`\n            )\n        ).rows!;\n        return response;\n    };\n\n    public async GetCoulmnsFromEntity(entities: Entity[]): Promise<Entity[]> {\n        const response = (\n            await this.Connection.execute<{\n                TABLE_NAME: string;\n                COLUMN_NAME: string;\n                DATA_DEFAULT: string;\n                NULLABLE: string;\n                DATA_TYPE: string;\n                DATA_LENGTH: number;\n                DATA_PRECISION: number;\n                DATA_SCALE: number;\n                IDENTITY_COLUMN: string; // doesn't exist in old oracle versions (#195)\n                IS_UNIQUE: number;\n            }>(`SELECT utc.*, (select count(*) from USER_CONS_COLUMNS ucc\n             JOIN USER_CONSTRAINTS uc ON  uc.CONSTRAINT_NAME = ucc.CONSTRAINT_NAME and uc.CONSTRAINT_TYPE='U'\n            where ucc.column_name = utc.COLUMN_NAME AND ucc.table_name = utc.TABLE_NAME) IS_UNIQUE\n           FROM USER_TAB_COLUMNS utc`)\n        ).rows!;\n\n        entities.forEach((ent) => {\n            response\n                .filter((filterVal) => filterVal.TABLE_NAME === ent.tscName)\n                .forEach((resp) => {\n                    const tscName = resp.COLUMN_NAME;\n                    const options: Column[\"options\"] = {\n                        name: resp.COLUMN_NAME,\n                    };\n                    if (resp.NULLABLE === \"Y\") options.nullable = true;\n                    if (resp.IS_UNIQUE > 0) options.unique = true;\n                    const generated =\n                        resp.IDENTITY_COLUMN === \"YES\" ? true : undefined;\n                    const defaultValue =\n                        !resp.DATA_DEFAULT || resp.DATA_DEFAULT.includes('\"')\n                            ? undefined\n                            : OracleDriver.ReturnDefaultValueFunction(\n                                  resp.DATA_DEFAULT\n                              );\n                    const DATA_TYPE = resp.DATA_TYPE.replace(/\\([0-9]+\\)/g, \"\");\n                    const columnType = DATA_TYPE.toLowerCase();\n                    let tscType = \"\";\n                    switch (DATA_TYPE.toLowerCase()) {\n                        case \"char\":\n                            tscType = \"string\";\n                            break;\n                        case \"nchar\":\n                            tscType = \"string\";\n                            break;\n                        case \"nvarchar2\":\n                            tscType = \"string\";\n                            break;\n                        case \"varchar2\":\n                            tscType = \"string\";\n                            break;\n                        case \"long\":\n                            tscType = \"string\";\n                            break;\n                        case \"raw\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"long raw\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"number\":\n                            tscType = \"number\";\n                            break;\n                        case \"numeric\":\n                            tscType = \"number\";\n                            break;\n                        case \"float\":\n                            tscType = \"number\";\n                            break;\n                        case \"dec\":\n                            tscType = \"number\";\n                            break;\n                        case \"decimal\":\n                            tscType = \"number\";\n                            break;\n                        case \"integer\":\n                            tscType = \"number\";\n                            break;\n                        case \"int\":\n                            tscType = \"number\";\n                            break;\n                        case \"smallint\":\n                            tscType = \"number\";\n                            break;\n                        case \"real\":\n                            tscType = \"number\";\n                            break;\n                        case \"double precision\":\n                            tscType = \"number\";\n                            break;\n                        case \"date\":\n                            tscType = \"Date\";\n                            break;\n                        case \"timestamp\":\n                            tscType = \"Date\";\n                            break;\n                        case \"timestamp with time zone\":\n                            tscType = \"Date\";\n                            break;\n                        case \"timestamp with local time zone\":\n                            tscType = \"Date\";\n                            break;\n                        case \"interval year to month\":\n                            tscType = \"string\";\n                            break;\n                        case \"interval day to second\":\n                            tscType = \"string\";\n                            break;\n                        case \"bfile\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"blob\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"clob\":\n                            tscType = \"string\";\n                            break;\n                        case \"nclob\":\n                            tscType = \"string\";\n                            break;\n                        case \"rowid\":\n                            tscType = \"number\";\n                            break;\n                        case \"urowid\":\n                            tscType = \"number\";\n                            break;\n                        default:\n                            tscType = \"NonNullable<unknown>\";\n                            TomgUtils.LogError(\n                                `Unknown column type:${DATA_TYPE}`\n                            );\n                            break;\n                    }\n                    if (\n                        this.ColumnTypesWithPrecision.some(\n                            (v) => v === columnType\n                        )\n                    ) {\n                        if (resp.DATA_PRECISION !== null) {\n                            options.precision = resp.DATA_PRECISION;\n                        }\n                        if (resp.DATA_SCALE !== null) {\n                            options.scale = resp.DATA_SCALE;\n                        }\n                    }\n                    if (\n                        this.ColumnTypesWithLength.some((v) => v === columnType)\n                    ) {\n                        options.length =\n                            resp.DATA_LENGTH > 0 ? resp.DATA_LENGTH : undefined;\n                    }\n\n                    ent.columns.push({\n                        generated,\n                        type: columnType,\n                        default: defaultValue,\n                        options,\n                        tscName,\n                        tscType,\n                    });\n                });\n        });\n        return entities;\n    }\n\n    public async GetIndexesFromEntity(entities: Entity[]): Promise<Entity[]> {\n        const response = (\n            await this.Connection.execute<{\n                COLUMN_NAME: string;\n                TABLE_NAME: string;\n                INDEX_NAME: string;\n                UNIQUENESS: string;\n                ISPRIMARYKEY: number;\n            }>(`SELECT ind.TABLE_NAME, ind.INDEX_NAME, col.COLUMN_NAME,ind.UNIQUENESS, CASE WHEN uc.CONSTRAINT_NAME IS NULL THEN 0 ELSE 1 END ISPRIMARYKEY\n        FROM USER_INDEXES ind\n        JOIN USER_IND_COLUMNS col ON ind.INDEX_NAME=col.INDEX_NAME\n        LEFT JOIN USER_CONSTRAINTS uc ON  uc.INDEX_NAME = ind.INDEX_NAME\n        ORDER BY col.INDEX_NAME ASC ,col.COLUMN_POSITION ASC`)\n        ).rows!;\n\n        entities.forEach((ent) => {\n            const entityIndices = response.filter(\n                (filterVal) => filterVal.TABLE_NAME === ent.tscName\n            );\n            const indexNames = new Set(entityIndices.map((v) => v.INDEX_NAME));\n            indexNames.forEach((indexName) => {\n                const records = entityIndices.filter(\n                    (v) => v.INDEX_NAME === indexName\n                );\n                const indexInfo: Index = {\n                    columns: [],\n                    options: {},\n                    name: records[0].INDEX_NAME,\n                };\n                if (records[0].ISPRIMARYKEY === 1) indexInfo.primary = true;\n                if (records[0].UNIQUENESS === \"UNIQUE\")\n                    indexInfo.options.unique = true;\n                records.forEach((record) => {\n                    indexInfo.columns.push(record.COLUMN_NAME);\n                });\n                ent.indices.push(indexInfo);\n            });\n        });\n\n        return entities;\n    }\n\n    public async GetRelations(\n        entities: Entity[],\n        schema: string,\n        dbNames: string,\n        generationOptions: IGenerationOptions\n    ): Promise<Entity[]> {\n        const response = (\n            await this.Connection.execute<{\n                OWNER_TABLE_NAME: string;\n                OWNER_POSITION: string;\n                OWNER_COLUMN_NAME: string;\n                CHILD_TABLE_NAME: string;\n                CHILD_COLUMN_NAME: string;\n                DELETE_RULE: \"RESTRICT\" | \"CASCADE\" | \"SET NULL\" | \"NO ACTION\";\n                CONSTRAINT_NAME: string;\n            }>(`select owner.TABLE_NAME OWNER_TABLE_NAME,ownCol.POSITION OWNER_POSITION,ownCol.COLUMN_NAME OWNER_COLUMN_NAME,\n        child.TABLE_NAME CHILD_TABLE_NAME ,childCol.COLUMN_NAME CHILD_COLUMN_NAME,\n        owner.DELETE_RULE,\n        owner.CONSTRAINT_NAME\n        from user_constraints owner\n        join user_constraints child on owner.r_constraint_name=child.CONSTRAINT_NAME and child.constraint_type in ('P','U')\n        JOIN USER_CONS_COLUMNS ownCol ON owner.CONSTRAINT_NAME = ownCol.CONSTRAINT_NAME\n        JOIN USER_CONS_COLUMNS childCol ON child.CONSTRAINT_NAME = childCol.CONSTRAINT_NAME AND ownCol.POSITION=childCol.POSITION\n        ORDER BY OWNER_TABLE_NAME ASC, owner.CONSTRAINT_NAME ASC, OWNER_POSITION ASC`)\n        ).rows!;\n\n        const relationsTemp: RelationInternal[] = [] as RelationInternal[];\n        const relationKeys = new Set(response.map((v) => v.CONSTRAINT_NAME));\n\n        relationKeys.forEach((relationId) => {\n            const rows = response.filter(\n                (v) => v.CONSTRAINT_NAME === relationId\n            );\n            const ownerTable = entities.find(\n                (v) => v.sqlName === rows[0].OWNER_TABLE_NAME\n            );\n            const relatedTable = entities.find(\n                (v) => v.sqlName === rows[0].CHILD_TABLE_NAME\n            );\n\n            if (!ownerTable || !relatedTable) {\n                TomgUtils.LogError(\n                    `Relation between tables ${rows[0].OWNER_TABLE_NAME} and ${rows[0].CHILD_TABLE_NAME} wasn't found in entity model.`,\n                    true\n                );\n                return;\n            }\n            const internal: RelationInternal = {\n                ownerColumns: [],\n                relatedColumns: [],\n                ownerTable,\n                relatedTable,\n            };\n            if (rows[0].DELETE_RULE !== \"NO ACTION\") {\n                internal.onDelete = rows[0].DELETE_RULE;\n            }\n            rows.forEach((row) => {\n                internal.ownerColumns.push(row.OWNER_COLUMN_NAME);\n                internal.relatedColumns.push(row.CHILD_COLUMN_NAME);\n            });\n            relationsTemp.push(internal);\n        });\n\n        const retVal = OracleDriver.GetRelationsFromRelationTempInfo(\n            relationsTemp,\n            entities,\n            generationOptions\n        );\n        return retVal;\n    }\n\n    public async DisconnectFromServer() {\n        if (this.Connection) {\n            await this.Connection.close();\n        }\n    }\n\n    public async ConnectToServer(connectionOptions: IConnectionOptions) {\n        let config: Oracle.ConnectionAttributes;\n        if (connectionOptions.user === String(process.env.ORACLE_UsernameSys)) {\n            config = {\n                connectString: `${connectionOptions.host}:${connectionOptions.port}/${connectionOptions.databaseName}`,\n                externalAuth: connectionOptions.ssl,\n                password: connectionOptions.password,\n                privilege: this.Oracle.SYSDBA,\n                user: connectionOptions.user,\n            };\n        } else {\n            config = {\n                connectString: `${connectionOptions.host}:${connectionOptions.port}/${connectionOptions.databaseName}`,\n                externalAuth: connectionOptions.ssl,\n                password: connectionOptions.password,\n                user: connectionOptions.user,\n            };\n        }\n        const promise = new Promise<boolean>((resolve, reject) => {\n            this.Oracle.getConnection(config, (err, connection) => {\n                if (!err) {\n                    this.Connection = connection;\n                    resolve(true);\n                } else {\n                    TomgUtils.LogError(\n                        \"Error connecting to Oracle Server.\",\n                        false,\n                        err.message\n                    );\n                    reject(err);\n                }\n            });\n        });\n\n        await promise;\n    }\n\n    public async CreateDB(dbName: string) {\n        await this.Connection.execute(\n            `CREATE USER ${dbName} IDENTIFIED BY ${String(\n                process.env.ORACLE_Password\n            )}`\n        );\n        await this.Connection.execute(`GRANT CONNECT TO ${dbName}`);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    public async UseDB() {\n        // not supported\n    }\n\n    public async DropDB(dbName: string) {\n        await this.Connection.execute(`DROP USER ${dbName} CASCADE`);\n    }\n\n    public async CheckIfDBExists(dbName: string): Promise<boolean> {\n        const { rows } = await this.Connection.execute<any>(\n            `select count(*) as CNT from dba_users where username='${dbName.toUpperCase()}'`\n        );\n        return rows![0][0] > 0 || rows![0].CNT;\n    }\n\n    private static ReturnDefaultValueFunction(\n        defVal: string | null\n    ): string | undefined {\n        let defaultVal = defVal?.trim();\n        if (!defaultVal) {\n            return undefined;\n        }\n        if (defaultVal.endsWith(\" \")) {\n            defaultVal = defaultVal.slice(0, -1);\n        }\n\n        return `() => \"${defaultVal}\"`;\n    }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"4174251c8db7d2fba377a1f0072ea226a9fdec76"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_r30x9wae1=function(){return actualCoverage;};return actualCoverage;}cov_r30x9wae1();cov_r30x9wae1().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const TypeormDriver=(cov_r30x9wae1().s[1]++,require("typeorm/driver/oracle/OracleDriver"));const TomgUtils=(cov_r30x9wae1().s[2]++,require("../Utils"));const AbstractDriver_1=(cov_r30x9wae1().s[3]++,require("./AbstractDriver"));class OracleDriver extends(AbstractDriver_1.default){constructor(){cov_r30x9wae1().f[0]++;cov_r30x9wae1().s[4]++;super();cov_r30x9wae1().s[5]++;this.defaultValues=new TypeormDriver.OracleDriver({options:undefined}).dataTypeDefaults;cov_r30x9wae1().s[6]++;this.standardPort=1521;cov_r30x9wae1().s[7]++;this.standardUser="SYS";cov_r30x9wae1().s[8]++;this.standardSchema="";cov_r30x9wae1().s[9]++;this.GetAllTablesQuery=async(schema,dbNames,tableNames)=>{cov_r30x9wae1().f[1]++;const tableCondition=(cov_r30x9wae1().s[10]++,tableNames.length>0?(cov_r30x9wae1().b[0][0]++,` AND NOT TABLE_NAME IN ('${tableNames.join("','")}')`):(cov_r30x9wae1().b[0][1]++,""));const response=(cov_r30x9wae1().s[11]++,(await this.Connection.execute(`SELECT NULL AS TABLE_SCHEMA, TABLE_NAME, NULL AS DB_NAME FROM all_tables WHERE owner = (select user from dual) ${tableCondition}`)).rows);cov_r30x9wae1().s[12]++;return response;};cov_r30x9wae1().s[13]++;try{cov_r30x9wae1().s[14]++;// eslint-disable-next-line import/no-extraneous-dependencies, global-require, import/no-unresolved
this.Oracle=require("oracledb");cov_r30x9wae1().s[15]++;this.Oracle.outFormat=this.Oracle.OBJECT;}catch(error){cov_r30x9wae1().s[16]++;TomgUtils.LogError("",false,error);cov_r30x9wae1().s[17]++;throw error;}}async GetCoulmnsFromEntity(entities){cov_r30x9wae1().f[2]++;const response=(cov_r30x9wae1().s[18]++,(await this.Connection.execute(`SELECT utc.*, (select count(*) from USER_CONS_COLUMNS ucc
             JOIN USER_CONSTRAINTS uc ON  uc.CONSTRAINT_NAME = ucc.CONSTRAINT_NAME and uc.CONSTRAINT_TYPE='U'
            where ucc.column_name = utc.COLUMN_NAME AND ucc.table_name = utc.TABLE_NAME) IS_UNIQUE
           FROM USER_TAB_COLUMNS utc`)).rows);cov_r30x9wae1().s[19]++;entities.forEach(ent=>{cov_r30x9wae1().f[3]++;cov_r30x9wae1().s[20]++;response.filter(filterVal=>{cov_r30x9wae1().f[4]++;cov_r30x9wae1().s[21]++;return filterVal.TABLE_NAME===ent.tscName;}).forEach(resp=>{cov_r30x9wae1().f[5]++;const tscName=(cov_r30x9wae1().s[22]++,resp.COLUMN_NAME);const options=(cov_r30x9wae1().s[23]++,{name:resp.COLUMN_NAME});cov_r30x9wae1().s[24]++;if(resp.NULLABLE==="Y"){cov_r30x9wae1().b[1][0]++;cov_r30x9wae1().s[25]++;options.nullable=true;}else{cov_r30x9wae1().b[1][1]++;}cov_r30x9wae1().s[26]++;if(resp.IS_UNIQUE>0){cov_r30x9wae1().b[2][0]++;cov_r30x9wae1().s[27]++;options.unique=true;}else{cov_r30x9wae1().b[2][1]++;}const generated=(cov_r30x9wae1().s[28]++,resp.IDENTITY_COLUMN==="YES"?(cov_r30x9wae1().b[3][0]++,true):(cov_r30x9wae1().b[3][1]++,undefined));const defaultValue=(cov_r30x9wae1().s[29]++,(cov_r30x9wae1().b[5][0]++,!resp.DATA_DEFAULT)||(cov_r30x9wae1().b[5][1]++,resp.DATA_DEFAULT.includes('"'))?(cov_r30x9wae1().b[4][0]++,undefined):(cov_r30x9wae1().b[4][1]++,OracleDriver.ReturnDefaultValueFunction(resp.DATA_DEFAULT)));const DATA_TYPE=(cov_r30x9wae1().s[30]++,resp.DATA_TYPE.replace(/\([0-9]+\)/g,""));const columnType=(cov_r30x9wae1().s[31]++,DATA_TYPE.toLowerCase());let tscType=(cov_r30x9wae1().s[32]++,"");cov_r30x9wae1().s[33]++;switch(DATA_TYPE.toLowerCase()){case"char":cov_r30x9wae1().b[6][0]++;cov_r30x9wae1().s[34]++;tscType="string";cov_r30x9wae1().s[35]++;break;case"nchar":cov_r30x9wae1().b[6][1]++;cov_r30x9wae1().s[36]++;tscType="string";cov_r30x9wae1().s[37]++;break;case"nvarchar2":cov_r30x9wae1().b[6][2]++;cov_r30x9wae1().s[38]++;tscType="string";cov_r30x9wae1().s[39]++;break;case"varchar2":cov_r30x9wae1().b[6][3]++;cov_r30x9wae1().s[40]++;tscType="string";cov_r30x9wae1().s[41]++;break;case"long":cov_r30x9wae1().b[6][4]++;cov_r30x9wae1().s[42]++;tscType="string";cov_r30x9wae1().s[43]++;break;case"raw":cov_r30x9wae1().b[6][5]++;cov_r30x9wae1().s[44]++;tscType="Buffer";cov_r30x9wae1().s[45]++;break;case"long raw":cov_r30x9wae1().b[6][6]++;cov_r30x9wae1().s[46]++;tscType="Buffer";cov_r30x9wae1().s[47]++;break;case"number":cov_r30x9wae1().b[6][7]++;cov_r30x9wae1().s[48]++;tscType="number";cov_r30x9wae1().s[49]++;break;case"numeric":cov_r30x9wae1().b[6][8]++;cov_r30x9wae1().s[50]++;tscType="number";cov_r30x9wae1().s[51]++;break;case"float":cov_r30x9wae1().b[6][9]++;cov_r30x9wae1().s[52]++;tscType="number";cov_r30x9wae1().s[53]++;break;case"dec":cov_r30x9wae1().b[6][10]++;cov_r30x9wae1().s[54]++;tscType="number";cov_r30x9wae1().s[55]++;break;case"decimal":cov_r30x9wae1().b[6][11]++;cov_r30x9wae1().s[56]++;tscType="number";cov_r30x9wae1().s[57]++;break;case"integer":cov_r30x9wae1().b[6][12]++;cov_r30x9wae1().s[58]++;tscType="number";cov_r30x9wae1().s[59]++;break;case"int":cov_r30x9wae1().b[6][13]++;cov_r30x9wae1().s[60]++;tscType="number";cov_r30x9wae1().s[61]++;break;case"smallint":cov_r30x9wae1().b[6][14]++;cov_r30x9wae1().s[62]++;tscType="number";cov_r30x9wae1().s[63]++;break;case"real":cov_r30x9wae1().b[6][15]++;cov_r30x9wae1().s[64]++;tscType="number";cov_r30x9wae1().s[65]++;break;case"double precision":cov_r30x9wae1().b[6][16]++;cov_r30x9wae1().s[66]++;tscType="number";cov_r30x9wae1().s[67]++;break;case"date":cov_r30x9wae1().b[6][17]++;cov_r30x9wae1().s[68]++;tscType="Date";cov_r30x9wae1().s[69]++;break;case"timestamp":cov_r30x9wae1().b[6][18]++;cov_r30x9wae1().s[70]++;tscType="Date";cov_r30x9wae1().s[71]++;break;case"timestamp with time zone":cov_r30x9wae1().b[6][19]++;cov_r30x9wae1().s[72]++;tscType="Date";cov_r30x9wae1().s[73]++;break;case"timestamp with local time zone":cov_r30x9wae1().b[6][20]++;cov_r30x9wae1().s[74]++;tscType="Date";cov_r30x9wae1().s[75]++;break;case"interval year to month":cov_r30x9wae1().b[6][21]++;cov_r30x9wae1().s[76]++;tscType="string";cov_r30x9wae1().s[77]++;break;case"interval day to second":cov_r30x9wae1().b[6][22]++;cov_r30x9wae1().s[78]++;tscType="string";cov_r30x9wae1().s[79]++;break;case"bfile":cov_r30x9wae1().b[6][23]++;cov_r30x9wae1().s[80]++;tscType="Buffer";cov_r30x9wae1().s[81]++;break;case"blob":cov_r30x9wae1().b[6][24]++;cov_r30x9wae1().s[82]++;tscType="Buffer";cov_r30x9wae1().s[83]++;break;case"clob":cov_r30x9wae1().b[6][25]++;cov_r30x9wae1().s[84]++;tscType="string";cov_r30x9wae1().s[85]++;break;case"nclob":cov_r30x9wae1().b[6][26]++;cov_r30x9wae1().s[86]++;tscType="string";cov_r30x9wae1().s[87]++;break;case"rowid":cov_r30x9wae1().b[6][27]++;cov_r30x9wae1().s[88]++;tscType="number";cov_r30x9wae1().s[89]++;break;case"urowid":cov_r30x9wae1().b[6][28]++;cov_r30x9wae1().s[90]++;tscType="number";cov_r30x9wae1().s[91]++;break;default:cov_r30x9wae1().b[6][29]++;cov_r30x9wae1().s[92]++;tscType="NonNullable<unknown>";cov_r30x9wae1().s[93]++;TomgUtils.LogError(`Unknown column type:${DATA_TYPE}`);cov_r30x9wae1().s[94]++;break;}cov_r30x9wae1().s[95]++;if(this.ColumnTypesWithPrecision.some(v=>{cov_r30x9wae1().f[6]++;cov_r30x9wae1().s[96]++;return v===columnType;})){cov_r30x9wae1().b[7][0]++;cov_r30x9wae1().s[97]++;if(resp.DATA_PRECISION!==null){cov_r30x9wae1().b[8][0]++;cov_r30x9wae1().s[98]++;options.precision=resp.DATA_PRECISION;}else{cov_r30x9wae1().b[8][1]++;}cov_r30x9wae1().s[99]++;if(resp.DATA_SCALE!==null){cov_r30x9wae1().b[9][0]++;cov_r30x9wae1().s[100]++;options.scale=resp.DATA_SCALE;}else{cov_r30x9wae1().b[9][1]++;}}else{cov_r30x9wae1().b[7][1]++;}cov_r30x9wae1().s[101]++;if(this.ColumnTypesWithLength.some(v=>{cov_r30x9wae1().f[7]++;cov_r30x9wae1().s[102]++;return v===columnType;})){cov_r30x9wae1().b[10][0]++;cov_r30x9wae1().s[103]++;options.length=resp.DATA_LENGTH>0?(cov_r30x9wae1().b[11][0]++,resp.DATA_LENGTH):(cov_r30x9wae1().b[11][1]++,undefined);}else{cov_r30x9wae1().b[10][1]++;}cov_r30x9wae1().s[104]++;ent.columns.push({generated,type:columnType,default:defaultValue,options,tscName,tscType});});});cov_r30x9wae1().s[105]++;return entities;}async GetIndexesFromEntity(entities){cov_r30x9wae1().f[8]++;const response=(cov_r30x9wae1().s[106]++,(await this.Connection.execute(`SELECT ind.TABLE_NAME, ind.INDEX_NAME, col.COLUMN_NAME,ind.UNIQUENESS, CASE WHEN uc.CONSTRAINT_NAME IS NULL THEN 0 ELSE 1 END ISPRIMARYKEY
        FROM USER_INDEXES ind
        JOIN USER_IND_COLUMNS col ON ind.INDEX_NAME=col.INDEX_NAME
        LEFT JOIN USER_CONSTRAINTS uc ON  uc.INDEX_NAME = ind.INDEX_NAME
        ORDER BY col.INDEX_NAME ASC ,col.COLUMN_POSITION ASC`)).rows);cov_r30x9wae1().s[107]++;entities.forEach(ent=>{cov_r30x9wae1().f[9]++;const entityIndices=(cov_r30x9wae1().s[108]++,response.filter(filterVal=>{cov_r30x9wae1().f[10]++;cov_r30x9wae1().s[109]++;return filterVal.TABLE_NAME===ent.tscName;}));const indexNames=(cov_r30x9wae1().s[110]++,new Set(entityIndices.map(v=>{cov_r30x9wae1().f[11]++;cov_r30x9wae1().s[111]++;return v.INDEX_NAME;})));cov_r30x9wae1().s[112]++;indexNames.forEach(indexName=>{cov_r30x9wae1().f[12]++;const records=(cov_r30x9wae1().s[113]++,entityIndices.filter(v=>{cov_r30x9wae1().f[13]++;cov_r30x9wae1().s[114]++;return v.INDEX_NAME===indexName;}));const indexInfo=(cov_r30x9wae1().s[115]++,{columns:[],options:{},name:records[0].INDEX_NAME});cov_r30x9wae1().s[116]++;if(records[0].ISPRIMARYKEY===1){cov_r30x9wae1().b[12][0]++;cov_r30x9wae1().s[117]++;indexInfo.primary=true;}else{cov_r30x9wae1().b[12][1]++;}cov_r30x9wae1().s[118]++;if(records[0].UNIQUENESS==="UNIQUE"){cov_r30x9wae1().b[13][0]++;cov_r30x9wae1().s[119]++;indexInfo.options.unique=true;}else{cov_r30x9wae1().b[13][1]++;}cov_r30x9wae1().s[120]++;records.forEach(record=>{cov_r30x9wae1().f[14]++;cov_r30x9wae1().s[121]++;indexInfo.columns.push(record.COLUMN_NAME);});cov_r30x9wae1().s[122]++;ent.indices.push(indexInfo);});});cov_r30x9wae1().s[123]++;return entities;}async GetRelations(entities,schema,dbNames,generationOptions){cov_r30x9wae1().f[15]++;const response=(cov_r30x9wae1().s[124]++,(await this.Connection.execute(`select owner.TABLE_NAME OWNER_TABLE_NAME,ownCol.POSITION OWNER_POSITION,ownCol.COLUMN_NAME OWNER_COLUMN_NAME,
        child.TABLE_NAME CHILD_TABLE_NAME ,childCol.COLUMN_NAME CHILD_COLUMN_NAME,
        owner.DELETE_RULE,
        owner.CONSTRAINT_NAME
        from user_constraints owner
        join user_constraints child on owner.r_constraint_name=child.CONSTRAINT_NAME and child.constraint_type in ('P','U')
        JOIN USER_CONS_COLUMNS ownCol ON owner.CONSTRAINT_NAME = ownCol.CONSTRAINT_NAME
        JOIN USER_CONS_COLUMNS childCol ON child.CONSTRAINT_NAME = childCol.CONSTRAINT_NAME AND ownCol.POSITION=childCol.POSITION
        ORDER BY OWNER_TABLE_NAME ASC, owner.CONSTRAINT_NAME ASC, OWNER_POSITION ASC`)).rows);const relationsTemp=(cov_r30x9wae1().s[125]++,[]);const relationKeys=(cov_r30x9wae1().s[126]++,new Set(response.map(v=>{cov_r30x9wae1().f[16]++;cov_r30x9wae1().s[127]++;return v.CONSTRAINT_NAME;})));cov_r30x9wae1().s[128]++;relationKeys.forEach(relationId=>{cov_r30x9wae1().f[17]++;const rows=(cov_r30x9wae1().s[129]++,response.filter(v=>{cov_r30x9wae1().f[18]++;cov_r30x9wae1().s[130]++;return v.CONSTRAINT_NAME===relationId;}));const ownerTable=(cov_r30x9wae1().s[131]++,entities.find(v=>{cov_r30x9wae1().f[19]++;cov_r30x9wae1().s[132]++;return v.sqlName===rows[0].OWNER_TABLE_NAME;}));const relatedTable=(cov_r30x9wae1().s[133]++,entities.find(v=>{cov_r30x9wae1().f[20]++;cov_r30x9wae1().s[134]++;return v.sqlName===rows[0].CHILD_TABLE_NAME;}));cov_r30x9wae1().s[135]++;if((cov_r30x9wae1().b[15][0]++,!ownerTable)||(cov_r30x9wae1().b[15][1]++,!relatedTable)){cov_r30x9wae1().b[14][0]++;cov_r30x9wae1().s[136]++;TomgUtils.LogError(`Relation between tables ${rows[0].OWNER_TABLE_NAME} and ${rows[0].CHILD_TABLE_NAME} wasn't found in entity model.`,true);cov_r30x9wae1().s[137]++;return;}else{cov_r30x9wae1().b[14][1]++;}const internal=(cov_r30x9wae1().s[138]++,{ownerColumns:[],relatedColumns:[],ownerTable,relatedTable});cov_r30x9wae1().s[139]++;if(rows[0].DELETE_RULE!=="NO ACTION"){cov_r30x9wae1().b[16][0]++;cov_r30x9wae1().s[140]++;internal.onDelete=rows[0].DELETE_RULE;}else{cov_r30x9wae1().b[16][1]++;}cov_r30x9wae1().s[141]++;rows.forEach(row=>{cov_r30x9wae1().f[21]++;cov_r30x9wae1().s[142]++;internal.ownerColumns.push(row.OWNER_COLUMN_NAME);cov_r30x9wae1().s[143]++;internal.relatedColumns.push(row.CHILD_COLUMN_NAME);});cov_r30x9wae1().s[144]++;relationsTemp.push(internal);});const retVal=(cov_r30x9wae1().s[145]++,OracleDriver.GetRelationsFromRelationTempInfo(relationsTemp,entities,generationOptions));cov_r30x9wae1().s[146]++;return retVal;}async DisconnectFromServer(){cov_r30x9wae1().f[22]++;cov_r30x9wae1().s[147]++;if(this.Connection){cov_r30x9wae1().b[17][0]++;cov_r30x9wae1().s[148]++;await this.Connection.close();}else{cov_r30x9wae1().b[17][1]++;}}async ConnectToServer(connectionOptions){cov_r30x9wae1().f[23]++;let config;cov_r30x9wae1().s[149]++;if(connectionOptions.user===String(process.env.ORACLE_UsernameSys)){cov_r30x9wae1().b[18][0]++;cov_r30x9wae1().s[150]++;config={connectString:`${connectionOptions.host}:${connectionOptions.port}/${connectionOptions.databaseName}`,externalAuth:connectionOptions.ssl,password:connectionOptions.password,privilege:this.Oracle.SYSDBA,user:connectionOptions.user};}else{cov_r30x9wae1().b[18][1]++;cov_r30x9wae1().s[151]++;config={connectString:`${connectionOptions.host}:${connectionOptions.port}/${connectionOptions.databaseName}`,externalAuth:connectionOptions.ssl,password:connectionOptions.password,user:connectionOptions.user};}const promise=(cov_r30x9wae1().s[152]++,new Promise((resolve,reject)=>{cov_r30x9wae1().f[24]++;cov_r30x9wae1().s[153]++;this.Oracle.getConnection(config,(err,connection)=>{cov_r30x9wae1().f[25]++;cov_r30x9wae1().s[154]++;if(!err){cov_r30x9wae1().b[19][0]++;cov_r30x9wae1().s[155]++;this.Connection=connection;cov_r30x9wae1().s[156]++;resolve(true);}else{cov_r30x9wae1().b[19][1]++;cov_r30x9wae1().s[157]++;TomgUtils.LogError("Error connecting to Oracle Server.",false,err.message);cov_r30x9wae1().s[158]++;reject(err);}});}));cov_r30x9wae1().s[159]++;await promise;}async CreateDB(dbName){cov_r30x9wae1().f[26]++;cov_r30x9wae1().s[160]++;await this.Connection.execute(`CREATE USER ${dbName} IDENTIFIED BY ${String(process.env.ORACLE_Password)}`);cov_r30x9wae1().s[161]++;await this.Connection.execute(`GRANT CONNECT TO ${dbName}`);}// eslint-disable-next-line class-methods-use-this
async UseDB(){// not supported
cov_r30x9wae1().f[27]++;}async DropDB(dbName){cov_r30x9wae1().f[28]++;cov_r30x9wae1().s[162]++;await this.Connection.execute(`DROP USER ${dbName} CASCADE`);}async CheckIfDBExists(dbName){cov_r30x9wae1().f[29]++;const{rows}=(cov_r30x9wae1().s[163]++,await this.Connection.execute(`select count(*) as CNT from dba_users where username='${dbName.toUpperCase()}'`));cov_r30x9wae1().s[164]++;return(cov_r30x9wae1().b[20][0]++,rows[0][0]>0)||(cov_r30x9wae1().b[20][1]++,rows[0].CNT);}static ReturnDefaultValueFunction(defVal){cov_r30x9wae1().f[30]++;let defaultVal=(cov_r30x9wae1().s[165]++,(cov_r30x9wae1().b[22][0]++,defVal===null)||(cov_r30x9wae1().b[22][1]++,defVal===void 0)?(cov_r30x9wae1().b[21][0]++,void 0):(cov_r30x9wae1().b[21][1]++,defVal.trim()));cov_r30x9wae1().s[166]++;if(!defaultVal){cov_r30x9wae1().b[23][0]++;cov_r30x9wae1().s[167]++;return undefined;}else{cov_r30x9wae1().b[23][1]++;}cov_r30x9wae1().s[168]++;if(defaultVal.endsWith(" ")){cov_r30x9wae1().b[24][0]++;cov_r30x9wae1().s[169]++;defaultVal=defaultVal.slice(0,-1);}else{cov_r30x9wae1().b[24][1]++;}cov_r30x9wae1().s[170]++;return`() => "${defaultVal}"`;}}cov_r30x9wae1().s[171]++;exports.default=OracleDriver;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,