{"version":3,"file":"/home/nemo/work/github/typeorm-model-generator/src/ModelGeneration.ts","sources":["/home/nemo/work/github/typeorm-model-generator/src/ModelGeneration.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Handlebars from \"handlebars\";\nimport * as Prettier from \"prettier\";\nimport * as changeCase from \"change-case\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { EOL } from \"os\";\nimport IConnectionOptions from \"./IConnectionOptions\";\nimport IGenerationOptions, { eolConverter } from \"./IGenerationOptions\";\nimport { Entity } from \"./models/Entity\";\nimport { Relation } from \"./models/Relation\";\n\nconst prettierOptions: Prettier.Options = {\n    parser: \"typescript\",\n    endOfLine: \"auto\",\n};\n\nexport default function modelGenerationPhase(\n    connectionOptions: IConnectionOptions,\n    generationOptions: IGenerationOptions,\n    databaseModel: Entity[]\n): void {\n    createHandlebarsHelpers(generationOptions);\n\n    const resultPath = generationOptions.resultsPath;\n    if (!fs.existsSync(resultPath)) {\n        fs.mkdirSync(resultPath);\n    }\n    let entitiesPath = resultPath;\n    if (!generationOptions.noConfigs) {\n        createTsConfigFile(resultPath);\n        createTypeOrmConfig(resultPath, connectionOptions);\n        entitiesPath = path.resolve(resultPath, \"./entities\");\n        if (!fs.existsSync(entitiesPath)) {\n            fs.mkdirSync(entitiesPath);\n        }\n    }\n    if (generationOptions.indexFile) {\n        createIndexFile(databaseModel, generationOptions, entitiesPath);\n    }\n    generateModels(databaseModel, generationOptions, entitiesPath);\n}\n\nfunction generateModels(\n    databaseModel: Entity[],\n    generationOptions: IGenerationOptions,\n    entitiesPath: string\n) {\n    const entityTemplatePath = path.resolve(\n        __dirname,\n        \"templates\",\n        \"entity.mst\"\n    );\n    const entityTemplate = fs.readFileSync(entityTemplatePath, \"UTF-8\");\n    const entityCompliedTemplate = Handlebars.compile(entityTemplate, {\n        noEscape: true,\n    });\n    databaseModel.forEach((element) => {\n        let casedFileName = \"\";\n        switch (generationOptions.convertCaseFile) {\n            case \"camel\":\n                casedFileName = changeCase.camelCase(element.tscName);\n                break;\n            case \"param\":\n                casedFileName = changeCase.paramCase(element.tscName);\n                break;\n            case \"pascal\":\n                casedFileName = changeCase.pascalCase(element.tscName);\n                break;\n            case \"none\":\n                casedFileName = element.tscName;\n                break;\n            default:\n                throw new Error(\"Unknown case style\");\n        }\n        const resultFilePath = path.resolve(\n            entitiesPath,\n            `${casedFileName}.ts`\n        );\n        const rendered = entityCompliedTemplate(element);\n        const withImportStatements = removeUnusedImports(\n            EOL !== eolConverter[generationOptions.convertEol]\n                ? rendered.replace(\n                      /(\\r\\n|\\n|\\r)/gm,\n                      eolConverter[generationOptions.convertEol]\n                  )\n                : rendered\n        );\n        let formatted = \"\";\n        try {\n            formatted = Prettier.format(withImportStatements, prettierOptions);\n        } catch (error) {\n            console.error(\n                \"There were some problems with model generation for table: \",\n                element.sqlName\n            );\n            console.error(error);\n            formatted = withImportStatements;\n        }\n        fs.writeFileSync(resultFilePath, formatted, {\n            encoding: \"UTF-8\",\n            flag: \"w\",\n        });\n    });\n}\n\nfunction createIndexFile(\n    databaseModel: Entity[],\n    generationOptions: IGenerationOptions,\n    entitiesPath: string\n) {\n    const templatePath = path.resolve(__dirname, \"templates\", \"index.mst\");\n    const template = fs.readFileSync(templatePath, \"UTF-8\");\n    const compliedTemplate = Handlebars.compile(template, {\n        noEscape: true,\n    });\n    const rendered = compliedTemplate({ entities: databaseModel });\n    const formatted = Prettier.format(rendered, prettierOptions);\n    let fileName = \"index\";\n    switch (generationOptions.convertCaseFile) {\n        case \"camel\":\n            fileName = changeCase.camelCase(fileName);\n            break;\n        case \"param\":\n            fileName = changeCase.paramCase(fileName);\n            break;\n        case \"pascal\":\n            fileName = changeCase.pascalCase(fileName);\n            break;\n        default:\n    }\n    const resultFilePath = path.resolve(entitiesPath, `${fileName}.ts`);\n    fs.writeFileSync(resultFilePath, formatted, {\n        encoding: \"UTF-8\",\n        flag: \"w\",\n    });\n}\n\nfunction removeUnusedImports(rendered: string) {\n    const openBracketIndex = rendered.indexOf(\"{\") + 1;\n    const closeBracketIndex = rendered.indexOf(\"}\");\n    const imports = rendered\n        .substring(openBracketIndex, closeBracketIndex)\n        .split(\",\");\n    const restOfEntityDefinition = rendered.substring(closeBracketIndex);\n    const distinctImports = imports.filter(\n        (v) =>\n            restOfEntityDefinition.indexOf(`@${v}(`) !== -1 ||\n            (v === \"BaseEntity\" && restOfEntityDefinition.indexOf(v) !== -1)\n    );\n    return `${rendered.substring(0, openBracketIndex)}${distinctImports.join(\n        \",\"\n    )}${restOfEntityDefinition}`;\n}\n\nfunction createHandlebarsHelpers(generationOptions: IGenerationOptions): void {\n    Handlebars.registerHelper(\"json\", (context) => {\n        const json = JSON.stringify(context);\n        const withoutQuotes = json.replace(/\"([^(\")\"]+)\":/g, \"$1:\");\n        return withoutQuotes.slice(1, withoutQuotes.length - 1);\n    });\n    Handlebars.registerHelper(\"toEntityName\", (str) => {\n        let retStr = \"\";\n        switch (generationOptions.convertCaseEntity) {\n            case \"camel\":\n                retStr = changeCase.camelCase(str);\n                break;\n            case \"pascal\":\n                retStr = changeCase.pascalCase(str);\n                break;\n            case \"none\":\n                retStr = str;\n                break;\n            default:\n                throw new Error(\"Unknown case style\");\n        }\n        return retStr;\n    });\n    Handlebars.registerHelper(\"toFileName\", (str) => {\n        let retStr = \"\";\n        switch (generationOptions.convertCaseFile) {\n            case \"camel\":\n                retStr = changeCase.camelCase(str);\n                break;\n            case \"param\":\n                retStr = changeCase.paramCase(str);\n                break;\n            case \"pascal\":\n                retStr = changeCase.pascalCase(str);\n                break;\n            case \"none\":\n                retStr = str;\n                break;\n            default:\n                throw new Error(\"Unknown case style\");\n        }\n        return retStr;\n    });\n    Handlebars.registerHelper(\"printPropertyVisibility\", () =>\n        generationOptions.propertyVisibility !== \"none\"\n            ? `${generationOptions.propertyVisibility} `\n            : \"\"\n    );\n    Handlebars.registerHelper(\"toPropertyName\", (str) => {\n        let retStr = \"\";\n        switch (generationOptions.convertCaseProperty) {\n            case \"camel\":\n                retStr = changeCase.camelCase(str);\n                break;\n            case \"pascal\":\n                retStr = changeCase.pascalCase(str);\n                break;\n            case \"none\":\n                retStr = str;\n                break;\n            default:\n                throw new Error(\"Unknown case style\");\n        }\n        return retStr;\n    });\n    Handlebars.registerHelper(\n        \"toRelation\",\n        (entityType: string, relationType: Relation[\"relationType\"]) => {\n            let retVal = entityType;\n            if (relationType === \"ManyToMany\" || relationType === \"OneToMany\") {\n                retVal = `${retVal}[]`;\n            }\n            if (generationOptions.lazy) {\n                retVal = `Promise<${retVal}>`;\n            }\n            return retVal;\n        }\n    );\n    Handlebars.registerHelper(\"defaultExport\", () =>\n        generationOptions.exportType === \"default\" ? \"default\" : \"\"\n    );\n    Handlebars.registerHelper(\"localImport\", (entityName: string) =>\n        generationOptions.exportType === \"default\"\n            ? entityName\n            : `{${entityName}}`\n    );\n    Handlebars.registerHelper(\"strictMode\", () =>\n        generationOptions.strictMode !== \"none\"\n            ? generationOptions.strictMode\n            : \"\"\n    );\n    Handlebars.registerHelper({\n        and: (v1, v2) => v1 && v2,\n        eq: (v1, v2) => v1 === v2,\n        gt: (v1, v2) => v1 > v2,\n        gte: (v1, v2) => v1 >= v2,\n        lt: (v1, v2) => v1 < v2,\n        lte: (v1, v2) => v1 <= v2,\n        ne: (v1, v2) => v1 !== v2,\n        or: (v1, v2) => v1 || v2,\n    });\n}\n\nfunction createTsConfigFile(outputPath: string): void {\n    const templatePath = path.resolve(__dirname, \"templates\", \"tsconfig.mst\");\n    const template = fs.readFileSync(templatePath, \"UTF-8\");\n    const compliedTemplate = Handlebars.compile(template, {\n        noEscape: true,\n    });\n    const rendered = compliedTemplate({});\n    const formatted = Prettier.format(rendered, { parser: \"json\" });\n    const resultFilePath = path.resolve(outputPath, \"tsconfig.json\");\n    fs.writeFileSync(resultFilePath, formatted, {\n        encoding: \"UTF-8\",\n        flag: \"w\",\n    });\n}\nfunction createTypeOrmConfig(\n    outputPath: string,\n    connectionOptions: IConnectionOptions\n): void {\n    const templatePath = path.resolve(__dirname, \"templates\", \"ormconfig.mst\");\n    const template = fs.readFileSync(templatePath, \"UTF-8\");\n    const compliedTemplate = Handlebars.compile(template, {\n        noEscape: true,\n    });\n    const rendered = compliedTemplate(connectionOptions);\n    const formatted = Prettier.format(rendered, { parser: \"json\" });\n    const resultFilePath = path.resolve(outputPath, \"ormconfig.json\");\n    fs.writeFileSync(resultFilePath, formatted, {\n        encoding: \"UTF-8\",\n        flag: \"w\",\n    });\n}\n"]}