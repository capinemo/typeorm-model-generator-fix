"use strict";function cov_1up9qyasv9(){var path="/home/nemo/work/github/typeorm-model-generator/src/drivers/SqliteDriver.ts";var hash="7c4775b33ffe765e20151cf76f66582014ccad33";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/nemo/work/github/typeorm-model-generator/src/drivers/SqliteDriver.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:22},end:{line:3,column:67}},"2":{start:{line:4,column:18},end:{line:4,column:37}},"3":{start:{line:5,column:25},end:{line:5,column:52}},"4":{start:{line:8,column:8},end:{line:8,column:16}},"5":{start:{line:9,column:8},end:{line:11,column:28}},"6":{start:{line:12,column:8},end:{line:12,column:30}},"7":{start:{line:13,column:8},end:{line:13,column:31}},"8":{start:{line:14,column:8},end:{line:14,column:33}},"9":{start:{line:15,column:8},end:{line:15,column:57}},"10":{start:{line:16,column:8},end:{line:24,column:9}},"11":{start:{line:18,column:12},end:{line:18,column:48}},"12":{start:{line:19,column:12},end:{line:19,column:51}},"13":{start:{line:22,column:12},end:{line:22,column:49}},"14":{start:{line:23,column:12},end:{line:23,column:24}},"15":{start:{line:27,column:20},end:{line:27,column:22}},"16":{start:{line:28,column:31},end:{line:30,column:16}},"17":{start:{line:31,column:21},end:{line:31,column:157}},"18":{start:{line:32,column:8},end:{line:45,column:11}},"19":{start:{line:33,column:12},end:{line:35,column:13}},"20":{start:{line:34,column:16},end:{line:34,column:70}},"21":{start:{line:36,column:12},end:{line:44,column:15}},"22":{start:{line:46,column:8},end:{line:46,column:19}},"23":{start:{line:49,column:8},end:{line:182,column:12}},"24":{start:{line:50,column:29},end:{line:50,column:89}},"25":{start:{line:51,column:12},end:{line:181,column:15}},"26":{start:{line:52,column:32},end:{line:52,column:41}},"27":{start:{line:53,column:30},end:{line:53,column:32}},"28":{start:{line:54,column:32},end:{line:54,column:51}},"29":{start:{line:55,column:16},end:{line:56,column:44}},"30":{start:{line:56,column:20},end:{line:56,column:44}},"31":{start:{line:57,column:34},end:{line:57,column:64}},"32":{start:{line:58,column:37},end:{line:58,column:93}},"33":{start:{line:59,column:35},end:{line:62,column:27}},"34":{start:{line:63,column:34},end:{line:66,column:31}},"35":{start:{line:67,column:16},end:{line:153,column:17}},"36":{start:{line:69,column:24},end:{line:69,column:43}},"37":{start:{line:70,column:24},end:{line:70,column:30}},"38":{start:{line:72,column:24},end:{line:72,column:43}},"39":{start:{line:73,column:24},end:{line:73,column:30}},"40":{start:{line:75,column:24},end:{line:75,column:43}},"41":{start:{line:76,column:24},end:{line:76,column:30}},"42":{start:{line:78,column:24},end:{line:78,column:43}},"43":{start:{line:79,column:24},end:{line:79,column:30}},"44":{start:{line:81,column:24},end:{line:81,column:43}},"45":{start:{line:82,column:24},end:{line:82,column:30}},"46":{start:{line:84,column:24},end:{line:84,column:43}},"47":{start:{line:85,column:24},end:{line:85,column:30}},"48":{start:{line:87,column:24},end:{line:87,column:43}},"49":{start:{line:88,column:24},end:{line:88,column:30}},"50":{start:{line:90,column:24},end:{line:90,column:43}},"51":{start:{line:91,column:24},end:{line:91,column:30}},"52":{start:{line:93,column:24},end:{line:93,column:43}},"53":{start:{line:94,column:24},end:{line:94,column:30}},"54":{start:{line:96,column:24},end:{line:96,column:43}},"55":{start:{line:97,column:24},end:{line:97,column:30}},"56":{start:{line:99,column:24},end:{line:99,column:43}},"57":{start:{line:100,column:24},end:{line:100,column:30}},"58":{start:{line:102,column:24},end:{line:102,column:43}},"59":{start:{line:103,column:24},end:{line:103,column:30}},"60":{start:{line:105,column:24},end:{line:105,column:43}},"61":{start:{line:106,column:24},end:{line:106,column:30}},"62":{start:{line:108,column:24},end:{line:108,column:43}},"63":{start:{line:109,column:24},end:{line:109,column:30}},"64":{start:{line:111,column:24},end:{line:111,column:43}},"65":{start:{line:112,column:24},end:{line:112,column:30}},"66":{start:{line:114,column:24},end:{line:114,column:43}},"67":{start:{line:115,column:24},end:{line:115,column:30}},"68":{start:{line:117,column:24},end:{line:117,column:43}},"69":{start:{line:118,column:24},end:{line:118,column:30}},"70":{start:{line:120,column:24},end:{line:120,column:43}},"71":{start:{line:121,column:24},end:{line:121,column:30}},"72":{start:{line:123,column:24},end:{line:123,column:43}},"73":{start:{line:124,column:24},end:{line:124,column:30}},"74":{start:{line:126,column:24},end:{line:126,column:43}},"75":{start:{line:127,column:24},end:{line:127,column:30}},"76":{start:{line:129,column:24},end:{line:129,column:43}},"77":{start:{line:130,column:24},end:{line:130,column:30}},"78":{start:{line:132,column:24},end:{line:132,column:43}},"79":{start:{line:133,column:24},end:{line:133,column:30}},"80":{start:{line:135,column:24},end:{line:135,column:43}},"81":{start:{line:136,column:24},end:{line:136,column:30}},"82":{start:{line:138,column:24},end:{line:138,column:43}},"83":{start:{line:139,column:24},end:{line:139,column:30}},"84":{start:{line:141,column:24},end:{line:141,column:44}},"85":{start:{line:142,column:24},end:{line:142,column:30}},"86":{start:{line:144,column:24},end:{line:144,column:43}},"87":{start:{line:145,column:24},end:{line:145,column:30}},"88":{start:{line:147,column:24},end:{line:147,column:41}},"89":{start:{line:148,column:24},end:{line:148,column:30}},"90":{start:{line:150,column:24},end:{line:150,column:57}},"91":{start:{line:151,column:24},end:{line:151,column:135}},"92":{start:{line:152,column:24},end:{line:152,column:30}},"93":{start:{line:154,column:35},end:{line:154,column:67}},"94":{start:{line:155,column:16},end:{line:163,column:17}},"95":{start:{line:155,column:62},end:{line:155,column:78}},"96":{start:{line:157,column:20},end:{line:159,column:44}},"97":{start:{line:160,column:20},end:{line:162,column:44}},"98":{start:{line:164,column:16},end:{line:167,column:17}},"99":{start:{line:164,column:59},end:{line:164,column:75}},"100":{start:{line:166,column:20},end:{line:166,column:111}},"101":{start:{line:168,column:16},end:{line:171,column:17}},"102":{start:{line:168,column:58},end:{line:168,column:99}},"103":{start:{line:170,column:20},end:{line:170,column:110}},"104":{start:{line:172,column:16},end:{line:180,column:19}},"105":{start:{line:183,column:8},end:{line:183,column:24}},"106":{start:{line:186,column:8},end:{line:211,column:12}},"107":{start:{line:187,column:29},end:{line:187,column:89}},"108":{start:{line:188,column:12},end:{line:210,column:16}},"109":{start:{line:189,column:45},end:{line:189,column:103}},"110":{start:{line:190,column:34},end:{line:194,column:17}},"111":{start:{line:195,column:16},end:{line:196,column:52}},"112":{start:{line:196,column:20},end:{line:196,column:52}},"113":{start:{line:197,column:16},end:{line:199,column:19}},"114":{start:{line:198,column:20},end:{line:198,column:56}},"115":{start:{line:200,column:16},end:{line:208,column:17}},"116":{start:{line:202,column:20},end:{line:207,column:23}},"117":{start:{line:203,column:39},end:{line:203,column:73}},"118":{start:{line:206,column:24},end:{line:206,column:48}},"119":{start:{line:209,column:16},end:{line:209,column:44}},"120":{start:{line:212,column:8},end:{line:212,column:24}},"121":{start:{line:215,column:21},end:{line:215,column:29}},"122":{start:{line:216,column:8},end:{line:247,column:12}},"123":{start:{line:217,column:29},end:{line:217,column:98}},"124":{start:{line:218,column:34},end:{line:218,column:36}},"125":{start:{line:219,column:33},end:{line:219,column:67}},"126":{start:{line:219,column:61},end:{line:219,column:65}},"127":{start:{line:220,column:12},end:{line:245,column:15}},"128":{start:{line:221,column:29},end:{line:221,column:72}},"129":{start:{line:221,column:52},end:{line:221,column:71}},"130":{start:{line:222,column:35},end:{line:222,column:85}},"131":{start:{line:222,column:56},end:{line:222,column:84}},"132":{start:{line:223,column:37},end:{line:223,column:86}},"133":{start:{line:223,column:58},end:{line:223,column:85}},"134":{start:{line:224,column:16},end:{line:227,column:17}},"135":{start:{line:225,column:20},end:{line:225,column:141}},"136":{start:{line:226,column:20},end:{line:226,column:27}},"137":{start:{line:228,column:33},end:{line:233,column:17}},"138":{start:{line:234,column:16},end:{line:236,column:17}},"139":{start:{line:235,column:20},end:{line:235,column:58}},"140":{start:{line:237,column:16},end:{line:239,column:17}},"141":{start:{line:238,column:20},end:{line:238,column:58}},"142":{start:{line:240,column:16},end:{line:243,column:19}},"143":{start:{line:241,column:20},end:{line:241,column:57}},"144":{start:{line:242,column:20},end:{line:242,column:57}},"145":{start:{line:244,column:16},end:{line:244,column:45}},"146":{start:{line:246,column:12},end:{line:246,column:109}},"147":{start:{line:248,column:8},end:{line:248,column:22}},"148":{start:{line:251,column:8},end:{line:251,column:24}},"149":{start:{line:254,column:8},end:{line:254,column:56}},"150":{start:{line:261,column:24},end:{line:270,column:10}},"151":{start:{line:262,column:12},end:{line:269,column:15}},"152":{start:{line:263,column:16},end:{line:267,column:17}},"153":{start:{line:264,column:20},end:{line:264,column:99}},"154":{start:{line:265,column:20},end:{line:265,column:32}},"155":{start:{line:266,column:20},end:{line:266,column:27}},"156":{start:{line:268,column:16},end:{line:268,column:26}},"157":{start:{line:271,column:8},end:{line:271,column:23}},"158":{start:{line:279,column:8},end:{line:279,column:20}},"159":{start:{line:282,column:18},end:{line:282,column:20}},"160":{start:{line:283,column:24},end:{line:296,column:10}},"161":{start:{line:284,column:12},end:{line:295,column:15}},"162":{start:{line:285,column:16},end:{line:294,column:19}},"163":{start:{line:286,column:20},end:{line:293,column:21}},"164":{start:{line:287,column:24},end:{line:287,column:34}},"165":{start:{line:288,column:24},end:{line:288,column:38}},"166":{start:{line:291,column:24},end:{line:291,column:99}},"167":{start:{line:292,column:24},end:{line:292,column:36}},"168":{start:{line:297,column:8},end:{line:297,column:22}},"169":{start:{line:298,column:8},end:{line:298,column:19}},"170":{start:{line:301,column:8},end:{line:303,column:9}},"171":{start:{line:302,column:12},end:{line:302,column:29}},"172":{start:{line:304,column:8},end:{line:304,column:35}},"173":{start:{line:307,column:0},end:{line:307,column:31}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:4},end:{line:7,column:5}},loc:{start:{line:7,column:18},end:{line:25,column:5}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:26,column:4},end:{line:26,column:5}},loc:{start:{line:26,column:52},end:{line:47,column:5}},line:26},"2":{name:"(anonymous_2)",decl:{start:{line:32,column:21},end:{line:32,column:22}},loc:{start:{line:32,column:30},end:{line:45,column:9}},line:32},"3":{name:"(anonymous_3)",decl:{start:{line:48,column:4},end:{line:48,column:5}},loc:{start:{line:48,column:41},end:{line:184,column:5}},line:48},"4":{name:"(anonymous_4)",decl:{start:{line:49,column:39},end:{line:49,column:40}},loc:{start:{line:49,column:54},end:{line:182,column:9}},line:49},"5":{name:"(anonymous_5)",decl:{start:{line:51,column:29},end:{line:51,column:30}},loc:{start:{line:51,column:39},end:{line:181,column:13}},line:51},"6":{name:"(anonymous_6)",decl:{start:{line:155,column:55},end:{line:155,column:56}},loc:{start:{line:155,column:62},end:{line:155,column:78}},line:155},"7":{name:"(anonymous_7)",decl:{start:{line:164,column:52},end:{line:164,column:53}},loc:{start:{line:164,column:59},end:{line:164,column:75}},line:164},"8":{name:"(anonymous_8)",decl:{start:{line:168,column:51},end:{line:168,column:52}},loc:{start:{line:168,column:58},end:{line:168,column:99}},line:168},"9":{name:"(anonymous_9)",decl:{start:{line:185,column:4},end:{line:185,column:5}},loc:{start:{line:185,column:41},end:{line:213,column:5}},line:185},"10":{name:"(anonymous_10)",decl:{start:{line:186,column:39},end:{line:186,column:40}},loc:{start:{line:186,column:54},end:{line:211,column:9}},line:186},"11":{name:"(anonymous_11)",decl:{start:{line:188,column:43},end:{line:188,column:44}},loc:{start:{line:188,column:59},end:{line:210,column:13}},line:188},"12":{name:"(anonymous_12)",decl:{start:{line:197,column:45},end:{line:197,column:46}},loc:{start:{line:197,column:57},end:{line:199,column:17}},line:197},"13":{name:"(anonymous_13)",decl:{start:{line:203,column:32},end:{line:203,column:33}},loc:{start:{line:203,column:39},end:{line:203,column:73}},line:203},"14":{name:"(anonymous_14)",decl:{start:{line:204,column:33},end:{line:204,column:34}},loc:{start:{line:204,column:40},end:{line:207,column:21}},line:204},"15":{name:"(anonymous_15)",decl:{start:{line:214,column:4},end:{line:214,column:5}},loc:{start:{line:214,column:69},end:{line:249,column:5}},line:214},"16":{name:"(anonymous_16)",decl:{start:{line:216,column:37},end:{line:216,column:38}},loc:{start:{line:216,column:55},end:{line:247,column:9}},line:216},"17":{name:"(anonymous_17)",decl:{start:{line:219,column:54},end:{line:219,column:55}},loc:{start:{line:219,column:61},end:{line:219,column:65}},line:219},"18":{name:"(anonymous_18)",decl:{start:{line:220,column:33},end:{line:220,column:34}},loc:{start:{line:220,column:49},end:{line:245,column:13}},line:220},"19":{name:"(anonymous_19)",decl:{start:{line:221,column:45},end:{line:221,column:46}},loc:{start:{line:221,column:52},end:{line:221,column:71}},line:221},"20":{name:"(anonymous_20)",decl:{start:{line:222,column:49},end:{line:222,column:50}},loc:{start:{line:222,column:56},end:{line:222,column:84}},line:222},"21":{name:"(anonymous_21)",decl:{start:{line:223,column:51},end:{line:223,column:52}},loc:{start:{line:223,column:58},end:{line:223,column:85}},line:223},"22":{name:"(anonymous_22)",decl:{start:{line:240,column:29},end:{line:240,column:30}},loc:{start:{line:240,column:38},end:{line:243,column:17}},line:240},"23":{name:"(anonymous_23)",decl:{start:{line:250,column:4},end:{line:250,column:5}},loc:{start:{line:250,column:33},end:{line:252,column:5}},line:250},"24":{name:"(anonymous_24)",decl:{start:{line:253,column:4},end:{line:253,column:5}},loc:{start:{line:253,column:44},end:{line:255,column:5}},line:253},"25":{name:"(anonymous_25)",decl:{start:{line:257,column:4},end:{line:257,column:5}},loc:{start:{line:257,column:21},end:{line:259,column:5}},line:257},"26":{name:"(anonymous_26)",decl:{start:{line:260,column:4},end:{line:260,column:5}},loc:{start:{line:260,column:24},end:{line:272,column:5}},line:260},"27":{name:"(anonymous_27)",decl:{start:{line:261,column:36},end:{line:261,column:37}},loc:{start:{line:261,column:57},end:{line:270,column:9}},line:261},"28":{name:"(anonymous_28)",decl:{start:{line:262,column:55},end:{line:262,column:56}},loc:{start:{line:262,column:64},end:{line:269,column:13}},line:262},"29":{name:"(anonymous_29)",decl:{start:{line:274,column:4},end:{line:274,column:5}},loc:{start:{line:274,column:19},end:{line:276,column:5}},line:274},"30":{name:"(anonymous_30)",decl:{start:{line:278,column:4},end:{line:278,column:5}},loc:{start:{line:278,column:28},end:{line:280,column:5}},line:278},"31":{name:"(anonymous_31)",decl:{start:{line:281,column:4},end:{line:281,column:5}},loc:{start:{line:281,column:25},end:{line:299,column:5}},line:281},"32":{name:"(anonymous_32)",decl:{start:{line:283,column:36},end:{line:283,column:37}},loc:{start:{line:283,column:57},end:{line:296,column:9}},line:283},"33":{name:"(anonymous_33)",decl:{start:{line:284,column:30},end:{line:284,column:31}},loc:{start:{line:284,column:36},end:{line:295,column:13}},line:284},"34":{name:"(anonymous_34)",decl:{start:{line:285,column:37},end:{line:285,column:38}},loc:{start:{line:285,column:51},end:{line:294,column:17}},line:285},"35":{name:"(anonymous_35)",decl:{start:{line:300,column:4},end:{line:300,column:5}},loc:{start:{line:300,column:46},end:{line:305,column:5}},line:300}},branchMap:{"0":{loc:{start:{line:28,column:31},end:{line:30,column:16}},type:"cond-expr",locations:[{start:{line:29,column:14},end:{line:29,column:66}},{start:{line:30,column:14},end:{line:30,column:16}}],line:28},"1":{loc:{start:{line:33,column:12},end:{line:35,column:13}},type:"if",locations:[{start:{line:33,column:12},end:{line:35,column:13}},{start:{line:33,column:12},end:{line:35,column:13}}],line:33},"2":{loc:{start:{line:55,column:16},end:{line:56,column:44}},type:"if",locations:[{start:{line:55,column:16},end:{line:56,column:44}},{start:{line:55,column:16},end:{line:56,column:44}}],line:55},"3":{loc:{start:{line:57,column:34},end:{line:57,column:64}},type:"cond-expr",locations:[{start:{line:57,column:48},end:{line:57,column:52}},{start:{line:57,column:55},end:{line:57,column:64}}],line:57},"4":{loc:{start:{line:63,column:34},end:{line:66,column:31}},type:"cond-expr",locations:[{start:{line:65,column:22},end:{line:65,column:26}},{start:{line:66,column:22},end:{line:66,column:31}}],line:63},"5":{loc:{start:{line:63,column:34},end:{line:64,column:76}},type:"binary-expr",locations:[{start:{line:63,column:34},end:{line:63,column:43}},{start:{line:64,column:20},end:{line:64,column:76}}],line:63},"6":{loc:{start:{line:67,column:16},end:{line:153,column:17}},type:"switch",locations:[{start:{line:68,column:20},end:{line:70,column:30}},{start:{line:71,column:20},end:{line:73,column:30}},{start:{line:74,column:20},end:{line:76,column:30}},{start:{line:77,column:20},end:{line:79,column:30}},{start:{line:80,column:20},end:{line:82,column:30}},{start:{line:83,column:20},end:{line:85,column:30}},{start:{line:86,column:20},end:{line:88,column:30}},{start:{line:89,column:20},end:{line:91,column:30}},{start:{line:92,column:20},end:{line:94,column:30}},{start:{line:95,column:20},end:{line:97,column:30}},{start:{line:98,column:20},end:{line:100,column:30}},{start:{line:101,column:20},end:{line:103,column:30}},{start:{line:104,column:20},end:{line:106,column:30}},{start:{line:107,column:20},end:{line:109,column:30}},{start:{line:110,column:20},end:{line:112,column:30}},{start:{line:113,column:20},end:{line:115,column:30}},{start:{line:116,column:20},end:{line:118,column:30}},{start:{line:119,column:20},end:{line:121,column:30}},{start:{line:122,column:20},end:{line:124,column:30}},{start:{line:125,column:20},end:{line:127,column:30}},{start:{line:128,column:20},end:{line:130,column:30}},{start:{line:131,column:20},end:{line:133,column:30}},{start:{line:134,column:20},end:{line:136,column:30}},{start:{line:137,column:20},end:{line:139,column:30}},{start:{line:140,column:20},end:{line:142,column:30}},{start:{line:143,column:20},end:{line:145,column:30}},{start:{line:146,column:20},end:{line:148,column:30}},{start:{line:149,column:20},end:{line:152,column:30}}],line:67},"7":{loc:{start:{line:155,column:16},end:{line:163,column:17}},type:"if",locations:[{start:{line:155,column:16},end:{line:163,column:17}},{start:{line:155,column:16},end:{line:163,column:17}}],line:155},"8":{loc:{start:{line:155,column:20},end:{line:156,column:30}},type:"binary-expr",locations:[{start:{line:155,column:20},end:{line:155,column:79}},{start:{line:156,column:20},end:{line:156,column:30}}],line:155},"9":{loc:{start:{line:164,column:16},end:{line:167,column:17}},type:"if",locations:[{start:{line:164,column:16},end:{line:167,column:17}},{start:{line:164,column:16},end:{line:167,column:17}}],line:164},"10":{loc:{start:{line:164,column:20},end:{line:165,column:30}},type:"binary-expr",locations:[{start:{line:164,column:20},end:{line:164,column:76}},{start:{line:165,column:20},end:{line:165,column:30}}],line:164},"11":{loc:{start:{line:168,column:16},end:{line:171,column:17}},type:"if",locations:[{start:{line:168,column:16},end:{line:171,column:17}},{start:{line:168,column:16},end:{line:171,column:17}}],line:168},"12":{loc:{start:{line:168,column:20},end:{line:169,column:30}},type:"binary-expr",locations:[{start:{line:168,column:20},end:{line:168,column:100}},{start:{line:169,column:20},end:{line:169,column:30}}],line:168},"13":{loc:{start:{line:168,column:58},end:{line:168,column:99}},type:"binary-expr",locations:[{start:{line:168,column:58},end:{line:168,column:74}},{start:{line:168,column:78},end:{line:168,column:99}}],line:168},"14":{loc:{start:{line:195,column:16},end:{line:196,column:52}},type:"if",locations:[{start:{line:195,column:16},end:{line:196,column:52}},{start:{line:195,column:16},end:{line:196,column:52}}],line:195},"15":{loc:{start:{line:200,column:16},end:{line:208,column:17}},type:"if",locations:[{start:{line:200,column:16},end:{line:208,column:17}},{start:{line:200,column:16},end:{line:208,column:17}}],line:200},"16":{loc:{start:{line:200,column:20},end:{line:201,column:44}},type:"binary-expr",locations:[{start:{line:200,column:20},end:{line:200,column:53}},{start:{line:201,column:20},end:{line:201,column:44}}],line:200},"17":{loc:{start:{line:224,column:16},end:{line:227,column:17}},type:"if",locations:[{start:{line:224,column:16},end:{line:227,column:17}},{start:{line:224,column:16},end:{line:227,column:17}}],line:224},"18":{loc:{start:{line:224,column:20},end:{line:224,column:48}},type:"binary-expr",locations:[{start:{line:224,column:20},end:{line:224,column:31}},{start:{line:224,column:35},end:{line:224,column:48}}],line:224},"19":{loc:{start:{line:234,column:16},end:{line:236,column:17}},type:"if",locations:[{start:{line:234,column:16},end:{line:236,column:17}},{start:{line:234,column:16},end:{line:236,column:17}}],line:234},"20":{loc:{start:{line:237,column:16},end:{line:239,column:17}},type:"if",locations:[{start:{line:237,column:16},end:{line:239,column:17}},{start:{line:237,column:16},end:{line:239,column:17}}],line:237},"21":{loc:{start:{line:263,column:16},end:{line:267,column:17}},type:"if",locations:[{start:{line:263,column:16},end:{line:267,column:17}},{start:{line:263,column:16},end:{line:267,column:17}}],line:263},"22":{loc:{start:{line:286,column:20},end:{line:293,column:21}},type:"if",locations:[{start:{line:286,column:20},end:{line:293,column:21}},{start:{line:286,column:20},end:{line:293,column:21}}],line:286},"23":{loc:{start:{line:301,column:8},end:{line:303,column:9}},type:"if",locations:[{start:{line:301,column:8},end:{line:303,column:9}},{start:{line:301,column:8},end:{line:303,column:9}}],line:301}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},inputSourceMap:{version:3,file:"/home/nemo/work/github/typeorm-model-generator/src/drivers/SqliteDriver.ts",sources:["/home/nemo/work/github/typeorm-model-generator/src/drivers/SqliteDriver.ts"],names:[],mappings:"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",sourcesContent:["import { ConnectionOptions } from \"typeorm\";\nimport * as TypeormDriver from \"typeorm/driver/sqlite/SqliteDriver\";\nimport { DataTypeDefaults } from \"typeorm/driver/types/DataTypeDefaults\";\nimport type * as sqliteLib from \"sqlite3\";\nimport * as TomgUtils from \"../Utils\";\nimport AbstractDriver from \"./AbstractDriver\";\nimport IConnectionOptions from \"../IConnectionOptions\";\nimport { Entity } from \"../models/Entity\";\nimport { Column } from \"../models/Column\";\nimport { Index } from \"../models/Index\";\nimport IGenerationOptions from \"../IGenerationOptions\";\nimport { RelationInternal } from \"../models/RelationInternal\";\n\nexport default class SqliteDriver extends AbstractDriver {\n    public defaultValues: DataTypeDefaults = new TypeormDriver.SqliteDriver({\n        options: { database: \"true\" } as ConnectionOptions,\n    } as any).dataTypeDefaults;\n\n    public readonly standardPort = 0;\n\n    public readonly standardUser = \"\";\n\n    public readonly standardSchema = \"\";\n\n    private sqliteLib: typeof sqliteLib;\n\n    private sqlite: sqliteLib.sqlite3;\n\n    private db: sqliteLib.Database;\n\n    private tablesWithGeneratedPrimaryKey: string[] = new Array<string>();\n\n    public GetAllTablesQuery: any;\n\n    public constructor() {\n        super();\n        try {\n            // eslint-disable-next-line import/no-extraneous-dependencies, global-require, import/no-unresolved\n            this.sqliteLib = require(\"sqlite3\");\n            this.sqlite = this.sqliteLib.verbose();\n        } catch (error) {\n            TomgUtils.LogError(\"\", false, error);\n            throw error;\n        }\n    }\n\n    public async GetAllTables(\n        schema: string,\n        dbNames: string,\n        tableNames: string[]\n    ): Promise<Entity[]> {\n        const ret: Entity[] = [] as Entity[];\n        const tableCondition =\n            tableNames.length > 0\n                ? ` AND NOT tbl_name IN ('${tableNames.join(\"','\")}')`\n                : \"\";\n        const rows = await this.ExecQuery<{ tbl_name: string; sql: string }>(\n            `SELECT tbl_name, sql FROM \"sqlite_master\" WHERE \"type\" = 'table'  AND name NOT LIKE 'sqlite_%' ${tableCondition}`\n        );\n        rows.forEach((val) => {\n            if (val.sql.includes(\"AUTOINCREMENT\")) {\n                this.tablesWithGeneratedPrimaryKey.push(val.tbl_name);\n            }\n            ret.push({\n                columns: [],\n                indices: [],\n                relations: [],\n                relationIds: [],\n                sqlName: val.tbl_name,\n                tscName: val.tbl_name,\n                fileImports: [],\n            });\n        });\n        return ret;\n    }\n\n    public async GetCoulmnsFromEntity(entities: Entity[]): Promise<Entity[]> {\n        await Promise.all(\n            entities.map(async (ent) => {\n                const response = await this.ExecQuery<{\n                    cid: number;\n                    name: string;\n                    type: string;\n                    notnull: number;\n                    dflt_value: string;\n                    pk: number;\n                }>(`PRAGMA table_info('${ent.tscName}');`);\n                response.forEach((resp) => {\n                    const tscName = resp.name;\n                    let tscType = \"\";\n                    const options: Column[\"options\"] = { name: resp.name };\n                    if (resp.notnull === 0) options.nullable = true;\n                    const isPrimary = resp.pk > 0 ? true : undefined;\n                    const defaultValue = SqliteDriver.ReturnDefaultValueFunction(\n                        resp.dflt_value\n                    );\n                    const columnType = resp.type\n                        .replace(/\\([0-9 ,]+\\)/g, \"\")\n                        .toLowerCase()\n                        .trim();\n                    const generated =\n                        isPrimary &&\n                        this.tablesWithGeneratedPrimaryKey.includes(ent.tscName)\n                            ? true\n                            : undefined;\n                    switch (columnType) {\n                        case \"int\":\n                            tscType = \"number\";\n                            break;\n                        case \"integer\":\n                            tscType = \"number\";\n                            break;\n                        case \"int2\":\n                            tscType = \"number\";\n                            break;\n                        case \"int8\":\n                            tscType = \"number\";\n                            break;\n                        case \"tinyint\":\n                            tscType = \"number\";\n                            break;\n                        case \"smallint\":\n                            tscType = \"number\";\n                            break;\n                        case \"mediumint\":\n                            tscType = \"number\";\n                            break;\n                        case \"bigint\":\n                            tscType = \"string\";\n                            break;\n                        case \"unsigned big int\":\n                            tscType = \"string\";\n                            break;\n                        case \"character\":\n                            tscType = \"string\";\n                            break;\n                        case \"varchar\":\n                            tscType = \"string\";\n                            break;\n                        case \"varying character\":\n                            tscType = \"string\";\n                            break;\n                        case \"nchar\":\n                            tscType = \"string\";\n                            break;\n                        case \"native character\":\n                            tscType = \"string\";\n                            break;\n                        case \"nvarchar\":\n                            tscType = \"string\";\n                            break;\n                        case \"text\":\n                            tscType = \"string\";\n                            break;\n                        case \"blob\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"clob\":\n                            tscType = \"string\";\n                            break;\n                        case \"real\":\n                            tscType = \"number\";\n                            break;\n                        case \"double\":\n                            tscType = \"number\";\n                            break;\n                        case \"double precision\":\n                            tscType = \"number\";\n                            break;\n                        case \"float\":\n                            tscType = \"number\";\n                            break;\n                        case \"numeric\":\n                            tscType = \"number\";\n                            break;\n                        case \"decimal\":\n                            tscType = \"number\";\n                            break;\n                        case \"boolean\":\n                            tscType = \"boolean\";\n                            break;\n                        case \"date\":\n                            tscType = \"string\";\n                            break;\n                        case \"datetime\":\n                            tscType = \"Date\";\n                            break;\n                        default:\n                            tscType = \"NonNullable<unknown>\";\n                            TomgUtils.LogError(\n                                `Unknown column type: ${columnType}  table name: ${ent.tscName} column name: ${resp.name}`\n                            );\n                            break;\n                    }\n                    const sqlOptions = resp.type.match(/\\([0-9 ,]+\\)/g);\n                    if (\n                        this.ColumnTypesWithPrecision.some(\n                            (v) => v === columnType\n                        ) &&\n                        sqlOptions\n                    ) {\n                        options.precision = Number.parseInt(\n                            sqlOptions[0]\n                                .substring(1, sqlOptions[0].length - 1)\n                                .split(\",\")[0],\n                            10\n                        );\n                        options.scale = Number.parseInt(\n                            sqlOptions[0]\n                                .substring(1, sqlOptions[0].length - 1)\n                                .split(\",\")[1],\n                            10\n                        );\n                    }\n                    if (\n                        this.ColumnTypesWithLength.some(\n                            (v) => v === columnType\n                        ) &&\n                        sqlOptions\n                    ) {\n                        options.length = Number.parseInt(\n                            sqlOptions[0].substring(\n                                1,\n                                sqlOptions[0].length - 1\n                            ),\n                            10\n                        );\n                    }\n                    if (\n                        this.ColumnTypesWithWidth.some(\n                            (v) => v === columnType && tscType !== \"boolean\"\n                        ) &&\n                        sqlOptions\n                    ) {\n                        options.width = Number.parseInt(\n                            sqlOptions[0].substring(\n                                1,\n                                sqlOptions[0].length - 1\n                            ),\n                            10\n                        );\n                    }\n\n                    ent.columns.push({\n                        generated,\n                        primary: isPrimary,\n                        type: columnType,\n                        default: defaultValue,\n                        options,\n                        tscName,\n                        tscType,\n                    });\n                });\n            })\n        );\n\n        return entities;\n    }\n\n    public async GetIndexesFromEntity(entities: Entity[]): Promise<Entity[]> {\n        await Promise.all(\n            entities.map(async (ent) => {\n                const response = await this.ExecQuery<{\n                    seq: number;\n                    name: string;\n                    unique: number;\n                    origin: string;\n                    partial: number;\n                }>(`PRAGMA index_list('${ent.tscName}');`);\n                await Promise.all(\n                    response.map(async (resp) => {\n                        const indexColumnsResponse = await this.ExecQuery<{\n                            seqno: number;\n                            cid: number;\n                            name: string;\n                        }>(`PRAGMA index_info('${resp.name}');`);\n\n                        const indexInfo: Index = {\n                            name: resp.name,\n                            columns: [],\n                            options: {},\n                        };\n                        if (resp.unique === 1) indexInfo.options.unique = true;\n\n                        indexColumnsResponse.forEach((record) => {\n                            indexInfo.columns.push(record.name);\n                        });\n                        if (\n                            indexColumnsResponse.length === 1 &&\n                            indexInfo.options.unique\n                        ) {\n                            ent.columns\n                                .filter(\n                                    (v) => v.tscName === indexInfo.columns[0]\n                                )\n                                .forEach((v) => {\n                                    // eslint-disable-next-line no-param-reassign\n                                    v.options.unique = true;\n                                });\n                        }\n                        ent.indices.push(indexInfo);\n                    })\n                );\n            })\n        );\n\n        return entities;\n    }\n\n    public async GetRelations(\n        entities: Entity[],\n        schema: string,\n        dbNames: string,\n        generationOptions: IGenerationOptions\n    ): Promise<Entity[]> {\n        let retVal = entities;\n        await Promise.all(\n            retVal.map(async (entity) => {\n                const response = await this.ExecQuery<{\n                    id: number;\n                    seq: number;\n                    table: string;\n                    from: string;\n                    to: string;\n                    on_update:\n                        | \"RESTRICT\"\n                        | \"CASCADE\"\n                        | \"SET NULL\"\n                        | \"NO ACTION\";\n                    on_delete:\n                        | \"RESTRICT\"\n                        | \"CASCADE\"\n                        | \"SET NULL\"\n                        | \"NO ACTION\";\n                    match: string;\n                }>(`PRAGMA foreign_key_list('${entity.tscName}');`);\n\n                const relationsTemp: RelationInternal[] = [] as RelationInternal[];\n                const relationKeys = new Set(response.map((v) => v.id));\n\n                relationKeys.forEach((relationId) => {\n                    const rows = response.filter((v) => v.id === relationId);\n                    const ownerTable = entities.find(\n                        (v) => v.sqlName === entity.tscName\n                    );\n                    const relatedTable = entities.find(\n                        (v) => v.sqlName === rows[0].table\n                    );\n                    if (!ownerTable || !relatedTable) {\n                        TomgUtils.LogError(\n                            `Relation between tables ${entity.tscName} and ${rows[0].table} wasn't found in entity model.`,\n                            true\n                        );\n                        return;\n                    }\n                    const internal: RelationInternal = {\n                        ownerColumns: [],\n                        relatedColumns: [],\n                        ownerTable,\n                        relatedTable,\n                    };\n                    if (rows[0].on_delete !== \"NO ACTION\") {\n                        internal.onDelete = rows[0].on_delete;\n                    }\n                    if (rows[0].on_update !== \"NO ACTION\") {\n                        internal.onUpdate = rows[0].on_update;\n                    }\n                    rows.forEach((row) => {\n                        internal.ownerColumns.push(row.from);\n                        internal.relatedColumns.push(row.to);\n                    });\n                    relationsTemp.push(internal);\n                });\n\n                retVal = SqliteDriver.GetRelationsFromRelationTempInfo(\n                    relationsTemp,\n                    retVal,\n                    generationOptions\n                );\n            })\n        );\n        return retVal;\n    }\n\n    public async DisconnectFromServer() {\n        this.db.close();\n    }\n\n    public async ConnectToServer(connectionOptons: IConnectionOptions) {\n        await this.UseDB(connectionOptons.databaseName);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    public async CreateDB() {\n        // not supported\n    }\n\n    public async UseDB(dbName: string) {\n        const promise = new Promise<boolean>((resolve, reject) => {\n            this.db = new this.sqlite.Database(dbName, (err) => {\n                if (err) {\n                    TomgUtils.LogError(\n                        \"Error connecting to SQLite database.\",\n                        false,\n                        err.message\n                    );\n                    reject(err);\n                    return;\n                }\n                resolve();\n            });\n        });\n        return promise;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    public async DropDB() {\n        // not supported\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    public async CheckIfDBExists(): Promise<boolean> {\n        return true;\n    }\n\n    public async ExecQuery<T>(sql: string): Promise<T[]> {\n        let ret: T[] = [];\n        const promise = new Promise<boolean>((resolve, reject) => {\n            this.db.serialize(() => {\n                this.db.all(sql, [], (err, row) => {\n                    if (!err) {\n                        ret = row;\n                        resolve(true);\n                    } else {\n                        TomgUtils.LogError(\n                            \"Error executing query on SQLite.\",\n                            false,\n                            err.message\n                        );\n                        reject(err);\n                    }\n                });\n            });\n        });\n        await promise;\n        return ret;\n    }\n\n    private static ReturnDefaultValueFunction(\n        defVal: string | null\n    ): string | undefined {\n        if (!defVal) {\n            return undefined;\n        }\n\n        return `() => \"${defVal}\"`;\n    }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"7c4775b33ffe765e20151cf76f66582014ccad33"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_1up9qyasv9=function(){return actualCoverage;};return actualCoverage;}cov_1up9qyasv9();cov_1up9qyasv9().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const TypeormDriver=(cov_1up9qyasv9().s[1]++,require("typeorm/driver/sqlite/SqliteDriver"));const TomgUtils=(cov_1up9qyasv9().s[2]++,require("../Utils"));const AbstractDriver_1=(cov_1up9qyasv9().s[3]++,require("./AbstractDriver"));class SqliteDriver extends(AbstractDriver_1.default){constructor(){cov_1up9qyasv9().f[0]++;cov_1up9qyasv9().s[4]++;super();cov_1up9qyasv9().s[5]++;this.defaultValues=new TypeormDriver.SqliteDriver({options:{database:"true"}}).dataTypeDefaults;cov_1up9qyasv9().s[6]++;this.standardPort=0;cov_1up9qyasv9().s[7]++;this.standardUser="";cov_1up9qyasv9().s[8]++;this.standardSchema="";cov_1up9qyasv9().s[9]++;this.tablesWithGeneratedPrimaryKey=new Array();cov_1up9qyasv9().s[10]++;try{cov_1up9qyasv9().s[11]++;// eslint-disable-next-line import/no-extraneous-dependencies, global-require, import/no-unresolved
this.sqliteLib=require("sqlite3");cov_1up9qyasv9().s[12]++;this.sqlite=this.sqliteLib.verbose();}catch(error){cov_1up9qyasv9().s[13]++;TomgUtils.LogError("",false,error);cov_1up9qyasv9().s[14]++;throw error;}}async GetAllTables(schema,dbNames,tableNames){cov_1up9qyasv9().f[1]++;const ret=(cov_1up9qyasv9().s[15]++,[]);const tableCondition=(cov_1up9qyasv9().s[16]++,tableNames.length>0?(cov_1up9qyasv9().b[0][0]++,` AND NOT tbl_name IN ('${tableNames.join("','")}')`):(cov_1up9qyasv9().b[0][1]++,""));const rows=(cov_1up9qyasv9().s[17]++,await this.ExecQuery(`SELECT tbl_name, sql FROM "sqlite_master" WHERE "type" = 'table'  AND name NOT LIKE 'sqlite_%' ${tableCondition}`));cov_1up9qyasv9().s[18]++;rows.forEach(val=>{cov_1up9qyasv9().f[2]++;cov_1up9qyasv9().s[19]++;if(val.sql.includes("AUTOINCREMENT")){cov_1up9qyasv9().b[1][0]++;cov_1up9qyasv9().s[20]++;this.tablesWithGeneratedPrimaryKey.push(val.tbl_name);}else{cov_1up9qyasv9().b[1][1]++;}cov_1up9qyasv9().s[21]++;ret.push({columns:[],indices:[],relations:[],relationIds:[],sqlName:val.tbl_name,tscName:val.tbl_name,fileImports:[]});});cov_1up9qyasv9().s[22]++;return ret;}async GetCoulmnsFromEntity(entities){cov_1up9qyasv9().f[3]++;cov_1up9qyasv9().s[23]++;await Promise.all(entities.map(async ent=>{cov_1up9qyasv9().f[4]++;const response=(cov_1up9qyasv9().s[24]++,await this.ExecQuery(`PRAGMA table_info('${ent.tscName}');`));cov_1up9qyasv9().s[25]++;response.forEach(resp=>{cov_1up9qyasv9().f[5]++;const tscName=(cov_1up9qyasv9().s[26]++,resp.name);let tscType=(cov_1up9qyasv9().s[27]++,"");const options=(cov_1up9qyasv9().s[28]++,{name:resp.name});cov_1up9qyasv9().s[29]++;if(resp.notnull===0){cov_1up9qyasv9().b[2][0]++;cov_1up9qyasv9().s[30]++;options.nullable=true;}else{cov_1up9qyasv9().b[2][1]++;}const isPrimary=(cov_1up9qyasv9().s[31]++,resp.pk>0?(cov_1up9qyasv9().b[3][0]++,true):(cov_1up9qyasv9().b[3][1]++,undefined));const defaultValue=(cov_1up9qyasv9().s[32]++,SqliteDriver.ReturnDefaultValueFunction(resp.dflt_value));const columnType=(cov_1up9qyasv9().s[33]++,resp.type.replace(/\([0-9 ,]+\)/g,"").toLowerCase().trim());const generated=(cov_1up9qyasv9().s[34]++,(cov_1up9qyasv9().b[5][0]++,isPrimary)&&(cov_1up9qyasv9().b[5][1]++,this.tablesWithGeneratedPrimaryKey.includes(ent.tscName))?(cov_1up9qyasv9().b[4][0]++,true):(cov_1up9qyasv9().b[4][1]++,undefined));cov_1up9qyasv9().s[35]++;switch(columnType){case"int":cov_1up9qyasv9().b[6][0]++;cov_1up9qyasv9().s[36]++;tscType="number";cov_1up9qyasv9().s[37]++;break;case"integer":cov_1up9qyasv9().b[6][1]++;cov_1up9qyasv9().s[38]++;tscType="number";cov_1up9qyasv9().s[39]++;break;case"int2":cov_1up9qyasv9().b[6][2]++;cov_1up9qyasv9().s[40]++;tscType="number";cov_1up9qyasv9().s[41]++;break;case"int8":cov_1up9qyasv9().b[6][3]++;cov_1up9qyasv9().s[42]++;tscType="number";cov_1up9qyasv9().s[43]++;break;case"tinyint":cov_1up9qyasv9().b[6][4]++;cov_1up9qyasv9().s[44]++;tscType="number";cov_1up9qyasv9().s[45]++;break;case"smallint":cov_1up9qyasv9().b[6][5]++;cov_1up9qyasv9().s[46]++;tscType="number";cov_1up9qyasv9().s[47]++;break;case"mediumint":cov_1up9qyasv9().b[6][6]++;cov_1up9qyasv9().s[48]++;tscType="number";cov_1up9qyasv9().s[49]++;break;case"bigint":cov_1up9qyasv9().b[6][7]++;cov_1up9qyasv9().s[50]++;tscType="string";cov_1up9qyasv9().s[51]++;break;case"unsigned big int":cov_1up9qyasv9().b[6][8]++;cov_1up9qyasv9().s[52]++;tscType="string";cov_1up9qyasv9().s[53]++;break;case"character":cov_1up9qyasv9().b[6][9]++;cov_1up9qyasv9().s[54]++;tscType="string";cov_1up9qyasv9().s[55]++;break;case"varchar":cov_1up9qyasv9().b[6][10]++;cov_1up9qyasv9().s[56]++;tscType="string";cov_1up9qyasv9().s[57]++;break;case"varying character":cov_1up9qyasv9().b[6][11]++;cov_1up9qyasv9().s[58]++;tscType="string";cov_1up9qyasv9().s[59]++;break;case"nchar":cov_1up9qyasv9().b[6][12]++;cov_1up9qyasv9().s[60]++;tscType="string";cov_1up9qyasv9().s[61]++;break;case"native character":cov_1up9qyasv9().b[6][13]++;cov_1up9qyasv9().s[62]++;tscType="string";cov_1up9qyasv9().s[63]++;break;case"nvarchar":cov_1up9qyasv9().b[6][14]++;cov_1up9qyasv9().s[64]++;tscType="string";cov_1up9qyasv9().s[65]++;break;case"text":cov_1up9qyasv9().b[6][15]++;cov_1up9qyasv9().s[66]++;tscType="string";cov_1up9qyasv9().s[67]++;break;case"blob":cov_1up9qyasv9().b[6][16]++;cov_1up9qyasv9().s[68]++;tscType="Buffer";cov_1up9qyasv9().s[69]++;break;case"clob":cov_1up9qyasv9().b[6][17]++;cov_1up9qyasv9().s[70]++;tscType="string";cov_1up9qyasv9().s[71]++;break;case"real":cov_1up9qyasv9().b[6][18]++;cov_1up9qyasv9().s[72]++;tscType="number";cov_1up9qyasv9().s[73]++;break;case"double":cov_1up9qyasv9().b[6][19]++;cov_1up9qyasv9().s[74]++;tscType="number";cov_1up9qyasv9().s[75]++;break;case"double precision":cov_1up9qyasv9().b[6][20]++;cov_1up9qyasv9().s[76]++;tscType="number";cov_1up9qyasv9().s[77]++;break;case"float":cov_1up9qyasv9().b[6][21]++;cov_1up9qyasv9().s[78]++;tscType="number";cov_1up9qyasv9().s[79]++;break;case"numeric":cov_1up9qyasv9().b[6][22]++;cov_1up9qyasv9().s[80]++;tscType="number";cov_1up9qyasv9().s[81]++;break;case"decimal":cov_1up9qyasv9().b[6][23]++;cov_1up9qyasv9().s[82]++;tscType="number";cov_1up9qyasv9().s[83]++;break;case"boolean":cov_1up9qyasv9().b[6][24]++;cov_1up9qyasv9().s[84]++;tscType="boolean";cov_1up9qyasv9().s[85]++;break;case"date":cov_1up9qyasv9().b[6][25]++;cov_1up9qyasv9().s[86]++;tscType="string";cov_1up9qyasv9().s[87]++;break;case"datetime":cov_1up9qyasv9().b[6][26]++;cov_1up9qyasv9().s[88]++;tscType="Date";cov_1up9qyasv9().s[89]++;break;default:cov_1up9qyasv9().b[6][27]++;cov_1up9qyasv9().s[90]++;tscType="NonNullable<unknown>";cov_1up9qyasv9().s[91]++;TomgUtils.LogError(`Unknown column type: ${columnType}  table name: ${ent.tscName} column name: ${resp.name}`);cov_1up9qyasv9().s[92]++;break;}const sqlOptions=(cov_1up9qyasv9().s[93]++,resp.type.match(/\([0-9 ,]+\)/g));cov_1up9qyasv9().s[94]++;if((cov_1up9qyasv9().b[8][0]++,this.ColumnTypesWithPrecision.some(v=>{cov_1up9qyasv9().f[6]++;cov_1up9qyasv9().s[95]++;return v===columnType;}))&&(cov_1up9qyasv9().b[8][1]++,sqlOptions)){cov_1up9qyasv9().b[7][0]++;cov_1up9qyasv9().s[96]++;options.precision=Number.parseInt(sqlOptions[0].substring(1,sqlOptions[0].length-1).split(",")[0],10);cov_1up9qyasv9().s[97]++;options.scale=Number.parseInt(sqlOptions[0].substring(1,sqlOptions[0].length-1).split(",")[1],10);}else{cov_1up9qyasv9().b[7][1]++;}cov_1up9qyasv9().s[98]++;if((cov_1up9qyasv9().b[10][0]++,this.ColumnTypesWithLength.some(v=>{cov_1up9qyasv9().f[7]++;cov_1up9qyasv9().s[99]++;return v===columnType;}))&&(cov_1up9qyasv9().b[10][1]++,sqlOptions)){cov_1up9qyasv9().b[9][0]++;cov_1up9qyasv9().s[100]++;options.length=Number.parseInt(sqlOptions[0].substring(1,sqlOptions[0].length-1),10);}else{cov_1up9qyasv9().b[9][1]++;}cov_1up9qyasv9().s[101]++;if((cov_1up9qyasv9().b[12][0]++,this.ColumnTypesWithWidth.some(v=>{cov_1up9qyasv9().f[8]++;cov_1up9qyasv9().s[102]++;return(cov_1up9qyasv9().b[13][0]++,v===columnType)&&(cov_1up9qyasv9().b[13][1]++,tscType!=="boolean");}))&&(cov_1up9qyasv9().b[12][1]++,sqlOptions)){cov_1up9qyasv9().b[11][0]++;cov_1up9qyasv9().s[103]++;options.width=Number.parseInt(sqlOptions[0].substring(1,sqlOptions[0].length-1),10);}else{cov_1up9qyasv9().b[11][1]++;}cov_1up9qyasv9().s[104]++;ent.columns.push({generated,primary:isPrimary,type:columnType,default:defaultValue,options,tscName,tscType});});}));cov_1up9qyasv9().s[105]++;return entities;}async GetIndexesFromEntity(entities){cov_1up9qyasv9().f[9]++;cov_1up9qyasv9().s[106]++;await Promise.all(entities.map(async ent=>{cov_1up9qyasv9().f[10]++;const response=(cov_1up9qyasv9().s[107]++,await this.ExecQuery(`PRAGMA index_list('${ent.tscName}');`));cov_1up9qyasv9().s[108]++;await Promise.all(response.map(async resp=>{cov_1up9qyasv9().f[11]++;const indexColumnsResponse=(cov_1up9qyasv9().s[109]++,await this.ExecQuery(`PRAGMA index_info('${resp.name}');`));const indexInfo=(cov_1up9qyasv9().s[110]++,{name:resp.name,columns:[],options:{}});cov_1up9qyasv9().s[111]++;if(resp.unique===1){cov_1up9qyasv9().b[14][0]++;cov_1up9qyasv9().s[112]++;indexInfo.options.unique=true;}else{cov_1up9qyasv9().b[14][1]++;}cov_1up9qyasv9().s[113]++;indexColumnsResponse.forEach(record=>{cov_1up9qyasv9().f[12]++;cov_1up9qyasv9().s[114]++;indexInfo.columns.push(record.name);});cov_1up9qyasv9().s[115]++;if((cov_1up9qyasv9().b[16][0]++,indexColumnsResponse.length===1)&&(cov_1up9qyasv9().b[16][1]++,indexInfo.options.unique)){cov_1up9qyasv9().b[15][0]++;cov_1up9qyasv9().s[116]++;ent.columns.filter(v=>{cov_1up9qyasv9().f[13]++;cov_1up9qyasv9().s[117]++;return v.tscName===indexInfo.columns[0];}).forEach(v=>{cov_1up9qyasv9().f[14]++;cov_1up9qyasv9().s[118]++;// eslint-disable-next-line no-param-reassign
v.options.unique=true;});}else{cov_1up9qyasv9().b[15][1]++;}cov_1up9qyasv9().s[119]++;ent.indices.push(indexInfo);}));}));cov_1up9qyasv9().s[120]++;return entities;}async GetRelations(entities,schema,dbNames,generationOptions){cov_1up9qyasv9().f[15]++;let retVal=(cov_1up9qyasv9().s[121]++,entities);cov_1up9qyasv9().s[122]++;await Promise.all(retVal.map(async entity=>{cov_1up9qyasv9().f[16]++;const response=(cov_1up9qyasv9().s[123]++,await this.ExecQuery(`PRAGMA foreign_key_list('${entity.tscName}');`));const relationsTemp=(cov_1up9qyasv9().s[124]++,[]);const relationKeys=(cov_1up9qyasv9().s[125]++,new Set(response.map(v=>{cov_1up9qyasv9().f[17]++;cov_1up9qyasv9().s[126]++;return v.id;})));cov_1up9qyasv9().s[127]++;relationKeys.forEach(relationId=>{cov_1up9qyasv9().f[18]++;const rows=(cov_1up9qyasv9().s[128]++,response.filter(v=>{cov_1up9qyasv9().f[19]++;cov_1up9qyasv9().s[129]++;return v.id===relationId;}));const ownerTable=(cov_1up9qyasv9().s[130]++,entities.find(v=>{cov_1up9qyasv9().f[20]++;cov_1up9qyasv9().s[131]++;return v.sqlName===entity.tscName;}));const relatedTable=(cov_1up9qyasv9().s[132]++,entities.find(v=>{cov_1up9qyasv9().f[21]++;cov_1up9qyasv9().s[133]++;return v.sqlName===rows[0].table;}));cov_1up9qyasv9().s[134]++;if((cov_1up9qyasv9().b[18][0]++,!ownerTable)||(cov_1up9qyasv9().b[18][1]++,!relatedTable)){cov_1up9qyasv9().b[17][0]++;cov_1up9qyasv9().s[135]++;TomgUtils.LogError(`Relation between tables ${entity.tscName} and ${rows[0].table} wasn't found in entity model.`,true);cov_1up9qyasv9().s[136]++;return;}else{cov_1up9qyasv9().b[17][1]++;}const internal=(cov_1up9qyasv9().s[137]++,{ownerColumns:[],relatedColumns:[],ownerTable,relatedTable});cov_1up9qyasv9().s[138]++;if(rows[0].on_delete!=="NO ACTION"){cov_1up9qyasv9().b[19][0]++;cov_1up9qyasv9().s[139]++;internal.onDelete=rows[0].on_delete;}else{cov_1up9qyasv9().b[19][1]++;}cov_1up9qyasv9().s[140]++;if(rows[0].on_update!=="NO ACTION"){cov_1up9qyasv9().b[20][0]++;cov_1up9qyasv9().s[141]++;internal.onUpdate=rows[0].on_update;}else{cov_1up9qyasv9().b[20][1]++;}cov_1up9qyasv9().s[142]++;rows.forEach(row=>{cov_1up9qyasv9().f[22]++;cov_1up9qyasv9().s[143]++;internal.ownerColumns.push(row.from);cov_1up9qyasv9().s[144]++;internal.relatedColumns.push(row.to);});cov_1up9qyasv9().s[145]++;relationsTemp.push(internal);});cov_1up9qyasv9().s[146]++;retVal=SqliteDriver.GetRelationsFromRelationTempInfo(relationsTemp,retVal,generationOptions);}));cov_1up9qyasv9().s[147]++;return retVal;}async DisconnectFromServer(){cov_1up9qyasv9().f[23]++;cov_1up9qyasv9().s[148]++;this.db.close();}async ConnectToServer(connectionOptons){cov_1up9qyasv9().f[24]++;cov_1up9qyasv9().s[149]++;await this.UseDB(connectionOptons.databaseName);}// eslint-disable-next-line class-methods-use-this
async CreateDB(){// not supported
cov_1up9qyasv9().f[25]++;}async UseDB(dbName){cov_1up9qyasv9().f[26]++;const promise=(cov_1up9qyasv9().s[150]++,new Promise((resolve,reject)=>{cov_1up9qyasv9().f[27]++;cov_1up9qyasv9().s[151]++;this.db=new this.sqlite.Database(dbName,err=>{cov_1up9qyasv9().f[28]++;cov_1up9qyasv9().s[152]++;if(err){cov_1up9qyasv9().b[21][0]++;cov_1up9qyasv9().s[153]++;TomgUtils.LogError("Error connecting to SQLite database.",false,err.message);cov_1up9qyasv9().s[154]++;reject(err);cov_1up9qyasv9().s[155]++;return;}else{cov_1up9qyasv9().b[21][1]++;}cov_1up9qyasv9().s[156]++;resolve();});}));cov_1up9qyasv9().s[157]++;return promise;}// eslint-disable-next-line class-methods-use-this
async DropDB(){cov_1up9qyasv9().f[29]++;}// not supported
// eslint-disable-next-line class-methods-use-this
async CheckIfDBExists(){cov_1up9qyasv9().f[30]++;cov_1up9qyasv9().s[158]++;return true;}async ExecQuery(sql){cov_1up9qyasv9().f[31]++;let ret=(cov_1up9qyasv9().s[159]++,[]);const promise=(cov_1up9qyasv9().s[160]++,new Promise((resolve,reject)=>{cov_1up9qyasv9().f[32]++;cov_1up9qyasv9().s[161]++;this.db.serialize(()=>{cov_1up9qyasv9().f[33]++;cov_1up9qyasv9().s[162]++;this.db.all(sql,[],(err,row)=>{cov_1up9qyasv9().f[34]++;cov_1up9qyasv9().s[163]++;if(!err){cov_1up9qyasv9().b[22][0]++;cov_1up9qyasv9().s[164]++;ret=row;cov_1up9qyasv9().s[165]++;resolve(true);}else{cov_1up9qyasv9().b[22][1]++;cov_1up9qyasv9().s[166]++;TomgUtils.LogError("Error executing query on SQLite.",false,err.message);cov_1up9qyasv9().s[167]++;reject(err);}});});}));cov_1up9qyasv9().s[168]++;await promise;cov_1up9qyasv9().s[169]++;return ret;}static ReturnDefaultValueFunction(defVal){cov_1up9qyasv9().f[35]++;cov_1up9qyasv9().s[170]++;if(!defVal){cov_1up9qyasv9().b[23][0]++;cov_1up9qyasv9().s[171]++;return undefined;}else{cov_1up9qyasv9().b[23][1]++;}cov_1up9qyasv9().s[172]++;return`() => "${defVal}"`;}}cov_1up9qyasv9().s[173]++;exports.default=SqliteDriver;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,