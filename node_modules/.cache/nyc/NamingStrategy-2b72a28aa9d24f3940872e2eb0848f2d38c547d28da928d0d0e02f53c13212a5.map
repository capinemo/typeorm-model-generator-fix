{"version":3,"file":"/home/nemo/work/github/typeorm-model-generator/src/NamingStrategy.ts","sources":["/home/nemo/work/github/typeorm-model-generator/src/NamingStrategy.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { plural } from \"pluralize\";\nimport * as changeCase from \"change-case\";\nimport { Relation } from \"./models/Relation\";\nimport { RelationId } from \"./models/RelationId\";\nimport { Entity } from \"./models/Entity\";\nimport { Column } from \"./models/Column\";\n\nlet pluralize: boolean;\n\nexport function enablePluralization(value: boolean) {\n    pluralize = value;\n}\n\nexport function relationIdName(\n    relationId: RelationId,\n    relation: Relation,\n    owner?: Entity\n): string {\n    const columnOldName = relationId.fieldName;\n\n    const isRelationToMany =\n        relation.relationType === \"OneToMany\" ||\n        relation.relationType === \"ManyToMany\";\n    let newColumnName = changeCase.camelCase(\n        columnOldName.replace(/[0-9]$/, \"\")\n    );\n\n    if (!Number.isNaN(parseInt(newColumnName[newColumnName.length - 1], 10))) {\n        newColumnName = newColumnName.substring(0, newColumnName.length - 1);\n    }\n    if (!Number.isNaN(parseInt(newColumnName[newColumnName.length - 1], 10))) {\n        newColumnName = newColumnName.substring(0, newColumnName.length - 1);\n    }\n    if (isRelationToMany && pluralize) {\n        newColumnName = plural(newColumnName);\n    }\n\n    return newColumnName;\n}\n\nexport function relationName(relation: Relation, owner?: Entity): string {\n    const columnOldName = relation.fieldName;\n\n    const isRelationToMany =\n        relation.relationType === \"OneToMany\" ||\n        relation.relationType === \"ManyToMany\";\n    let newColumnName = changeCase.camelCase(\n        columnOldName.replace(/[0-9]$/, \"\")\n    );\n\n    if (\n        newColumnName.toLowerCase().endsWith(\"id\") &&\n        !newColumnName.toLowerCase().endsWith(\"guid\")\n    ) {\n        newColumnName = newColumnName.substring(\n            0,\n            newColumnName.toLowerCase().lastIndexOf(\"id\")\n        );\n    }\n    if (!Number.isNaN(parseInt(newColumnName[newColumnName.length - 1], 10))) {\n        newColumnName = newColumnName.substring(0, newColumnName.length - 1);\n    }\n    if (!Number.isNaN(parseInt(newColumnName[newColumnName.length - 1], 10))) {\n        newColumnName = newColumnName.substring(0, newColumnName.length - 1);\n    }\n    if (isRelationToMany && pluralize) {\n        newColumnName = plural(newColumnName);\n    }\n    return newColumnName;\n}\n\nexport function entityName(oldEntityName: string, entity?: Entity): string {\n    return oldEntityName;\n}\n\nexport function columnName(oldColumnName: string, column?: Column): string {\n    return oldColumnName;\n}\n"]}