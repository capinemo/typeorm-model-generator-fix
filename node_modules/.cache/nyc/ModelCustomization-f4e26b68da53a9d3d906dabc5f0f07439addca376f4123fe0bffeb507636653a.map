{"version":3,"file":"/home/nemo/work/github/typeorm-model-generator/src/ModelCustomization.ts","sources":["/home/nemo/work/github/typeorm-model-generator/src/ModelCustomization.ts"],"names":[],"mappings":"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","sourcesContent":["import { DataTypeDefaults } from \"typeorm/driver/types/DataTypeDefaults\";\nimport { DefaultNamingStrategy } from \"typeorm/naming-strategy/DefaultNamingStrategy\";\nimport { Entity } from \"./models/Entity\";\nimport IGenerationOptions from \"./IGenerationOptions\";\nimport * as NamingStrategy from \"./NamingStrategy\";\nimport * as TomgUtils from \"./Utils\";\n\nexport default function modelCustomizationPhase(\n    dbModel: Entity[],\n    generationOptions: IGenerationOptions,\n    defaultValues: DataTypeDefaults\n): Entity[] {\n    const namingStrategy: typeof NamingStrategy = {\n        enablePluralization: NamingStrategy.enablePluralization,\n        columnName: NamingStrategy.columnName,\n        entityName: NamingStrategy.entityName,\n        relationIdName: NamingStrategy.relationIdName,\n        relationName: NamingStrategy.relationName,\n    };\n    if (\n        generationOptions.customNamingStrategyPath &&\n        generationOptions.customNamingStrategyPath !== \"\"\n    ) {\n        // TODO: change form of logging\n        const req = TomgUtils.requireLocalFile(\n            generationOptions.customNamingStrategyPath\n        ) as Partial<typeof NamingStrategy>;\n        if (req.columnName) {\n            console.log(\n                `[${new Date().toLocaleTimeString()}] Using custom naming strategy for column names.`\n            );\n            namingStrategy.columnName = req.columnName;\n        } else {\n            console.log(\n                `[${new Date().toLocaleTimeString()}] Using standard naming strategy for column names.`\n            );\n        }\n        if (req.entityName) {\n            console.log(\n                `[${new Date().toLocaleTimeString()}] Using custom naming strategy for entity names.`\n            );\n            namingStrategy.entityName = req.entityName;\n        } else {\n            console.log(\n                `[${new Date().toLocaleTimeString()}] Using standard naming strategy for entity names.`\n            );\n        }\n        if (req.relationIdName) {\n            console.log(\n                `[${new Date().toLocaleTimeString()}] Using custom naming strategy for relationId field names.`\n            );\n            namingStrategy.relationIdName = req.relationIdName;\n        } else {\n            console.log(\n                `[${new Date().toLocaleTimeString()}] Using standard naming strategy for relationId field names.`\n            );\n        }\n        if (req.relationName) {\n            console.log(\n                `[${new Date().toLocaleTimeString()}] Using custom naming strategy for relation field names.`\n            );\n            namingStrategy.relationName = req.relationName;\n        } else {\n            console.log(\n                `[${new Date().toLocaleTimeString()}] Using standard naming strategy for relation field names.`\n            );\n        }\n        if (req.enablePluralization) {\n            console.log(\n                `[${new Date().toLocaleTimeString()}] Using custom pluralization method for OneToMany, ManyToMany relation field names.`\n            );\n            namingStrategy.enablePluralization = req.enablePluralization;\n        } else {\n            console.log(\n                `[${new Date().toLocaleTimeString()}] Using custom pluralization method for OneToMany, ManyToMany relation field names.`\n            );\n        }\n    }\n    namingStrategy.enablePluralization(generationOptions.pluralizeNames);\n    let retVal = removeIndicesGeneratedByTypeorm(dbModel);\n    retVal = removeColumnsInRelation(dbModel);\n    retVal = applyNamingStrategy(namingStrategy, dbModel);\n    retVal = addImportsAndGenerationOptions(retVal, generationOptions);\n    retVal = removeColumnDefaultProperties(retVal, defaultValues);\n    return retVal;\n}\nfunction removeIndicesGeneratedByTypeorm(dbModel: Entity[]): Entity[] {\n    // TODO: Support typeorm CustomNamingStrategy\n    const namingStrategy = new DefaultNamingStrategy();\n    dbModel.forEach((entity) => {\n        entity.indices = entity.indices.filter(\n            (v) =>\n                !(\n                    v.name.startsWith(`sqlite_autoindex_`) ||\n                    (v.primary && v.name === \"PRIMARY\")\n                )\n        );\n        const primaryColumns = entity.columns\n            .filter((v) => v.primary)\n            .map((v) => v.tscName);\n\n        const ormTableName = entity?.schema\n            ? `${entity.schema}.${entity.tscName}`\n            : entity.tscName;\n\n        entity.indices = entity.indices.filter(\n            (v) =>\n                !(\n                    v.primary &&\n                    v.name ===\n                        namingStrategy.primaryKeyName(\n                            ormTableName,\n                            primaryColumns\n                        )\n                )\n        );\n        entity.relations\n            .filter((v) => v.joinColumnOptions)\n            .forEach((rel) => {\n                const columnNames = rel.joinColumnOptions!.map((v) => v.name);\n                const idxName = namingStrategy.relationConstraintName(\n                    ormTableName,\n                    columnNames\n                );\n                const fkName = namingStrategy.foreignKeyName(\n                    ormTableName,\n                    columnNames\n                );\n                entity.indices = entity.indices.filter(\n                    (v) => v.name !== idxName && v.name !== fkName\n                );\n            });\n    });\n\n    return dbModel;\n}\nfunction removeColumnsInRelation(dbModel: Entity[]): Entity[] {\n    dbModel.forEach((entity) => {\n        entity.columns = entity.columns.filter(\n            (col) =>\n                !col.isUsedInRelationAsOwner ||\n                col.isUsedInRelationAsReferenced ||\n                entity.indices.some((idx) =>\n                    idx.columns.some((v) => v === col.tscName)\n                ) ||\n                col.primary\n        );\n    });\n    return dbModel;\n}\nfunction removeColumnDefaultProperties(\n    dbModel: Entity[],\n    defaultValues: DataTypeDefaults\n): Entity[] {\n    if (!defaultValues) {\n        return dbModel;\n    }\n    dbModel.forEach((entity) => {\n        entity.columns.forEach((column) => {\n            const defVal = defaultValues[column.tscType];\n            if (defVal) {\n                if (\n                    column.options.length &&\n                    defVal.length &&\n                    column.options.length === defVal.length\n                ) {\n                    column.options.length = undefined;\n                }\n                if (\n                    column.options.precision &&\n                    defVal.precision &&\n                    column.options.precision === defVal.precision &&\n                    column.options.scale &&\n                    defVal.scale &&\n                    column.options.scale === defVal.scale\n                ) {\n                    column.options.precision = undefined;\n                    column.options.scale = undefined;\n                }\n                if (\n                    column.options.width &&\n                    defVal.width &&\n                    column.options.width === defVal.width\n                ) {\n                    column.options.width = undefined;\n                }\n            }\n        });\n    });\n    return dbModel;\n}\n\nfunction findFileImports(dbModel: Entity[]) {\n    dbModel.forEach((entity) => {\n        entity.relations.forEach((relation) => {\n            if (\n                relation.relatedTable !== entity.tscName &&\n                !entity.fileImports.some((v) => v === relation.relatedTable)\n            ) {\n                entity.fileImports.push(relation.relatedTable);\n            }\n        });\n    });\n    return dbModel;\n}\n\nfunction addImportsAndGenerationOptions(\n    dbModel: Entity[],\n    generationOptions: IGenerationOptions\n): Entity[] {\n    dbModel = findFileImports(dbModel);\n    dbModel.forEach((entity) => {\n        entity.relations.forEach((relation) => {\n            if (generationOptions.lazy) {\n                if (!relation.relationOptions) {\n                    relation.relationOptions = {};\n                }\n                relation.relationOptions.lazy = true;\n            }\n        });\n        if (generationOptions.skipSchema) {\n            entity.schema = undefined;\n            entity.database = undefined;\n        }\n        if (generationOptions.activeRecord) {\n            entity.activeRecord = true;\n        }\n        if (generationOptions.generateConstructor) {\n            entity.generateConstructor = true;\n        }\n    });\n    return dbModel;\n}\n\nfunction applyNamingStrategy(\n    namingStrategy: typeof NamingStrategy,\n    dbModel: Entity[]\n): Entity[] {\n    let retVal = changeRelationNames(dbModel);\n    retVal = changeRelationIdNames(retVal);\n    retVal = changeEntityNames(retVal);\n    retVal = changeColumnNames(retVal);\n    return retVal;\n\n    function changeRelationIdNames(model: Entity[]): Entity[] {\n        model.forEach((entity) => {\n            entity.relationIds.forEach((relationId) => {\n                const oldName = relationId.fieldName;\n                const relation = entity.relations.find(\n                    (v) => v.fieldName === relationId.relationField\n                )!;\n                let newName = namingStrategy.relationIdName(\n                    relationId,\n                    relation,\n                    entity\n                );\n                newName = TomgUtils.findNameForNewField(\n                    newName,\n                    entity,\n                    oldName\n                );\n                entity.indices.forEach((index) => {\n                    index.columns = index.columns.map((column2) =>\n                        column2 === oldName ? newName : column2\n                    );\n                });\n\n                relationId.fieldName = newName;\n            });\n        });\n        return dbModel;\n    }\n\n    function changeRelationNames(model: Entity[]): Entity[] {\n        model.forEach((entity) => {\n            entity.relations.forEach((relation) => {\n                const oldName = relation.fieldName;\n                let newName = namingStrategy.relationName(relation, entity);\n                newName = TomgUtils.findNameForNewField(\n                    newName,\n                    entity,\n                    oldName\n                );\n\n                const relatedEntity = model.find(\n                    (v) => v.tscName === relation.relatedTable\n                )!;\n                const relation2 = relatedEntity.relations.find(\n                    (v) => v.fieldName === relation.relatedField\n                )!;\n\n                entity.relationIds\n                    .filter((v) => v.relationField === oldName)\n                    .forEach((v) => {\n                        v.relationField = newName;\n                    });\n\n                relation.fieldName = newName;\n                relation2.relatedField = newName;\n\n                if (relation.relationOptions) {\n                    entity.indices.forEach((ind) => {\n                        ind.columns.map((column2) =>\n                            column2 === oldName ? newName : column2\n                        );\n                    });\n                }\n            });\n        });\n        return dbModel;\n    }\n\n    function changeColumnNames(model: Entity[]): Entity[] {\n        model.forEach((entity) => {\n            entity.columns.forEach((column) => {\n                const oldName = column.tscName;\n                let newName = namingStrategy.columnName(column.tscName, column);\n                newName = TomgUtils.findNameForNewField(\n                    newName,\n                    entity,\n                    oldName\n                );\n                entity.indices.forEach((index) => {\n                    index.columns = index.columns.map((column2) =>\n                        column2 === oldName ? newName : column2\n                    );\n                });\n\n                column.tscName = newName;\n            });\n        });\n        return model;\n    }\n    function changeEntityNames(entities: Entity[]): Entity[] {\n        entities.forEach((entity) => {\n            const newName = namingStrategy.entityName(entity.tscName, entity);\n            entities.forEach((entity2) => {\n                entity2.relations.forEach((relation) => {\n                    if (relation.relatedTable === entity.tscName) {\n                        relation.relatedTable = newName;\n                    }\n                });\n            });\n            entity.tscName = newName;\n        });\n        return entities;\n    }\n}\n"]}