{"version":3,"file":"/home/nemo/work/github/typeorm-model-generator/src/drivers/AbstractDriver.ts","sources":["/home/nemo/work/github/typeorm-model-generator/src/drivers/AbstractDriver.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    WithLengthColumnType,\n    WithPrecisionColumnType,\n    WithWidthColumnType,\n} from \"typeorm/driver/types/ColumnTypes\";\nimport { JoinColumnOptions, RelationOptions } from \"typeorm\";\nimport { DataTypeDefaults } from \"typeorm/driver/types/DataTypeDefaults\";\nimport * as TomgUtils from \"../Utils\";\nimport IConnectionOptions from \"../IConnectionOptions\";\nimport { Entity } from \"../models/Entity\";\nimport { RelationInternal } from \"../models/RelationInternal\";\nimport { Relation } from \"../models/Relation\";\nimport IGenerationOptions from \"../IGenerationOptions\";\nimport { Column } from \"../models/Column\";\n\nexport default abstract class AbstractDriver {\n    public abstract standardPort: number;\n\n    public abstract standardSchema: string;\n\n    public abstract standardUser: string;\n\n    public abstract defaultValues: DataTypeDefaults;\n\n    public ColumnTypesWithWidth: WithWidthColumnType[] = [\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"int\",\n        \"bigint\",\n    ];\n\n    public ColumnTypesWithPrecision: WithPrecisionColumnType[] = [\n        \"float\",\n        \"double\",\n        \"dec\",\n        \"decimal\",\n        \"numeric\",\n        \"real\",\n        \"double precision\",\n        \"number\",\n        \"datetime\",\n        \"datetime2\",\n        \"datetimeoffset\",\n        \"time\",\n        \"time with time zone\",\n        \"time without time zone\",\n        \"timestamp\",\n        \"timestamp without time zone\",\n        \"timestamp with time zone\",\n        \"timestamp with local time zone\",\n    ];\n\n    public ColumnTypesWithLength: WithLengthColumnType[] = [\n        \"character varying\",\n        \"varying character\",\n        \"nvarchar\",\n        \"character\",\n        \"native character\",\n        \"varchar\",\n        \"char\",\n        \"nchar\",\n        \"varchar2\",\n        \"nvarchar2\",\n        \"raw\",\n        \"binary\",\n        \"varbinary\",\n    ];\n\n    public abstract GetAllTablesQuery: (\n        schema: string,\n        dbNames: string,\n        tableNames: string[]\n    ) => Promise<\n        {\n            TABLE_SCHEMA: string;\n            TABLE_NAME: string;\n            DB_NAME: string;\n        }[]\n    >;\n\n    public static FindManyToManyRelations(dbModel: Entity[]) {\n        let retVal = dbModel;\n        const manyToManyEntities = retVal.filter(\n            (entity) =>\n                entity.relations.length === 2 &&\n                entity.relations.every(\n                    (v) =>\n                        v.joinColumnOptions && v.relationType !== \"ManyToMany\"\n                ) &&\n                entity.relations[0].relatedTable !==\n                    entity.relations[1].relatedTable &&\n                entity.relations[0].joinColumnOptions!.length ===\n                    entity.relations[1].joinColumnOptions!.length &&\n                entity.columns.length ===\n                    entity.columns.filter((c) => c.primary).length &&\n                entity.columns\n                    .map((v) => v.tscName)\n                    .filter(\n                        (v) =>\n                            !entity.relations[0]\n                                .joinColumnOptions!.map((x) => x.name)\n                                .some((jc) => jc === v) &&\n                            !entity.relations[1]\n                                .joinColumnOptions!.map((x) => x.name)\n                                .some((jc) => jc === v)\n                    ).length === 0\n        );\n        manyToManyEntities.forEach((junctionEntity) => {\n            const firstEntity = dbModel.find(\n                (v) => v.tscName === junctionEntity.relations[0].relatedTable\n            )!;\n            const secondEntity = dbModel.find(\n                (v) => v.tscName === junctionEntity.relations[1].relatedTable\n            )!;\n\n            const firstRelation = firstEntity.relations.find(\n                (v) => v.relatedTable === junctionEntity.tscName\n            )!;\n            const secondRelation = secondEntity.relations.find(\n                (v) => v.relatedTable === junctionEntity.tscName\n            )!;\n\n            firstRelation.relationType = \"ManyToMany\";\n            secondRelation.relationType = \"ManyToMany\";\n            firstRelation.relatedTable = secondEntity.tscName;\n            secondRelation.relatedTable = firstEntity.tscName;\n\n            firstRelation.fieldName = TomgUtils.findNameForNewField(\n                secondEntity.tscName,\n                firstEntity\n            );\n            secondRelation.fieldName = TomgUtils.findNameForNewField(\n                firstEntity.tscName,\n                secondEntity\n            );\n            firstRelation.relatedField = secondRelation.fieldName;\n            secondRelation.relatedField = firstRelation.fieldName;\n\n            firstRelation.joinTableOptions = {\n                name: junctionEntity.sqlName,\n                joinColumns: junctionEntity.relations[0].joinColumnOptions!.map(\n                    (v, i) => {\n                        return {\n                            referencedColumnName: v.referencedColumnName,\n                            name: junctionEntity.relations[0]\n                                .joinColumnOptions![i].name,\n                        };\n                    }\n                ),\n                inverseJoinColumns: junctionEntity.relations[1].joinColumnOptions!.map(\n                    (v, i) => {\n                        return {\n                            referencedColumnName: v.referencedColumnName,\n                            name: junctionEntity.relations[1]\n                                .joinColumnOptions![i].name,\n                        };\n                    }\n                ),\n            };\n            if (junctionEntity.database) {\n                firstRelation.joinTableOptions.database =\n                    junctionEntity.database;\n            }\n            if (junctionEntity.schema) {\n                firstRelation.joinTableOptions.schema = junctionEntity.schema;\n            }\n\n            firstRelation.relationOptions = undefined;\n            secondRelation.relationOptions = undefined;\n            firstRelation.joinColumnOptions = undefined;\n            secondRelation.joinColumnOptions = undefined;\n            retVal = retVal.filter((ent) => {\n                return ent.tscName !== junctionEntity.tscName;\n            });\n        });\n        return retVal;\n    }\n\n    public async GetDataFromServer(\n        connectionOptions: IConnectionOptions,\n        generationOptions: IGenerationOptions\n    ): Promise<Entity[]> {\n        let dbModel = [] as Entity[];\n        await this.ConnectToServer(connectionOptions);\n        const sqlEscapedSchema = AbstractDriver.escapeCommaSeparatedList(\n            connectionOptions.schemaName\n        );\n        dbModel = await this.GetAllTables(\n            sqlEscapedSchema,\n            connectionOptions.databaseName,\n            connectionOptions.skipTables\n        );\n        await this.GetCoulmnsFromEntity(\n            dbModel,\n            sqlEscapedSchema,\n            connectionOptions.databaseName\n        );\n        await this.GetIndexesFromEntity(\n            dbModel,\n            sqlEscapedSchema,\n            connectionOptions.databaseName\n        );\n        AbstractDriver.FindPrimaryColumnsFromIndexes(dbModel);\n        dbModel = await this.GetRelations(\n            dbModel,\n            sqlEscapedSchema,\n            connectionOptions.databaseName,\n            generationOptions\n        );\n        await this.DisconnectFromServer();\n        dbModel = AbstractDriver.FindManyToManyRelations(dbModel);\n        return dbModel;\n    }\n\n    public abstract async ConnectToServer(connectionOptons: IConnectionOptions);\n\n    public async GetAllTables(\n        schema: string,\n        dbNames: string,\n        tableNames: string[]\n    ): Promise<Entity[]> {\n        const response = await this.GetAllTablesQuery(\n            schema,\n            dbNames,\n            tableNames\n        );\n        const ret: Entity[] = [] as Entity[];\n        response.forEach((val) => {\n            ret.push({\n                columns: [],\n                indices: [],\n                relations: [],\n                relationIds: [],\n                sqlName: val.TABLE_NAME,\n                tscName: val.TABLE_NAME,\n                database: dbNames.includes(\",\") ? val.DB_NAME : \"\",\n                schema: val.TABLE_SCHEMA,\n                fileImports: [],\n            });\n        });\n        return ret;\n    }\n\n    public static GetRelationsFromRelationTempInfo(\n        relationsTemp: RelationInternal[],\n        entities: Entity[],\n        generationOptions: IGenerationOptions\n    ) {\n        relationsTemp.forEach((relationTmp) => {\n            const ownerEntity = entities.find(\n                (entity) => entity.tscName === relationTmp.ownerTable.tscName\n            );\n            if (!ownerEntity) {\n                TomgUtils.LogError(\n                    `Relation between tables ${relationTmp.ownerTable.sqlName} and ${relationTmp.relatedTable.sqlName} didn't found entity model ${relationTmp.ownerTable.sqlName}.`\n                );\n                return;\n            }\n            const referencedEntity = entities.find(\n                (entity) => entity.tscName === relationTmp.relatedTable.tscName\n            );\n            if (!referencedEntity) {\n                TomgUtils.LogError(\n                    `Relation between tables ${relationTmp.ownerTable.sqlName} and ${relationTmp.relatedTable.sqlName} didn't found entity model ${relationTmp.relatedTable.sqlName}.`\n                );\n                return;\n            }\n\n            const ownerColumns: Column[] = [];\n            const relatedColumns: Column[] = [];\n            for (\n                let relationColumnIndex = 0;\n                relationColumnIndex < relationTmp.ownerColumns.length;\n                relationColumnIndex++\n            ) {\n                const ownerColumn = ownerEntity.columns.find(\n                    (column) =>\n                        column.tscName ===\n                        relationTmp.ownerColumns[relationColumnIndex]\n                );\n                if (!ownerColumn) {\n                    TomgUtils.LogError(\n                        `Relation between tables ${relationTmp.ownerTable.sqlName} and ${relationTmp.relatedTable.sqlName} didn't found entity column ${relationTmp.ownerTable.sqlName}.${ownerColumn}.`\n                    );\n                    return;\n                }\n                const relatedColumn = referencedEntity.columns.find(\n                    (column) =>\n                        column.tscName ===\n                        relationTmp.relatedColumns[relationColumnIndex]\n                );\n                if (!relatedColumn) {\n                    TomgUtils.LogError(\n                        `Relation between tables ${relationTmp.ownerTable.sqlName} and ${relationTmp.relatedTable.sqlName} didn't found entity column ${relationTmp.relatedTable.sqlName}.${relatedColumn}.`\n                    );\n                    return;\n                }\n                ownerColumns.push(ownerColumn);\n                relatedColumns.push(relatedColumn);\n            }\n            let isOneToMany: boolean;\n            isOneToMany = false;\n            const index = ownerEntity.indices.find(\n                (ind) =>\n                    ind.options.unique &&\n                    ind.columns.length === ownerColumns.length &&\n                    ownerColumns.every((ownerColumn) =>\n                        ind.columns.some((col) => col === ownerColumn.tscName)\n                    )\n            );\n            isOneToMany = !index;\n\n            ownerColumns.forEach((column) => {\n                column.isUsedInRelationAsOwner = true;\n            });\n            relatedColumns.forEach((column) => {\n                column.isUsedInRelationAsReferenced = true;\n            });\n            let fieldName = \"\";\n            if (ownerColumns.length === 1) {\n                fieldName = TomgUtils.findNameForNewField(\n                    ownerColumns[0].tscName,\n                    ownerEntity\n                );\n            } else {\n                fieldName = TomgUtils.findNameForNewField(\n                    relationTmp.relatedTable.tscName,\n                    ownerEntity\n                );\n            }\n\n            const relationOptions: RelationOptions = {\n                onDelete: relationTmp.onDelete,\n                onUpdate: relationTmp.onUpdate,\n            };\n\n            const ownerRelation: Relation = {\n                fieldName,\n                relatedField: TomgUtils.findNameForNewField(\n                    relationTmp.ownerTable.tscName,\n                    relationTmp.relatedTable\n                ),\n                joinColumnOptions: relationTmp.ownerColumns.map((v, idx) => {\n                    const retVal: Required<JoinColumnOptions> = {\n                        name: v,\n                        referencedColumnName: relationTmp.relatedColumns[idx],\n                    };\n                    return retVal;\n                }),\n                relatedTable: relationTmp.relatedTable.tscName,\n                relationType: isOneToMany ? \"ManyToOne\" : \"OneToOne\",\n            };\n            if (JSON.stringify(relationOptions) !== \"{}\") {\n                ownerRelation.relationOptions = relationOptions;\n            }\n            const relatedRelation: Relation = {\n                fieldName: ownerRelation.relatedField,\n                relatedField: ownerRelation.fieldName,\n                relatedTable: relationTmp.ownerTable.tscName,\n                relationType: isOneToMany ? \"OneToMany\" : \"OneToOne\",\n            };\n\n            ownerEntity.relations.push(ownerRelation);\n            relationTmp.relatedTable.relations.push(relatedRelation);\n\n            if (generationOptions.relationIds && ownerColumns.length === 1) {\n                let relationIdFieldName = \"\";\n                relationIdFieldName = TomgUtils.findNameForNewField(\n                    ownerColumns[0].tscName,\n                    ownerEntity\n                );\n\n                let fieldType = \"\";\n                if (isOneToMany) {\n                    fieldType = `${ownerColumns[0].tscType}[]`;\n                } else {\n                    fieldType = ownerColumns[0].tscType;\n                    if (ownerColumns[0].options.nullable) {\n                        fieldType += \" | null\";\n                    }\n                }\n\n                ownerEntity.relationIds.push({\n                    fieldName: relationIdFieldName,\n                    fieldType,\n                    relationField: ownerRelation.fieldName,\n                });\n                // TODO: RelationId on ManyToMany\n            }\n        });\n        return entities;\n    }\n\n    public abstract async GetCoulmnsFromEntity(\n        entities: Entity[],\n        schema: string,\n        dbNames: string\n    ): Promise<Entity[]>;\n\n    public abstract async GetIndexesFromEntity(\n        entities: Entity[],\n        schema: string,\n        dbNames: string\n    ): Promise<Entity[]>;\n\n    public abstract async GetRelations(\n        entities: Entity[],\n        schema: string,\n        dbNames: string,\n        generationOptions: IGenerationOptions\n    ): Promise<Entity[]>;\n\n    public static FindPrimaryColumnsFromIndexes(dbModel: Entity[]) {\n        dbModel.forEach((entity) => {\n            const primaryIndex = entity.indices.find((v) => v.primary);\n            entity.columns\n                .filter(\n                    (col) =>\n                        primaryIndex &&\n                        primaryIndex.columns.some(\n                            (cIndex) => cIndex === col.tscName\n                        )\n                )\n                .forEach((col) => {\n                    // eslint-disable-next-line no-param-reassign\n                    col.primary = true;\n                    if (\n                        primaryIndex!.columns.length === 1 &&\n                        col.options.unique\n                    ) {\n                        delete col.options.unique;\n                    }\n                });\n            if (\n                !entity.columns.some((v) => {\n                    return !!v.primary;\n                })\n            ) {\n                TomgUtils.LogError(`Table ${entity.tscName} has no PK.`, false);\n            }\n        });\n    }\n\n    public abstract async DisconnectFromServer();\n\n    public abstract async CreateDB(dbName: string);\n\n    public abstract async DropDB(dbName: string);\n\n    public abstract async UseDB(dbName: string);\n\n    public abstract async CheckIfDBExists(dbName: string): Promise<boolean>;\n\n    // TODO: change name\n    protected static escapeCommaSeparatedList(commaSeparatedList: string) {\n        return `'${commaSeparatedList.split(\",\").join(\"','\")}'`;\n    }\n}\n"]}