"use strict";function cov_1jfepr207i(){var path="/home/nemo/work/github/typeorm-model-generator/src/drivers/MssqlDriver.ts";var hash="038a818f455adff581febfa0f30837195dab4e2f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/nemo/work/github/typeorm-model-generator/src/drivers/MssqlDriver.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:22},end:{line:3,column:73}},"2":{start:{line:4,column:18},end:{line:4,column:37}},"3":{start:{line:5,column:25},end:{line:5,column:52}},"4":{start:{line:8,column:8},end:{line:8,column:16}},"5":{start:{line:9,column:8},end:{line:11,column:28}},"6":{start:{line:12,column:8},end:{line:12,column:33}},"7":{start:{line:13,column:8},end:{line:13,column:36}},"8":{start:{line:14,column:8},end:{line:14,column:33}},"9":{start:{line:15,column:8},end:{line:23,column:10}},"10":{start:{line:16,column:28},end:{line:16,column:67}},"11":{start:{line:17,column:35},end:{line:19,column:20}},"12":{start:{line:20,column:29},end:{line:21,column:164}},"13":{start:{line:22,column:12},end:{line:22,column:28}},"14":{start:{line:24,column:8},end:{line:31,column:9}},"15":{start:{line:26,column:12},end:{line:26,column:42}},"16":{start:{line:29,column:12},end:{line:29,column:49}},"17":{start:{line:30,column:12},end:{line:30,column:24}},"18":{start:{line:34,column:24},end:{line:34,column:63}},"19":{start:{line:35,column:25},end:{line:49,column:51}},"20":{start:{line:50,column:8},end:{line:197,column:11}},"21":{start:{line:51,column:12},end:{line:196,column:15}},"22":{start:{line:53,column:16},end:{line:54,column:59}},"23":{start:{line:57,column:32},end:{line:57,column:48}},"24":{start:{line:58,column:32},end:{line:60,column:17}},"25":{start:{line:61,column:16},end:{line:62,column:44}},"26":{start:{line:62,column:20},end:{line:62,column:44}},"27":{start:{line:63,column:16},end:{line:64,column:42}},"28":{start:{line:64,column:20},end:{line:64,column:42}},"29":{start:{line:65,column:34},end:{line:65,column:74}},"30":{start:{line:66,column:37},end:{line:66,column:96}},"31":{start:{line:67,column:35},end:{line:67,column:49}},"32":{start:{line:68,column:30},end:{line:68,column:32}},"33":{start:{line:69,column:16},end:{line:173,column:17}},"34":{start:{line:71,column:24},end:{line:71,column:43}},"35":{start:{line:72,column:24},end:{line:72,column:30}},"36":{start:{line:74,column:24},end:{line:74,column:44}},"37":{start:{line:75,column:24},end:{line:75,column:30}},"38":{start:{line:77,column:24},end:{line:77,column:43}},"39":{start:{line:78,column:24},end:{line:78,column:30}},"40":{start:{line:80,column:24},end:{line:80,column:43}},"41":{start:{line:81,column:24},end:{line:81,column:30}},"42":{start:{line:83,column:24},end:{line:83,column:43}},"43":{start:{line:84,column:24},end:{line:84,column:30}},"44":{start:{line:86,column:24},end:{line:86,column:43}},"45":{start:{line:87,column:24},end:{line:87,column:30}},"46":{start:{line:89,column:24},end:{line:89,column:43}},"47":{start:{line:90,column:24},end:{line:90,column:30}},"48":{start:{line:92,column:24},end:{line:92,column:43}},"49":{start:{line:93,column:24},end:{line:93,column:30}},"50":{start:{line:95,column:24},end:{line:95,column:43}},"51":{start:{line:96,column:24},end:{line:96,column:30}},"52":{start:{line:98,column:24},end:{line:98,column:43}},"53":{start:{line:99,column:24},end:{line:99,column:30}},"54":{start:{line:101,column:24},end:{line:101,column:43}},"55":{start:{line:102,column:24},end:{line:102,column:30}},"56":{start:{line:104,column:24},end:{line:104,column:41}},"57":{start:{line:105,column:24},end:{line:105,column:30}},"58":{start:{line:107,column:24},end:{line:107,column:41}},"59":{start:{line:108,column:24},end:{line:108,column:30}},"60":{start:{line:110,column:24},end:{line:110,column:41}},"61":{start:{line:111,column:24},end:{line:111,column:30}},"62":{start:{line:113,column:24},end:{line:113,column:41}},"63":{start:{line:114,column:24},end:{line:114,column:30}},"64":{start:{line:116,column:24},end:{line:116,column:41}},"65":{start:{line:117,column:24},end:{line:117,column:30}},"66":{start:{line:119,column:24},end:{line:119,column:41}},"67":{start:{line:120,column:24},end:{line:120,column:30}},"68":{start:{line:122,column:24},end:{line:122,column:43}},"69":{start:{line:123,column:24},end:{line:123,column:30}},"70":{start:{line:125,column:24},end:{line:125,column:43}},"71":{start:{line:126,column:24},end:{line:126,column:30}},"72":{start:{line:128,column:24},end:{line:128,column:43}},"73":{start:{line:129,column:24},end:{line:129,column:30}},"74":{start:{line:131,column:24},end:{line:131,column:43}},"75":{start:{line:132,column:24},end:{line:132,column:30}},"76":{start:{line:134,column:24},end:{line:134,column:43}},"77":{start:{line:135,column:24},end:{line:135,column:30}},"78":{start:{line:137,column:24},end:{line:137,column:43}},"79":{start:{line:138,column:24},end:{line:138,column:30}},"80":{start:{line:140,column:24},end:{line:140,column:43}},"81":{start:{line:141,column:24},end:{line:141,column:30}},"82":{start:{line:143,column:24},end:{line:143,column:43}},"83":{start:{line:144,column:24},end:{line:144,column:30}},"84":{start:{line:146,column:24},end:{line:146,column:43}},"85":{start:{line:147,column:24},end:{line:147,column:30}},"86":{start:{line:149,column:24},end:{line:149,column:43}},"87":{start:{line:150,column:24},end:{line:150,column:30}},"88":{start:{line:152,column:24},end:{line:152,column:43}},"89":{start:{line:153,column:24},end:{line:153,column:30}},"90":{start:{line:155,column:24},end:{line:155,column:41}},"91":{start:{line:156,column:24},end:{line:156,column:30}},"92":{start:{line:158,column:24},end:{line:158,column:43}},"93":{start:{line:159,column:24},end:{line:159,column:30}},"94":{start:{line:161,column:24},end:{line:161,column:43}},"95":{start:{line:162,column:24},end:{line:162,column:30}},"96":{start:{line:164,column:24},end:{line:164,column:43}},"97":{start:{line:165,column:24},end:{line:165,column:30}},"98":{start:{line:167,column:24},end:{line:167,column:43}},"99":{start:{line:168,column:24},end:{line:168,column:30}},"100":{start:{line:170,column:24},end:{line:170,column:57}},"101":{start:{line:171,column:24},end:{line:171,column:150}},"102":{start:{line:172,column:24},end:{line:172,column:30}},"103":{start:{line:174,column:16},end:{line:181,column:17}},"104":{start:{line:174,column:62},end:{line:174,column:78}},"105":{start:{line:175,column:20},end:{line:177,column:21}},"106":{start:{line:176,column:24},end:{line:176,column:67}},"107":{start:{line:178,column:20},end:{line:180,column:21}},"108":{start:{line:179,column:24},end:{line:179,column:59}},"109":{start:{line:182,column:16},end:{line:187,column:17}},"110":{start:{line:182,column:59},end:{line:182,column:75}},"111":{start:{line:183,column:20},end:{line:186,column:40}},"112":{start:{line:188,column:16},end:{line:195,column:19}},"113":{start:{line:198,column:8},end:{line:198,column:24}},"114":{start:{line:201,column:24},end:{line:201,column:63}},"115":{start:{line:202,column:25},end:{line:202,column:27}},"116":{start:{line:203,column:8},end:{line:229,column:12}},"117":{start:{line:204,column:12},end:{line:206,column:13}},"118":{start:{line:205,column:16},end:{line:205,column:41}},"119":{start:{line:207,column:25},end:{line:227,column:73}},"120":{start:{line:228,column:12},end:{line:228,column:35}},"121":{start:{line:230,column:8},end:{line:250,column:11}},"122":{start:{line:231,column:34},end:{line:232,column:53}},"123":{start:{line:231,column:65},end:{line:232,column:52}},"124":{start:{line:233,column:31},end:{line:233,column:77}},"125":{start:{line:233,column:64},end:{line:233,column:75}},"126":{start:{line:234,column:12},end:{line:249,column:15}},"127":{start:{line:235,column:32},end:{line:235,column:86}},"128":{start:{line:235,column:60},end:{line:235,column:85}},"129":{start:{line:236,column:34},end:{line:240,column:17}},"130":{start:{line:241,column:16},end:{line:242,column:45}},"131":{start:{line:242,column:20},end:{line:242,column:45}},"132":{start:{line:243,column:16},end:{line:244,column:52}},"133":{start:{line:244,column:20},end:{line:244,column:52}},"134":{start:{line:245,column:16},end:{line:247,column:19}},"135":{start:{line:246,column:20},end:{line:246,column:62}},"136":{start:{line:248,column:16},end:{line:248,column:44}},"137":{start:{line:251,column:8},end:{line:251,column:24}},"138":{start:{line:254,column:24},end:{line:254,column:63}},"139":{start:{line:255,column:25},end:{line:255,column:27}},"140":{start:{line:256,column:8},end:{line:288,column:12}},"141":{start:{line:257,column:12},end:{line:259,column:13}},"142":{start:{line:258,column:16},end:{line:258,column:41}},"143":{start:{line:260,column:25},end:{line:286,column:55}},"144":{start:{line:287,column:12},end:{line:287,column:35}},"145":{start:{line:289,column:30},end:{line:289,column:32}},"146":{start:{line:290,column:29},end:{line:290,column:69}},"147":{start:{line:290,column:57},end:{line:290,column:67}},"148":{start:{line:291,column:8},end:{line:330,column:11}},"149":{start:{line:292,column:25},end:{line:292,column:74}},"150":{start:{line:292,column:48},end:{line:292,column:73}},"151":{start:{line:293,column:31},end:{line:293,column:94}},"152":{start:{line:293,column:52},end:{line:293,column:93}},"153":{start:{line:294,column:33},end:{line:294,column:92}},"154":{start:{line:294,column:54},end:{line:294,column:91}},"155":{start:{line:295,column:12},end:{line:298,column:13}},"156":{start:{line:296,column:16},end:{line:296,column:160}},"157":{start:{line:297,column:16},end:{line:297,column:23}},"158":{start:{line:299,column:29},end:{line:304,column:13}},"159":{start:{line:305,column:12},end:{line:314,column:13}},"160":{start:{line:307,column:20},end:{line:307,column:26}},"161":{start:{line:309,column:20},end:{line:309,column:51}},"162":{start:{line:310,column:20},end:{line:310,column:26}},"163":{start:{line:312,column:20},end:{line:312,column:57}},"164":{start:{line:313,column:20},end:{line:313,column:26}},"165":{start:{line:315,column:12},end:{line:324,column:13}},"166":{start:{line:317,column:20},end:{line:317,column:26}},"167":{start:{line:319,column:20},end:{line:319,column:51}},"168":{start:{line:320,column:20},end:{line:320,column:26}},"169":{start:{line:322,column:20},end:{line:322,column:57}},"170":{start:{line:323,column:20},end:{line:323,column:26}},"171":{start:{line:325,column:12},end:{line:328,column:15}},"172":{start:{line:326,column:16},end:{line:326,column:65}},"173":{start:{line:327,column:16},end:{line:327,column:77}},"174":{start:{line:329,column:12},end:{line:329,column:41}},"175":{start:{line:331,column:23},end:{line:331,column:111}},"176":{start:{line:332,column:8},end:{line:332,column:22}},"177":{start:{line:335,column:8},end:{line:337,column:9}},"178":{start:{line:336,column:12},end:{line:336,column:42}},"179":{start:{line:340,column:29},end:{line:340,column:72}},"180":{start:{line:341,column:23},end:{line:352,column:9}},"181":{start:{line:353,column:24},end:{line:363,column:10}},"182":{start:{line:354,column:12},end:{line:362,column:15}},"183":{start:{line:355,column:16},end:{line:361,column:17}},"184":{start:{line:356,column:20},end:{line:356,column:34}},"185":{start:{line:359,column:20},end:{line:359,column:96}},"186":{start:{line:360,column:20},end:{line:360,column:32}},"187":{start:{line:364,column:8},end:{line:364,column:22}},"188":{start:{line:367,column:24},end:{line:367,column:63}},"189":{start:{line:368,column:8},end:{line:368,column:59}},"190":{start:{line:371,column:24},end:{line:371,column:63}},"191":{start:{line:372,column:8},end:{line:372,column:47}},"192":{start:{line:375,column:24},end:{line:375,column:63}},"193":{start:{line:376,column:8},end:{line:376,column:57}},"194":{start:{line:379,column:24},end:{line:379,column:63}},"195":{start:{line:380,column:21},end:{line:380,column:108}},"196":{start:{line:381,column:8},end:{line:381,column:41}},"197":{start:{line:384,column:27},end:{line:384,column:33}},"198":{start:{line:385,column:8},end:{line:387,column:9}},"199":{start:{line:386,column:12},end:{line:386,column:29}},"200":{start:{line:388,column:8},end:{line:390,column:9}},"201":{start:{line:389,column:12},end:{line:389,column:53}},"202":{start:{line:391,column:8},end:{line:391,column:41}},"203":{start:{line:394,column:0},end:{line:394,column:30}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:4},end:{line:7,column:5}},loc:{start:{line:7,column:18},end:{line:32,column:5}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:33},end:{line:15,column:34}},loc:{start:{line:15,column:72},end:{line:23,column:9}},line:15},"2":{name:"(anonymous_2)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:58},end:{line:199,column:5}},line:33},"3":{name:"(anonymous_3)",decl:{start:{line:50,column:25},end:{line:50,column:26}},loc:{start:{line:50,column:34},end:{line:197,column:9}},line:50},"4":{name:"(anonymous_4)",decl:{start:{line:52,column:24},end:{line:52,column:25}},loc:{start:{line:52,column:39},end:{line:55,column:13}},line:52},"5":{name:"(anonymous_5)",decl:{start:{line:56,column:25},end:{line:56,column:26}},loc:{start:{line:56,column:35},end:{line:196,column:13}},line:56},"6":{name:"(anonymous_6)",decl:{start:{line:174,column:55},end:{line:174,column:56}},loc:{start:{line:174,column:62},end:{line:174,column:78}},line:174},"7":{name:"(anonymous_7)",decl:{start:{line:182,column:52},end:{line:182,column:53}},loc:{start:{line:182,column:59},end:{line:182,column:75}},line:182},"8":{name:"(anonymous_8)",decl:{start:{line:200,column:4},end:{line:200,column:5}},loc:{start:{line:200,column:58},end:{line:252,column:5}},line:200},"9":{name:"(anonymous_9)",decl:{start:{line:203,column:49},end:{line:203,column:50}},loc:{start:{line:203,column:67},end:{line:229,column:9}},line:203},"10":{name:"(anonymous_10)",decl:{start:{line:230,column:25},end:{line:230,column:26}},loc:{start:{line:230,column:34},end:{line:250,column:9}},line:230},"11":{name:"(anonymous_11)",decl:{start:{line:231,column:50},end:{line:231,column:51}},loc:{start:{line:231,column:65},end:{line:232,column:52}},line:231},"12":{name:"(anonymous_12)",decl:{start:{line:233,column:57},end:{line:233,column:58}},loc:{start:{line:233,column:64},end:{line:233,column:75}},line:233},"13":{name:"(anonymous_13)",decl:{start:{line:234,column:31},end:{line:234,column:32}},loc:{start:{line:234,column:46},end:{line:249,column:13}},line:234},"14":{name:"(anonymous_14)",decl:{start:{line:235,column:53},end:{line:235,column:54}},loc:{start:{line:235,column:60},end:{line:235,column:85}},line:235},"15":{name:"(anonymous_15)",decl:{start:{line:245,column:32},end:{line:245,column:33}},loc:{start:{line:245,column:44},end:{line:247,column:17}},line:245},"16":{name:"(anonymous_16)",decl:{start:{line:253,column:4},end:{line:253,column:5}},loc:{start:{line:253,column:69},end:{line:333,column:5}},line:253},"17":{name:"(anonymous_17)",decl:{start:{line:256,column:49},end:{line:256,column:50}},loc:{start:{line:256,column:67},end:{line:288,column:9}},line:256},"18":{name:"(anonymous_18)",decl:{start:{line:290,column:50},end:{line:290,column:51}},loc:{start:{line:290,column:57},end:{line:290,column:67}},line:290},"19":{name:"(anonymous_19)",decl:{start:{line:291,column:29},end:{line:291,column:30}},loc:{start:{line:291,column:45},end:{line:330,column:9}},line:291},"20":{name:"(anonymous_20)",decl:{start:{line:292,column:41},end:{line:292,column:42}},loc:{start:{line:292,column:48},end:{line:292,column:73}},line:292},"21":{name:"(anonymous_21)",decl:{start:{line:293,column:45},end:{line:293,column:46}},loc:{start:{line:293,column:52},end:{line:293,column:93}},line:293},"22":{name:"(anonymous_22)",decl:{start:{line:294,column:47},end:{line:294,column:48}},loc:{start:{line:294,column:54},end:{line:294,column:91}},line:294},"23":{name:"(anonymous_23)",decl:{start:{line:325,column:25},end:{line:325,column:26}},loc:{start:{line:325,column:34},end:{line:328,column:13}},line:325},"24":{name:"(anonymous_24)",decl:{start:{line:334,column:4},end:{line:334,column:5}},loc:{start:{line:334,column:33},end:{line:338,column:5}},line:334},"25":{name:"(anonymous_25)",decl:{start:{line:339,column:4},end:{line:339,column:5}},loc:{start:{line:339,column:44},end:{line:365,column:5}},line:339},"26":{name:"(anonymous_26)",decl:{start:{line:353,column:36},end:{line:353,column:37}},loc:{start:{line:353,column:57},end:{line:363,column:9}},line:353},"27":{name:"(anonymous_27)",decl:{start:{line:354,column:68},end:{line:354,column:69}},loc:{start:{line:354,column:77},end:{line:362,column:13}},line:354},"28":{name:"(anonymous_28)",decl:{start:{line:366,column:4},end:{line:366,column:5}},loc:{start:{line:366,column:27},end:{line:369,column:5}},line:366},"29":{name:"(anonymous_29)",decl:{start:{line:370,column:4},end:{line:370,column:5}},loc:{start:{line:370,column:24},end:{line:373,column:5}},line:370},"30":{name:"(anonymous_30)",decl:{start:{line:374,column:4},end:{line:374,column:5}},loc:{start:{line:374,column:25},end:{line:377,column:5}},line:374},"31":{name:"(anonymous_31)",decl:{start:{line:378,column:4},end:{line:378,column:5}},loc:{start:{line:378,column:34},end:{line:382,column:5}},line:378},"32":{name:"(anonymous_32)",decl:{start:{line:383,column:4},end:{line:383,column:5}},loc:{start:{line:383,column:46},end:{line:392,column:5}},line:383}},branchMap:{"0":{loc:{start:{line:17,column:35},end:{line:19,column:20}},type:"cond-expr",locations:[{start:{line:18,column:18},end:{line:18,column:72}},{start:{line:19,column:18},end:{line:19,column:20}}],line:17},"1":{loc:{start:{line:53,column:24},end:{line:54,column:57}},type:"binary-expr",locations:[{start:{line:53,column:24},end:{line:53,column:60}},{start:{line:54,column:20},end:{line:54,column:57}}],line:53},"2":{loc:{start:{line:61,column:16},end:{line:62,column:44}},type:"if",locations:[{start:{line:61,column:16},end:{line:62,column:44}},{start:{line:61,column:16},end:{line:62,column:44}}],line:61},"3":{loc:{start:{line:63,column:16},end:{line:64,column:42}},type:"if",locations:[{start:{line:63,column:16},end:{line:64,column:42}},{start:{line:63,column:16},end:{line:64,column:42}}],line:63},"4":{loc:{start:{line:65,column:34},end:{line:65,column:74}},type:"cond-expr",locations:[{start:{line:65,column:58},end:{line:65,column:62}},{start:{line:65,column:65},end:{line:65,column:74}}],line:65},"5":{loc:{start:{line:69,column:16},end:{line:173,column:17}},type:"switch",locations:[{start:{line:70,column:20},end:{line:72,column:30}},{start:{line:73,column:20},end:{line:75,column:30}},{start:{line:76,column:20},end:{line:78,column:30}},{start:{line:79,column:20},end:{line:81,column:30}},{start:{line:82,column:20},end:{line:84,column:30}},{start:{line:85,column:20},end:{line:87,column:30}},{start:{line:88,column:20},end:{line:90,column:30}},{start:{line:91,column:20},end:{line:93,column:30}},{start:{line:94,column:20},end:{line:96,column:30}},{start:{line:97,column:20},end:{line:99,column:30}},{start:{line:100,column:20},end:{line:102,column:30}},{start:{line:103,column:20},end:{line:105,column:30}},{start:{line:106,column:20},end:{line:108,column:30}},{start:{line:109,column:20},end:{line:111,column:30}},{start:{line:112,column:20},end:{line:114,column:30}},{start:{line:115,column:20},end:{line:117,column:30}},{start:{line:118,column:20},end:{line:120,column:30}},{start:{line:121,column:20},end:{line:123,column:30}},{start:{line:124,column:20},end:{line:126,column:30}},{start:{line:127,column:20},end:{line:129,column:30}},{start:{line:130,column:20},end:{line:132,column:30}},{start:{line:133,column:20},end:{line:135,column:30}},{start:{line:136,column:20},end:{line:138,column:30}},{start:{line:139,column:20},end:{line:141,column:30}},{start:{line:142,column:20},end:{line:144,column:30}},{start:{line:145,column:20},end:{line:147,column:30}},{start:{line:148,column:20},end:{line:150,column:30}},{start:{line:151,column:20},end:{line:153,column:30}},{start:{line:154,column:20},end:{line:156,column:30}},{start:{line:157,column:20},end:{line:159,column:30}},{start:{line:160,column:20},end:{line:162,column:30}},{start:{line:163,column:20},end:{line:165,column:30}},{start:{line:166,column:20},end:{line:168,column:30}},{start:{line:169,column:20},end:{line:172,column:30}}],line:69},"6":{loc:{start:{line:174,column:16},end:{line:181,column:17}},type:"if",locations:[{start:{line:174,column:16},end:{line:181,column:17}},{start:{line:174,column:16},end:{line:181,column:17}}],line:174},"7":{loc:{start:{line:175,column:20},end:{line:177,column:21}},type:"if",locations:[{start:{line:175,column:20},end:{line:177,column:21}},{start:{line:175,column:20},end:{line:177,column:21}}],line:175},"8":{loc:{start:{line:178,column:20},end:{line:180,column:21}},type:"if",locations:[{start:{line:178,column:20},end:{line:180,column:21}},{start:{line:178,column:20},end:{line:180,column:21}}],line:178},"9":{loc:{start:{line:182,column:16},end:{line:187,column:17}},type:"if",locations:[{start:{line:182,column:16},end:{line:187,column:17}},{start:{line:182,column:16},end:{line:187,column:17}}],line:182},"10":{loc:{start:{line:184,column:24},end:{line:186,column:39}},type:"cond-expr",locations:[{start:{line:185,column:30},end:{line:185,column:59}},{start:{line:186,column:30},end:{line:186,column:39}}],line:184},"11":{loc:{start:{line:204,column:12},end:{line:206,column:13}},type:"if",locations:[{start:{line:204,column:12},end:{line:206,column:13}},{start:{line:204,column:12},end:{line:206,column:13}}],line:204},"12":{loc:{start:{line:231,column:65},end:{line:232,column:52}},type:"binary-expr",locations:[{start:{line:231,column:65},end:{line:231,column:100}},{start:{line:232,column:16},end:{line:232,column:52}}],line:231},"13":{loc:{start:{line:241,column:16},end:{line:242,column:45}},type:"if",locations:[{start:{line:241,column:16},end:{line:242,column:45}},{start:{line:241,column:16},end:{line:242,column:45}}],line:241},"14":{loc:{start:{line:243,column:16},end:{line:244,column:52}},type:"if",locations:[{start:{line:243,column:16},end:{line:244,column:52}},{start:{line:243,column:16},end:{line:244,column:52}}],line:243},"15":{loc:{start:{line:257,column:12},end:{line:259,column:13}},type:"if",locations:[{start:{line:257,column:12},end:{line:259,column:13}},{start:{line:257,column:12},end:{line:259,column:13}}],line:257},"16":{loc:{start:{line:295,column:12},end:{line:298,column:13}},type:"if",locations:[{start:{line:295,column:12},end:{line:298,column:13}},{start:{line:295,column:12},end:{line:298,column:13}}],line:295},"17":{loc:{start:{line:295,column:16},end:{line:295,column:44}},type:"binary-expr",locations:[{start:{line:295,column:16},end:{line:295,column:27}},{start:{line:295,column:31},end:{line:295,column:44}}],line:295},"18":{loc:{start:{line:305,column:12},end:{line:314,column:13}},type:"switch",locations:[{start:{line:306,column:16},end:{line:307,column:26}},{start:{line:308,column:16},end:{line:310,column:26}},{start:{line:311,column:16},end:{line:313,column:26}}],line:305},"19":{loc:{start:{line:315,column:12},end:{line:324,column:13}},type:"switch",locations:[{start:{line:316,column:16},end:{line:317,column:26}},{start:{line:318,column:16},end:{line:320,column:26}},{start:{line:321,column:16},end:{line:323,column:26}}],line:315},"20":{loc:{start:{line:335,column:8},end:{line:337,column:9}},type:"if",locations:[{start:{line:335,column:8},end:{line:337,column:9}},{start:{line:335,column:8},end:{line:337,column:9}}],line:335},"21":{loc:{start:{line:355,column:16},end:{line:361,column:17}},type:"if",locations:[{start:{line:355,column:16},end:{line:361,column:17}},{start:{line:355,column:16},end:{line:361,column:17}}],line:355},"22":{loc:{start:{line:385,column:8},end:{line:387,column:9}},type:"if",locations:[{start:{line:385,column:8},end:{line:387,column:9}},{start:{line:385,column:8},end:{line:387,column:9}}],line:385},"23":{loc:{start:{line:388,column:8},end:{line:390,column:9}},type:"if",locations:[{start:{line:388,column:8},end:{line:390,column:9}},{start:{line:388,column:8},end:{line:390,column:9}}],line:388},"24":{loc:{start:{line:388,column:12},end:{line:388,column:70}},type:"binary-expr",locations:[{start:{line:388,column:12},end:{line:388,column:40}},{start:{line:388,column:44},end:{line:388,column:70}}],line:388}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0,0],"19":[0,0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},inputSourceMap:{version:3,file:"/home/nemo/work/github/typeorm-model-generator/src/drivers/MssqlDriver.ts",sources:["/home/nemo/work/github/typeorm-model-generator/src/drivers/MssqlDriver.ts"],names:[],mappings:";;AAEA,0EAA0E;AAE1E,sCAAsC;AACtC,qDAA8C;AAQ9C,MAAqB,WAAY,SAAQ,wBAAc;IAenD;QACI,KAAK,EAAE,CAAC;QAfL,kBAAa,GAAqB,IAAI,aAAa,CAAC,eAAe,CAAC;YACvE,OAAO,EAAE,EAAE,WAAW,EAAE,SAAS,EAAuB;SACpD,CAAC,CAAC,gBAAgB,CAAC;QAEX,iBAAY,GAAG,IAAI,CAAC;QAEpB,mBAAc,GAAG,KAAK,CAAC;QAEvB,iBAAY,GAAG,IAAI,CAAC;QAiB7B,sBAAiB,GAAG,KAAK,EAC5B,MAAc,EACd,OAAe,EACf,UAAoB,EACtB,EAAE;YACA,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACxD,MAAM,cAAc,GAChB,UAAU,CAAC,MAAM,GAAG,CAAC;gBACjB,CAAC,CAAC,4BAA4B,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI;gBACxD,CAAC,CAAC,EAAE,CAAC;YACb,MAAM,QAAQ,GAIR,CACF,MAAM,OAAO,CAAC,KAAK,CACf;qDACqC,MAAM,2BAA2B,WAAW,CAAC,wBAAwB,CACtG,OAAO,CACV,KAAK,cAAc,EAAE,CACzB,CACJ,CAAC,SAAS,CAAC;YACZ,OAAO,QAAQ,CAAC;QACpB,CAAC,CAAC;QAhCE,IAAI;YACA,mGAAmG;YACnG,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;SACjC;QAAC,OAAO,KAAK,EAAE;YACZ,SAAS,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACrC,MAAM,KAAK,CAAC;SACf;IACL,CAAC;IA2BM,KAAK,CAAC,oBAAoB,CAC7B,QAAkB,EAClB,MAAc,EACd,OAAe;QAEf,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,MAAM,QAAQ,GAYR,CACF,MAAM,OAAO,CAAC,KAAK,CAAC;;;;;;;;;;;;;iCAaC,MAAM,2BAA2B,WAAW,CAAC,wBAAwB,CACtF,OAAO,CACV;uCAC0B,CAAC,CAC/B,CAAC,SAAS,CAAC;QACZ,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACrB,QAAQ;iBACH,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE;gBAClB,OAAO,CACH,SAAS,CAAC,UAAU,KAAK,GAAG,CAAC,OAAO;oBACpC,SAAS,CAAC,YAAY,KAAK,GAAG,CAAC,MAAM,CACxC,CAAC;YACN,CAAC,CAAC;iBACD,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBACd,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;gBACjC,MAAM,OAAO,GAAsB;oBAC/B,IAAI,EAAE,IAAI,CAAC,WAAW;iBACzB,CAAC;gBACF,IAAI,IAAI,CAAC,WAAW,KAAK,KAAK;oBAAE,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACxD,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC;oBAAE,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;gBAC/C,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;gBAC3D,MAAM,YAAY,GAAG,WAAW,CAAC,0BAA0B,CACvD,IAAI,CAAC,cAAc,CACtB,CAAC;gBACF,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;gBAClC,IAAI,OAAO,GAAG,EAAE,CAAC;gBACjB,QAAQ,IAAI,CAAC,SAAS,EAAE;oBACpB,KAAK,QAAQ;wBACT,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,KAAK;wBACN,OAAO,GAAG,SAAS,CAAC;wBACpB,MAAM;oBACV,KAAK,SAAS;wBACV,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,KAAK;wBACN,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,OAAO;wBACR,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,SAAS;wBACV,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,UAAU;wBACX,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,YAAY;wBACb,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,SAAS;wBACV,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,OAAO;wBACR,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,MAAM;wBACP,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,MAAM;wBACP,OAAO,GAAG,MAAM,CAAC;wBACjB,MAAM;oBACV,KAAK,WAAW;wBACZ,OAAO,GAAG,MAAM,CAAC;wBACjB,MAAM;oBACV,KAAK,UAAU;wBACX,OAAO,GAAG,MAAM,CAAC;wBACjB,MAAM;oBACV,KAAK,gBAAgB;wBACjB,OAAO,GAAG,MAAM,CAAC;wBACjB,MAAM;oBACV,KAAK,eAAe;wBAChB,OAAO,GAAG,MAAM,CAAC;wBACjB,MAAM;oBACV,KAAK,MAAM;wBACP,OAAO,GAAG,MAAM,CAAC;wBACjB,MAAM;oBACV,KAAK,MAAM;wBACP,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,MAAM;wBACP,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,SAAS;wBACV,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,OAAO;wBACR,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,OAAO;wBACR,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,UAAU;wBACX,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,QAAQ;wBACT,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,OAAO;wBACR,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,WAAW;wBACZ,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,aAAa;wBACd,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,aAAa;wBACd,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,WAAW;wBACZ,OAAO,GAAG,MAAM,CAAC;wBACjB,MAAM;oBACV,KAAK,kBAAkB;wBACnB,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,KAAK;wBACN,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,UAAU;wBACX,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV,KAAK,WAAW;wBACZ,OAAO,GAAG,QAAQ,CAAC;wBACnB,MAAM;oBACV;wBACI,OAAO,GAAG,sBAAsB,CAAC;wBACjC,SAAS,CAAC,QAAQ,CACd,wBAAwB,IAAI,CAAC,SAAS,iBAAiB,IAAI,CAAC,UAAU,iBAAiB,IAAI,CAAC,WAAW,EAAE,CAC5G,CAAC;wBACF,MAAM;iBACb;gBAED,IACI,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAC9B,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,UAAU,CAC1B,EACH;oBACE,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,EAAE;wBACjC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC;qBAC9C;oBACD,IAAI,IAAI,CAAC,aAAa,KAAK,IAAI,EAAE;wBAC7B,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;qBACtC;iBACJ;gBACD,IACI,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,UAAU,CAAC,EAC1D;oBACE,OAAO,CAAC,MAAM;wBACV,IAAI,CAAC,wBAAwB,GAAG,CAAC;4BAC7B,CAAC,CAAC,IAAI,CAAC,wBAAwB;4BAC/B,CAAC,CAAC,SAAS,CAAC;iBACvB;gBACD,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC;oBACb,SAAS;oBACT,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE,YAAY;oBACrB,OAAO;oBACP,OAAO;oBACP,OAAO;iBACV,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEM,KAAK,CAAC,oBAAoB,CAC7B,QAAkB,EAClB,MAAc,EACd,OAAe;QAEf,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,MAAM,QAAQ,GAOR,EAAE,CAAC;QACT,MAAM,OAAO,CAAC,GAAG,CACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YACpC,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBACpB,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aAC5B;YACD,MAAM,IAAI,GAOJ,CACF,MAAM,OAAO,CAAC,KAAK,CAAC;;;;;;;;;;;;;;;;;;kDAkBU,MAAM;;6DAEK,CAAC,CAC7C,CAAC,SAAS,CAAC;YACZ,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QAC3B,CAAC,CAAC,CACL,CAAC;QAEF,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACrB,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CACjC,CAAC,SAAS,EAAE,EAAE,CACV,SAAS,CAAC,SAAS,KAAK,GAAG,CAAC,OAAO;gBACnC,SAAS,CAAC,WAAW,KAAK,GAAG,CAAC,MAAM,CAC3C,CAAC;YACF,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YAClE,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;gBAC7B,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAChC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,KAAK,SAAS,CACnC,CAAC;gBACF,MAAM,SAAS,GAAU;oBACrB,OAAO,EAAE,EAAE;oBACX,OAAO,EAAE,EAAE;oBACX,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS;iBAC7B,CAAC;gBACF,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,cAAc;oBAAE,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC;gBACxD,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS;oBAAE,SAAS,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;gBAC1D,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;oBACvB,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;gBAC9C,CAAC,CAAC,CAAC;gBACH,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEM,KAAK,CAAC,YAAY,CACrB,QAAkB,EAClB,MAAc,EACd,OAAe,EACf,iBAAqC;QAErC,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,MAAM,QAAQ,GASR,EAAE,CAAC;QACT,MAAM,OAAO,CAAC,GAAG,CACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YACpC,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBACpB,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aAC5B;YACD,MAAM,IAAI,GASJ,CACF,MAAM,OAAO,CAAC,KAAK,CAAC;;;;;;;;;;;;;;;;;;;;;;;;gFAwBwC,MAAM;;2CAE3C,CAAC,CAC3B,CAAC,SAAS,CAAC;YACZ,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QAC3B,CAAC,CAAC,CACL,CAAC;QACF,MAAM,aAAa,GAAuB,EAAwB,CAAC;QACnE,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE9D,YAAY,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YAChC,MAAM,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC;YAC/D,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,CAC5B,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,mBAAmB,CACnD,CAAC;YACF,MAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,CAC9B,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,eAAe,CAC/C,CAAC;YACF,IAAI,CAAC,UAAU,IAAI,CAAC,YAAY,EAAE;gBAC9B,SAAS,CAAC,QAAQ,CACd,2BAA2B,IAAI,CAAC,CAAC,CAAC,CAAC,mBAAmB,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC,eAAe,gCAAgC,EACrH,IAAI,CACP,CAAC;gBACF,OAAO;aACV;YACD,MAAM,QAAQ,GAAqB;gBAC/B,YAAY,EAAE,EAAE;gBAChB,cAAc,EAAE,EAAE;gBAClB,UAAU;gBACV,YAAY;aACf,CAAC;YACF,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;gBACtB,KAAK,WAAW;oBACZ,MAAM;gBACV,KAAK,UAAU;oBACX,QAAQ,CAAC,QAAQ,GAAG,UAAU,CAAC;oBAC/B,MAAM;gBACV;oBACI,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;oBACrC,MAAM;aACb;YACD,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;gBACtB,KAAK,WAAW;oBACZ,MAAM;gBACV,KAAK,UAAU;oBACX,QAAQ,CAAC,QAAQ,GAAG,UAAU,CAAC;oBAC/B,MAAM;gBACV;oBACI,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;oBACrC,MAAM;aACb;YACD,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;gBACjB,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBACjD,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;YACjE,CAAC,CAAC,CAAC;YACH,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,WAAW,CAAC,gCAAgC,CACvD,aAAa,EACb,QAAQ,EACR,iBAAiB,CACpB,CAAC;QACF,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,KAAK,CAAC,oBAAoB;QAC7B,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;SACjC;IACL,CAAC;IAEM,KAAK,CAAC,eAAe,CAAC,gBAAoC;QAC7D,MAAM,YAAY,GAAG,gBAAgB,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACjE,MAAM,MAAM,GAAiB;YACzB,QAAQ,EAAE,YAAY;YACtB,OAAO,EAAE;gBACL,OAAO,EAAE,yBAAyB;gBAClC,OAAO,EAAE,gBAAgB,CAAC,GAAG;aAChC;YACD,QAAQ,EAAE,gBAAgB,CAAC,QAAQ;YACnC,IAAI,EAAE,gBAAgB,CAAC,IAAI;YAC3B,cAAc,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;YAC9B,MAAM,EAAE,gBAAgB,CAAC,IAAI;YAC7B,IAAI,EAAE,gBAAgB,CAAC,IAAI;SAC9B,CAAC;QAEF,MAAM,OAAO,GAAG,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrD,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE;gBAC5D,IAAI,CAAC,GAAG,EAAE;oBACN,OAAO,CAAC,IAAI,CAAC,CAAC;iBACjB;qBAAM;oBACH,SAAS,CAAC,QAAQ,CACd,mCAAmC,EACnC,KAAK,EACL,GAAG,CAAC,OAAO,CACd,CAAC;oBACF,MAAM,CAAC,GAAG,CAAC,CAAC;iBACf;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,CAAC;IAClB,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,MAAc;QAChC,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,MAAM,OAAO,CAAC,KAAK,CAAC,mBAAmB,MAAM,IAAI,CAAC,CAAC;IACvD,CAAC;IAEM,KAAK,CAAC,KAAK,CAAC,MAAc;QAC7B,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,MAAM,OAAO,CAAC,KAAK,CAAC,OAAO,MAAM,IAAI,CAAC,CAAC;IAC3C,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,MAAc;QAC9B,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,MAAM,OAAO,CAAC,KAAK,CAAC,iBAAiB,MAAM,IAAI,CAAC,CAAC;IACrD,CAAC;IAEM,KAAK,CAAC,eAAe,CAAC,MAAc;QACvC,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,KAAK,CAC5B,wDAAwD,MAAM,IAAI,CACrE,CAAC;QACF,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IACrC,CAAC;IAEO,MAAM,CAAC,0BAA0B,CACrC,MAAqB;QAErB,IAAI,YAAY,GAAG,MAAM,CAAC;QAC1B,IAAI,CAAC,YAAY,EAAE;YACf,OAAO,SAAS,CAAC;SACpB;QACD,IAAI,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC5D,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SAC5C;QAED,OAAO,UAAU,YAAY,GAAG,CAAC;IACrC,CAAC;CACJ;AAhhBD,8BAghBC",sourcesContent:["import type * as MSSQL from \"mssql\";\nimport { ConnectionOptions } from \"typeorm\";\nimport * as TypeormDriver from \"typeorm/driver/sqlserver/SqlServerDriver\";\nimport { DataTypeDefaults } from \"typeorm/driver/types/DataTypeDefaults\";\nimport * as TomgUtils from \"../Utils\";\nimport AbstractDriver from \"./AbstractDriver\";\nimport IConnectionOptions from \"../IConnectionOptions\";\nimport { Entity } from \"../models/Entity\";\nimport { Column } from \"../models/Column\";\nimport { Index } from \"../models/Index\";\nimport IGenerationOptions from \"../IGenerationOptions\";\nimport { RelationInternal } from \"../models/RelationInternal\";\n\nexport default class MssqlDriver extends AbstractDriver {\n    public defaultValues: DataTypeDefaults = new TypeormDriver.SqlServerDriver({\n        options: { replication: undefined } as ConnectionOptions,\n    } as any).dataTypeDefaults;\n\n    public readonly standardPort = 1433;\n\n    public readonly standardSchema = \"dbo\";\n\n    public readonly standardUser = \"sa\";\n\n    private MSSQL: typeof MSSQL;\n\n    private Connection: MSSQL.ConnectionPool;\n\n    public constructor() {\n        super();\n        try {\n            // eslint-disable-next-line import/no-extraneous-dependencies, global-require, import/no-unresolved\n            this.MSSQL = require(\"mssql\");\n        } catch (error) {\n            TomgUtils.LogError(\"\", false, error);\n            throw error;\n        }\n    }\n\n    public GetAllTablesQuery = async (\n        schema: string,\n        dbNames: string,\n        tableNames: string[]\n    ) => {\n        const request = new this.MSSQL.Request(this.Connection);\n        const tableCondition =\n            tableNames.length > 0\n                ? ` AND NOT TABLE_NAME IN ('${tableNames.join(\"','\")}')`\n                : \"\";\n        const response: {\n            TABLE_SCHEMA: string;\n            TABLE_NAME: string;\n            DB_NAME: string;\n        }[] = (\n            await request.query(\n                `SELECT TABLE_SCHEMA,TABLE_NAME, table_catalog as \"DB_NAME\" FROM INFORMATION_SCHEMA.TABLES\nWHERE TABLE_TYPE='BASE TABLE' and TABLE_SCHEMA in (${schema}) AND TABLE_CATALOG in (${MssqlDriver.escapeCommaSeparatedList(\n                    dbNames\n                )}) ${tableCondition}`\n            )\n        ).recordset;\n        return response;\n    };\n\n    public async GetCoulmnsFromEntity(\n        entities: Entity[],\n        schema: string,\n        dbNames: string\n    ): Promise<Entity[]> {\n        const request = new this.MSSQL.Request(this.Connection);\n        const response: {\n            TABLE_NAME: string;\n            COLUMN_NAME: string;\n            TABLE_SCHEMA: string;\n            COLUMN_DEFAULT: string;\n            IS_NULLABLE: string;\n            DATA_TYPE: string;\n            CHARACTER_MAXIMUM_LENGTH: number;\n            NUMERIC_PRECISION: number;\n            NUMERIC_SCALE: number;\n            IsIdentity: number;\n            IsUnique: number;\n        }[] = (\n            await request.query(`SELECT TABLE_NAME,TABLE_SCHEMA,COLUMN_NAME,COLUMN_DEFAULT,IS_NULLABLE,\n        DATA_TYPE,CHARACTER_MAXIMUM_LENGTH,NUMERIC_PRECISION,NUMERIC_SCALE,\n        COLUMNPROPERTY(object_id(TABLE_NAME), COLUMN_NAME, 'IsIdentity') IsIdentity,\n        (SELECT count(*)\n         FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc\n             inner join INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE cu\n                 on cu.CONSTRAINT_NAME = tc.CONSTRAINT_NAME\n         where\n             tc.CONSTRAINT_TYPE = 'UNIQUE'\n             and tc.TABLE_NAME = c.TABLE_NAME\n             and cu.COLUMN_NAME = c.COLUMN_NAME\n             and tc.TABLE_SCHEMA=c.TABLE_SCHEMA) IsUnique\n        FROM INFORMATION_SCHEMA.COLUMNS c\n        where TABLE_SCHEMA in (${schema}) AND TABLE_CATALOG in (${MssqlDriver.escapeCommaSeparatedList(\n                dbNames\n            )})\n             order by ordinal_position`)\n        ).recordset;\n        entities.forEach((ent) => {\n            response\n                .filter((filterVal) => {\n                    return (\n                        filterVal.TABLE_NAME === ent.tscName &&\n                        filterVal.TABLE_SCHEMA === ent.schema\n                    );\n                })\n                .forEach((resp) => {\n                    const tscName = resp.COLUMN_NAME;\n                    const options: Column[\"options\"] = {\n                        name: resp.COLUMN_NAME,\n                    };\n                    if (resp.IS_NULLABLE === \"YES\") options.nullable = true;\n                    if (resp.IsUnique === 1) options.unique = true;\n                    const generated = resp.IsIdentity === 1 ? true : undefined;\n                    const defaultValue = MssqlDriver.ReturnDefaultValueFunction(\n                        resp.COLUMN_DEFAULT\n                    );\n                    const columnType = resp.DATA_TYPE;\n                    let tscType = \"\";\n                    switch (resp.DATA_TYPE) {\n                        case \"bigint\":\n                            tscType = \"string\";\n                            break;\n                        case \"bit\":\n                            tscType = \"boolean\";\n                            break;\n                        case \"decimal\":\n                            tscType = \"number\";\n                            break;\n                        case \"int\":\n                            tscType = \"number\";\n                            break;\n                        case \"money\":\n                            tscType = \"number\";\n                            break;\n                        case \"numeric\":\n                            tscType = \"number\";\n                            break;\n                        case \"smallint\":\n                            tscType = \"number\";\n                            break;\n                        case \"smallmoney\":\n                            tscType = \"number\";\n                            break;\n                        case \"tinyint\":\n                            tscType = \"number\";\n                            break;\n                        case \"float\":\n                            tscType = \"number\";\n                            break;\n                        case \"real\":\n                            tscType = \"number\";\n                            break;\n                        case \"date\":\n                            tscType = \"Date\";\n                            break;\n                        case \"datetime2\":\n                            tscType = \"Date\";\n                            break;\n                        case \"datetime\":\n                            tscType = \"Date\";\n                            break;\n                        case \"datetimeoffset\":\n                            tscType = \"Date\";\n                            break;\n                        case \"smalldatetime\":\n                            tscType = \"Date\";\n                            break;\n                        case \"time\":\n                            tscType = \"Date\";\n                            break;\n                        case \"char\":\n                            tscType = \"string\";\n                            break;\n                        case \"text\":\n                            tscType = \"string\";\n                            break;\n                        case \"varchar\":\n                            tscType = \"string\";\n                            break;\n                        case \"nchar\":\n                            tscType = \"string\";\n                            break;\n                        case \"ntext\":\n                            tscType = \"string\";\n                            break;\n                        case \"nvarchar\":\n                            tscType = \"string\";\n                            break;\n                        case \"binary\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"image\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"varbinary\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"hierarchyid\":\n                            tscType = \"string\";\n                            break;\n                        case \"sql_variant\":\n                            tscType = \"string\";\n                            break;\n                        case \"timestamp\":\n                            tscType = \"Date\";\n                            break;\n                        case \"uniqueidentifier\":\n                            tscType = \"string\";\n                            break;\n                        case \"xml\":\n                            tscType = \"string\";\n                            break;\n                        case \"geometry\":\n                            tscType = \"string\";\n                            break;\n                        case \"geography\":\n                            tscType = \"string\";\n                            break;\n                        default:\n                            tscType = \"NonNullable<unknown>\";\n                            TomgUtils.LogError(\n                                `Unknown column type: ${resp.DATA_TYPE}  table name: ${resp.TABLE_NAME} column name: ${resp.COLUMN_NAME}`\n                            );\n                            break;\n                    }\n\n                    if (\n                        this.ColumnTypesWithPrecision.some(\n                            (v) => v === columnType\n                        )\n                    ) {\n                        if (resp.NUMERIC_PRECISION !== null) {\n                            options.precision = resp.NUMERIC_PRECISION;\n                        }\n                        if (resp.NUMERIC_SCALE !== null) {\n                            options.scale = resp.NUMERIC_SCALE;\n                        }\n                    }\n                    if (\n                        this.ColumnTypesWithLength.some((v) => v === columnType)\n                    ) {\n                        options.length =\n                            resp.CHARACTER_MAXIMUM_LENGTH > 0\n                                ? resp.CHARACTER_MAXIMUM_LENGTH\n                                : undefined;\n                    }\n                    ent.columns.push({\n                        generated,\n                        type: columnType,\n                        default: defaultValue,\n                        options,\n                        tscName,\n                        tscType,\n                    });\n                });\n        });\n        return entities;\n    }\n\n    public async GetIndexesFromEntity(\n        entities: Entity[],\n        schema: string,\n        dbNames: string\n    ): Promise<Entity[]> {\n        const request = new this.MSSQL.Request(this.Connection);\n        const response: {\n            TableName: string;\n            TableSchema: string;\n            IndexName: string;\n            ColumnName: string;\n            is_unique: boolean;\n            is_primary_key: boolean;\n        }[] = [];\n        await Promise.all(\n            dbNames.split(\",\").map(async (dbName) => {\n                if (dbNames.length > 1) {\n                    await this.UseDB(dbName);\n                }\n                const resp: {\n                    TableName: string;\n                    TableSchema: string;\n                    IndexName: string;\n                    ColumnName: string;\n                    is_unique: boolean;\n                    is_primary_key: boolean;\n                }[] = (\n                    await request.query(`SELECT\n             TableName = t.name,\n             TableSchema = s.name,\n             IndexName = ind.name,\n             ColumnName = col.name,\n             ind.is_unique,\n             ind.is_primary_key\n        FROM\n             sys.indexes ind\n        INNER JOIN\n             sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id\n        INNER JOIN\n             sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id\n        INNER JOIN\n             sys.tables t ON ind.object_id = t.object_id\n        INNER JOIN\n             sys.schemas s on s.schema_id=t.schema_id\n        WHERE\n             t.is_ms_shipped = 0 and s.name in (${schema})\n        ORDER BY\n             t.name, ind.name, ind.index_id, ic.key_ordinal;`)\n                ).recordset;\n                response.push(...resp);\n            })\n        );\n\n        entities.forEach((ent) => {\n            const entityIndices = response.filter(\n                (filterVal) =>\n                    filterVal.TableName === ent.tscName &&\n                    filterVal.TableSchema === ent.schema\n            );\n            const indexNames = new Set(entityIndices.map((v) => v.IndexName));\n            indexNames.forEach((indexName) => {\n                const records = entityIndices.filter(\n                    (v) => v.IndexName === indexName\n                );\n                const indexInfo: Index = {\n                    columns: [],\n                    options: {},\n                    name: records[0].IndexName,\n                };\n                if (records[0].is_primary_key) indexInfo.primary = true;\n                if (records[0].is_unique) indexInfo.options.unique = true;\n                records.forEach((record) => {\n                    indexInfo.columns.push(record.ColumnName);\n                });\n                ent.indices.push(indexInfo);\n            });\n        });\n\n        return entities;\n    }\n\n    public async GetRelations(\n        entities: Entity[],\n        schema: string,\n        dbNames: string,\n        generationOptions: IGenerationOptions\n    ): Promise<Entity[]> {\n        const request = new this.MSSQL.Request(this.Connection);\n        const response: {\n            TableWithForeignKey: string;\n            FK_PartNo: number;\n            ForeignKeyColumn: string;\n            TableReferenced: string;\n            ForeignKeyColumnReferenced: string;\n            onDelete: \"RESTRICT\" | \"CASCADE\" | \"SET_NULL\" | \"NO_ACTION\";\n            onUpdate: \"RESTRICT\" | \"CASCADE\" | \"SET_NULL\" | \"NO_ACTION\";\n            objectId: number;\n        }[] = [];\n        await Promise.all(\n            dbNames.split(\",\").map(async (dbName) => {\n                if (dbNames.length > 1) {\n                    await this.UseDB(dbName);\n                }\n                const resp: {\n                    TableWithForeignKey: string;\n                    FK_PartNo: number;\n                    ForeignKeyColumn: string;\n                    TableReferenced: string;\n                    ForeignKeyColumnReferenced: string;\n                    onDelete: \"RESTRICT\" | \"CASCADE\" | \"SET_NULL\" | \"NO_ACTION\";\n                    onUpdate: \"RESTRICT\" | \"CASCADE\" | \"SET_NULL\" | \"NO_ACTION\";\n                    objectId: number;\n                }[] = (\n                    await request.query(`select\n            parentTable.name as TableWithForeignKey,\n            fkc.constraint_column_id as FK_PartNo,\n             parentColumn.name as ForeignKeyColumn,\n             referencedTable.name as TableReferenced,\n             referencedColumn.name as ForeignKeyColumnReferenced,\n             fk.delete_referential_action_desc as onDelete,\n             fk.update_referential_action_desc as onUpdate,\n             fk.object_id as objectId\n        from\n            sys.foreign_keys fk\n        inner join\n            sys.foreign_key_columns as fkc on fkc.constraint_object_id=fk.object_id\n        inner join\n            sys.tables as parentTable on fkc.parent_object_id = parentTable.object_id\n        inner join\n            sys.columns as parentColumn on fkc.parent_object_id = parentColumn.object_id and fkc.parent_column_id = parentColumn.column_id\n        inner join\n            sys.tables as referencedTable on fkc.referenced_object_id = referencedTable.object_id\n        inner join\n            sys.columns as referencedColumn on fkc.referenced_object_id = referencedColumn.object_id and fkc.referenced_column_id = referencedColumn.column_id\n        inner join\n        \tsys.schemas as parentSchema on parentSchema.schema_id=parentTable.schema_id\n        where\n            fk.is_disabled=0 and fk.is_ms_shipped=0 and parentSchema.name in (${schema})\n        order by\n            TableWithForeignKey, FK_PartNo`)\n                ).recordset;\n                response.push(...resp);\n            })\n        );\n        const relationsTemp: RelationInternal[] = [] as RelationInternal[];\n        const relationKeys = new Set(response.map((v) => v.objectId));\n\n        relationKeys.forEach((relationId) => {\n            const rows = response.filter((v) => v.objectId === relationId);\n            const ownerTable = entities.find(\n                (v) => v.sqlName === rows[0].TableWithForeignKey\n            );\n            const relatedTable = entities.find(\n                (v) => v.sqlName === rows[0].TableReferenced\n            );\n            if (!ownerTable || !relatedTable) {\n                TomgUtils.LogError(\n                    `Relation between tables ${rows[0].TableWithForeignKey} and ${rows[0].TableReferenced} wasn't found in entity model.`,\n                    true\n                );\n                return;\n            }\n            const internal: RelationInternal = {\n                ownerColumns: [],\n                relatedColumns: [],\n                ownerTable,\n                relatedTable,\n            };\n            switch (rows[0].onDelete) {\n                case \"NO_ACTION\":\n                    break;\n                case \"SET_NULL\":\n                    internal.onDelete = \"SET NULL\";\n                    break;\n                default:\n                    internal.onDelete = rows[0].onDelete;\n                    break;\n            }\n            switch (rows[0].onUpdate) {\n                case \"NO_ACTION\":\n                    break;\n                case \"SET_NULL\":\n                    internal.onUpdate = \"SET NULL\";\n                    break;\n                default:\n                    internal.onUpdate = rows[0].onUpdate;\n                    break;\n            }\n            rows.forEach((row) => {\n                internal.ownerColumns.push(row.ForeignKeyColumn);\n                internal.relatedColumns.push(row.ForeignKeyColumnReferenced);\n            });\n            relationsTemp.push(internal);\n        });\n\n        const retVal = MssqlDriver.GetRelationsFromRelationTempInfo(\n            relationsTemp,\n            entities,\n            generationOptions\n        );\n        return retVal;\n    }\n\n    public async DisconnectFromServer() {\n        if (this.Connection) {\n            await this.Connection.close();\n        }\n    }\n\n    public async ConnectToServer(connectionOptons: IConnectionOptions) {\n        const databaseName = connectionOptons.databaseName.split(\",\")[0];\n        const config: MSSQL.config = {\n            database: databaseName,\n            options: {\n                appName: \"typeorm-model-generator\",\n                encrypt: connectionOptons.ssl,\n            },\n            password: connectionOptons.password,\n            port: connectionOptons.port,\n            requestTimeout: 60 * 60 * 1000,\n            server: connectionOptons.host,\n            user: connectionOptons.user,\n        };\n\n        const promise = new Promise<boolean>((resolve, reject) => {\n            this.Connection = new this.MSSQL.ConnectionPool(config, (err) => {\n                if (!err) {\n                    resolve(true);\n                } else {\n                    TomgUtils.LogError(\n                        \"Error connecting to MSSQL Server.\",\n                        false,\n                        err.message\n                    );\n                    reject(err);\n                }\n            });\n        });\n\n        await promise;\n    }\n\n    public async CreateDB(dbName: string) {\n        const request = new this.MSSQL.Request(this.Connection);\n        await request.query(`CREATE DATABASE ${dbName}; `);\n    }\n\n    public async UseDB(dbName: string) {\n        const request = new this.MSSQL.Request(this.Connection);\n        await request.query(`USE ${dbName}; `);\n    }\n\n    public async DropDB(dbName: string) {\n        const request = new this.MSSQL.Request(this.Connection);\n        await request.query(`DROP DATABASE ${dbName}; `);\n    }\n\n    public async CheckIfDBExists(dbName: string): Promise<boolean> {\n        const request = new this.MSSQL.Request(this.Connection);\n        const resp = await request.query(\n            `SELECT name FROM master.sys.databases WHERE name = N'${dbName}' `\n        );\n        return resp.recordset.length > 0;\n    }\n\n    private static ReturnDefaultValueFunction(\n        defVal: string | null\n    ): string | undefined {\n        let defaultValue = defVal;\n        if (!defaultValue) {\n            return undefined;\n        }\n        if (defaultValue.startsWith(\"(\") && defaultValue.endsWith(\")\")) {\n            defaultValue = defaultValue.slice(1, -1);\n        }\n\n        return `() => \"${defaultValue}\"`;\n    }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"038a818f455adff581febfa0f30837195dab4e2f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_1jfepr207i=function(){return actualCoverage;};return actualCoverage;}cov_1jfepr207i();cov_1jfepr207i().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const TypeormDriver=(cov_1jfepr207i().s[1]++,require("typeorm/driver/sqlserver/SqlServerDriver"));const TomgUtils=(cov_1jfepr207i().s[2]++,require("../Utils"));const AbstractDriver_1=(cov_1jfepr207i().s[3]++,require("./AbstractDriver"));class MssqlDriver extends(AbstractDriver_1.default){constructor(){cov_1jfepr207i().f[0]++;cov_1jfepr207i().s[4]++;super();cov_1jfepr207i().s[5]++;this.defaultValues=new TypeormDriver.SqlServerDriver({options:{replication:undefined}}).dataTypeDefaults;cov_1jfepr207i().s[6]++;this.standardPort=1433;cov_1jfepr207i().s[7]++;this.standardSchema="dbo";cov_1jfepr207i().s[8]++;this.standardUser="sa";cov_1jfepr207i().s[9]++;this.GetAllTablesQuery=async(schema,dbNames,tableNames)=>{cov_1jfepr207i().f[1]++;const request=(cov_1jfepr207i().s[10]++,new this.MSSQL.Request(this.Connection));const tableCondition=(cov_1jfepr207i().s[11]++,tableNames.length>0?(cov_1jfepr207i().b[0][0]++,` AND NOT TABLE_NAME IN ('${tableNames.join("','")}')`):(cov_1jfepr207i().b[0][1]++,""));const response=(cov_1jfepr207i().s[12]++,(await request.query(`SELECT TABLE_SCHEMA,TABLE_NAME, table_catalog as "DB_NAME" FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_TYPE='BASE TABLE' and TABLE_SCHEMA in (${schema}) AND TABLE_CATALOG in (${MssqlDriver.escapeCommaSeparatedList(dbNames)}) ${tableCondition}`)).recordset);cov_1jfepr207i().s[13]++;return response;};cov_1jfepr207i().s[14]++;try{cov_1jfepr207i().s[15]++;// eslint-disable-next-line import/no-extraneous-dependencies, global-require, import/no-unresolved
this.MSSQL=require("mssql");}catch(error){cov_1jfepr207i().s[16]++;TomgUtils.LogError("",false,error);cov_1jfepr207i().s[17]++;throw error;}}async GetCoulmnsFromEntity(entities,schema,dbNames){cov_1jfepr207i().f[2]++;const request=(cov_1jfepr207i().s[18]++,new this.MSSQL.Request(this.Connection));const response=(cov_1jfepr207i().s[19]++,(await request.query(`SELECT TABLE_NAME,TABLE_SCHEMA,COLUMN_NAME,COLUMN_DEFAULT,IS_NULLABLE,
        DATA_TYPE,CHARACTER_MAXIMUM_LENGTH,NUMERIC_PRECISION,NUMERIC_SCALE,
        COLUMNPROPERTY(object_id(TABLE_NAME), COLUMN_NAME, 'IsIdentity') IsIdentity,
        (SELECT count(*)
         FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
             inner join INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE cu
                 on cu.CONSTRAINT_NAME = tc.CONSTRAINT_NAME
         where
             tc.CONSTRAINT_TYPE = 'UNIQUE'
             and tc.TABLE_NAME = c.TABLE_NAME
             and cu.COLUMN_NAME = c.COLUMN_NAME
             and tc.TABLE_SCHEMA=c.TABLE_SCHEMA) IsUnique
        FROM INFORMATION_SCHEMA.COLUMNS c
        where TABLE_SCHEMA in (${schema}) AND TABLE_CATALOG in (${MssqlDriver.escapeCommaSeparatedList(dbNames)})
             order by ordinal_position`)).recordset);cov_1jfepr207i().s[20]++;entities.forEach(ent=>{cov_1jfepr207i().f[3]++;cov_1jfepr207i().s[21]++;response.filter(filterVal=>{cov_1jfepr207i().f[4]++;cov_1jfepr207i().s[22]++;return(cov_1jfepr207i().b[1][0]++,filterVal.TABLE_NAME===ent.tscName)&&(cov_1jfepr207i().b[1][1]++,filterVal.TABLE_SCHEMA===ent.schema);}).forEach(resp=>{cov_1jfepr207i().f[5]++;const tscName=(cov_1jfepr207i().s[23]++,resp.COLUMN_NAME);const options=(cov_1jfepr207i().s[24]++,{name:resp.COLUMN_NAME});cov_1jfepr207i().s[25]++;if(resp.IS_NULLABLE==="YES"){cov_1jfepr207i().b[2][0]++;cov_1jfepr207i().s[26]++;options.nullable=true;}else{cov_1jfepr207i().b[2][1]++;}cov_1jfepr207i().s[27]++;if(resp.IsUnique===1){cov_1jfepr207i().b[3][0]++;cov_1jfepr207i().s[28]++;options.unique=true;}else{cov_1jfepr207i().b[3][1]++;}const generated=(cov_1jfepr207i().s[29]++,resp.IsIdentity===1?(cov_1jfepr207i().b[4][0]++,true):(cov_1jfepr207i().b[4][1]++,undefined));const defaultValue=(cov_1jfepr207i().s[30]++,MssqlDriver.ReturnDefaultValueFunction(resp.COLUMN_DEFAULT));const columnType=(cov_1jfepr207i().s[31]++,resp.DATA_TYPE);let tscType=(cov_1jfepr207i().s[32]++,"");cov_1jfepr207i().s[33]++;switch(resp.DATA_TYPE){case"bigint":cov_1jfepr207i().b[5][0]++;cov_1jfepr207i().s[34]++;tscType="string";cov_1jfepr207i().s[35]++;break;case"bit":cov_1jfepr207i().b[5][1]++;cov_1jfepr207i().s[36]++;tscType="boolean";cov_1jfepr207i().s[37]++;break;case"decimal":cov_1jfepr207i().b[5][2]++;cov_1jfepr207i().s[38]++;tscType="number";cov_1jfepr207i().s[39]++;break;case"int":cov_1jfepr207i().b[5][3]++;cov_1jfepr207i().s[40]++;tscType="number";cov_1jfepr207i().s[41]++;break;case"money":cov_1jfepr207i().b[5][4]++;cov_1jfepr207i().s[42]++;tscType="number";cov_1jfepr207i().s[43]++;break;case"numeric":cov_1jfepr207i().b[5][5]++;cov_1jfepr207i().s[44]++;tscType="number";cov_1jfepr207i().s[45]++;break;case"smallint":cov_1jfepr207i().b[5][6]++;cov_1jfepr207i().s[46]++;tscType="number";cov_1jfepr207i().s[47]++;break;case"smallmoney":cov_1jfepr207i().b[5][7]++;cov_1jfepr207i().s[48]++;tscType="number";cov_1jfepr207i().s[49]++;break;case"tinyint":cov_1jfepr207i().b[5][8]++;cov_1jfepr207i().s[50]++;tscType="number";cov_1jfepr207i().s[51]++;break;case"float":cov_1jfepr207i().b[5][9]++;cov_1jfepr207i().s[52]++;tscType="number";cov_1jfepr207i().s[53]++;break;case"real":cov_1jfepr207i().b[5][10]++;cov_1jfepr207i().s[54]++;tscType="number";cov_1jfepr207i().s[55]++;break;case"date":cov_1jfepr207i().b[5][11]++;cov_1jfepr207i().s[56]++;tscType="Date";cov_1jfepr207i().s[57]++;break;case"datetime2":cov_1jfepr207i().b[5][12]++;cov_1jfepr207i().s[58]++;tscType="Date";cov_1jfepr207i().s[59]++;break;case"datetime":cov_1jfepr207i().b[5][13]++;cov_1jfepr207i().s[60]++;tscType="Date";cov_1jfepr207i().s[61]++;break;case"datetimeoffset":cov_1jfepr207i().b[5][14]++;cov_1jfepr207i().s[62]++;tscType="Date";cov_1jfepr207i().s[63]++;break;case"smalldatetime":cov_1jfepr207i().b[5][15]++;cov_1jfepr207i().s[64]++;tscType="Date";cov_1jfepr207i().s[65]++;break;case"time":cov_1jfepr207i().b[5][16]++;cov_1jfepr207i().s[66]++;tscType="Date";cov_1jfepr207i().s[67]++;break;case"char":cov_1jfepr207i().b[5][17]++;cov_1jfepr207i().s[68]++;tscType="string";cov_1jfepr207i().s[69]++;break;case"text":cov_1jfepr207i().b[5][18]++;cov_1jfepr207i().s[70]++;tscType="string";cov_1jfepr207i().s[71]++;break;case"varchar":cov_1jfepr207i().b[5][19]++;cov_1jfepr207i().s[72]++;tscType="string";cov_1jfepr207i().s[73]++;break;case"nchar":cov_1jfepr207i().b[5][20]++;cov_1jfepr207i().s[74]++;tscType="string";cov_1jfepr207i().s[75]++;break;case"ntext":cov_1jfepr207i().b[5][21]++;cov_1jfepr207i().s[76]++;tscType="string";cov_1jfepr207i().s[77]++;break;case"nvarchar":cov_1jfepr207i().b[5][22]++;cov_1jfepr207i().s[78]++;tscType="string";cov_1jfepr207i().s[79]++;break;case"binary":cov_1jfepr207i().b[5][23]++;cov_1jfepr207i().s[80]++;tscType="Buffer";cov_1jfepr207i().s[81]++;break;case"image":cov_1jfepr207i().b[5][24]++;cov_1jfepr207i().s[82]++;tscType="Buffer";cov_1jfepr207i().s[83]++;break;case"varbinary":cov_1jfepr207i().b[5][25]++;cov_1jfepr207i().s[84]++;tscType="Buffer";cov_1jfepr207i().s[85]++;break;case"hierarchyid":cov_1jfepr207i().b[5][26]++;cov_1jfepr207i().s[86]++;tscType="string";cov_1jfepr207i().s[87]++;break;case"sql_variant":cov_1jfepr207i().b[5][27]++;cov_1jfepr207i().s[88]++;tscType="string";cov_1jfepr207i().s[89]++;break;case"timestamp":cov_1jfepr207i().b[5][28]++;cov_1jfepr207i().s[90]++;tscType="Date";cov_1jfepr207i().s[91]++;break;case"uniqueidentifier":cov_1jfepr207i().b[5][29]++;cov_1jfepr207i().s[92]++;tscType="string";cov_1jfepr207i().s[93]++;break;case"xml":cov_1jfepr207i().b[5][30]++;cov_1jfepr207i().s[94]++;tscType="string";cov_1jfepr207i().s[95]++;break;case"geometry":cov_1jfepr207i().b[5][31]++;cov_1jfepr207i().s[96]++;tscType="string";cov_1jfepr207i().s[97]++;break;case"geography":cov_1jfepr207i().b[5][32]++;cov_1jfepr207i().s[98]++;tscType="string";cov_1jfepr207i().s[99]++;break;default:cov_1jfepr207i().b[5][33]++;cov_1jfepr207i().s[100]++;tscType="NonNullable<unknown>";cov_1jfepr207i().s[101]++;TomgUtils.LogError(`Unknown column type: ${resp.DATA_TYPE}  table name: ${resp.TABLE_NAME} column name: ${resp.COLUMN_NAME}`);cov_1jfepr207i().s[102]++;break;}cov_1jfepr207i().s[103]++;if(this.ColumnTypesWithPrecision.some(v=>{cov_1jfepr207i().f[6]++;cov_1jfepr207i().s[104]++;return v===columnType;})){cov_1jfepr207i().b[6][0]++;cov_1jfepr207i().s[105]++;if(resp.NUMERIC_PRECISION!==null){cov_1jfepr207i().b[7][0]++;cov_1jfepr207i().s[106]++;options.precision=resp.NUMERIC_PRECISION;}else{cov_1jfepr207i().b[7][1]++;}cov_1jfepr207i().s[107]++;if(resp.NUMERIC_SCALE!==null){cov_1jfepr207i().b[8][0]++;cov_1jfepr207i().s[108]++;options.scale=resp.NUMERIC_SCALE;}else{cov_1jfepr207i().b[8][1]++;}}else{cov_1jfepr207i().b[6][1]++;}cov_1jfepr207i().s[109]++;if(this.ColumnTypesWithLength.some(v=>{cov_1jfepr207i().f[7]++;cov_1jfepr207i().s[110]++;return v===columnType;})){cov_1jfepr207i().b[9][0]++;cov_1jfepr207i().s[111]++;options.length=resp.CHARACTER_MAXIMUM_LENGTH>0?(cov_1jfepr207i().b[10][0]++,resp.CHARACTER_MAXIMUM_LENGTH):(cov_1jfepr207i().b[10][1]++,undefined);}else{cov_1jfepr207i().b[9][1]++;}cov_1jfepr207i().s[112]++;ent.columns.push({generated,type:columnType,default:defaultValue,options,tscName,tscType});});});cov_1jfepr207i().s[113]++;return entities;}async GetIndexesFromEntity(entities,schema,dbNames){cov_1jfepr207i().f[8]++;const request=(cov_1jfepr207i().s[114]++,new this.MSSQL.Request(this.Connection));const response=(cov_1jfepr207i().s[115]++,[]);cov_1jfepr207i().s[116]++;await Promise.all(dbNames.split(",").map(async dbName=>{cov_1jfepr207i().f[9]++;cov_1jfepr207i().s[117]++;if(dbNames.length>1){cov_1jfepr207i().b[11][0]++;cov_1jfepr207i().s[118]++;await this.UseDB(dbName);}else{cov_1jfepr207i().b[11][1]++;}const resp=(cov_1jfepr207i().s[119]++,(await request.query(`SELECT
             TableName = t.name,
             TableSchema = s.name,
             IndexName = ind.name,
             ColumnName = col.name,
             ind.is_unique,
             ind.is_primary_key
        FROM
             sys.indexes ind
        INNER JOIN
             sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id
        INNER JOIN
             sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id
        INNER JOIN
             sys.tables t ON ind.object_id = t.object_id
        INNER JOIN
             sys.schemas s on s.schema_id=t.schema_id
        WHERE
             t.is_ms_shipped = 0 and s.name in (${schema})
        ORDER BY
             t.name, ind.name, ind.index_id, ic.key_ordinal;`)).recordset);cov_1jfepr207i().s[120]++;response.push(...resp);}));cov_1jfepr207i().s[121]++;entities.forEach(ent=>{cov_1jfepr207i().f[10]++;const entityIndices=(cov_1jfepr207i().s[122]++,response.filter(filterVal=>{cov_1jfepr207i().f[11]++;cov_1jfepr207i().s[123]++;return(cov_1jfepr207i().b[12][0]++,filterVal.TableName===ent.tscName)&&(cov_1jfepr207i().b[12][1]++,filterVal.TableSchema===ent.schema);}));const indexNames=(cov_1jfepr207i().s[124]++,new Set(entityIndices.map(v=>{cov_1jfepr207i().f[12]++;cov_1jfepr207i().s[125]++;return v.IndexName;})));cov_1jfepr207i().s[126]++;indexNames.forEach(indexName=>{cov_1jfepr207i().f[13]++;const records=(cov_1jfepr207i().s[127]++,entityIndices.filter(v=>{cov_1jfepr207i().f[14]++;cov_1jfepr207i().s[128]++;return v.IndexName===indexName;}));const indexInfo=(cov_1jfepr207i().s[129]++,{columns:[],options:{},name:records[0].IndexName});cov_1jfepr207i().s[130]++;if(records[0].is_primary_key){cov_1jfepr207i().b[13][0]++;cov_1jfepr207i().s[131]++;indexInfo.primary=true;}else{cov_1jfepr207i().b[13][1]++;}cov_1jfepr207i().s[132]++;if(records[0].is_unique){cov_1jfepr207i().b[14][0]++;cov_1jfepr207i().s[133]++;indexInfo.options.unique=true;}else{cov_1jfepr207i().b[14][1]++;}cov_1jfepr207i().s[134]++;records.forEach(record=>{cov_1jfepr207i().f[15]++;cov_1jfepr207i().s[135]++;indexInfo.columns.push(record.ColumnName);});cov_1jfepr207i().s[136]++;ent.indices.push(indexInfo);});});cov_1jfepr207i().s[137]++;return entities;}async GetRelations(entities,schema,dbNames,generationOptions){cov_1jfepr207i().f[16]++;const request=(cov_1jfepr207i().s[138]++,new this.MSSQL.Request(this.Connection));const response=(cov_1jfepr207i().s[139]++,[]);cov_1jfepr207i().s[140]++;await Promise.all(dbNames.split(",").map(async dbName=>{cov_1jfepr207i().f[17]++;cov_1jfepr207i().s[141]++;if(dbNames.length>1){cov_1jfepr207i().b[15][0]++;cov_1jfepr207i().s[142]++;await this.UseDB(dbName);}else{cov_1jfepr207i().b[15][1]++;}const resp=(cov_1jfepr207i().s[143]++,(await request.query(`select
            parentTable.name as TableWithForeignKey,
            fkc.constraint_column_id as FK_PartNo,
             parentColumn.name as ForeignKeyColumn,
             referencedTable.name as TableReferenced,
             referencedColumn.name as ForeignKeyColumnReferenced,
             fk.delete_referential_action_desc as onDelete,
             fk.update_referential_action_desc as onUpdate,
             fk.object_id as objectId
        from
            sys.foreign_keys fk
        inner join
            sys.foreign_key_columns as fkc on fkc.constraint_object_id=fk.object_id
        inner join
            sys.tables as parentTable on fkc.parent_object_id = parentTable.object_id
        inner join
            sys.columns as parentColumn on fkc.parent_object_id = parentColumn.object_id and fkc.parent_column_id = parentColumn.column_id
        inner join
            sys.tables as referencedTable on fkc.referenced_object_id = referencedTable.object_id
        inner join
            sys.columns as referencedColumn on fkc.referenced_object_id = referencedColumn.object_id and fkc.referenced_column_id = referencedColumn.column_id
        inner join
        	sys.schemas as parentSchema on parentSchema.schema_id=parentTable.schema_id
        where
            fk.is_disabled=0 and fk.is_ms_shipped=0 and parentSchema.name in (${schema})
        order by
            TableWithForeignKey, FK_PartNo`)).recordset);cov_1jfepr207i().s[144]++;response.push(...resp);}));const relationsTemp=(cov_1jfepr207i().s[145]++,[]);const relationKeys=(cov_1jfepr207i().s[146]++,new Set(response.map(v=>{cov_1jfepr207i().f[18]++;cov_1jfepr207i().s[147]++;return v.objectId;})));cov_1jfepr207i().s[148]++;relationKeys.forEach(relationId=>{cov_1jfepr207i().f[19]++;const rows=(cov_1jfepr207i().s[149]++,response.filter(v=>{cov_1jfepr207i().f[20]++;cov_1jfepr207i().s[150]++;return v.objectId===relationId;}));const ownerTable=(cov_1jfepr207i().s[151]++,entities.find(v=>{cov_1jfepr207i().f[21]++;cov_1jfepr207i().s[152]++;return v.sqlName===rows[0].TableWithForeignKey;}));const relatedTable=(cov_1jfepr207i().s[153]++,entities.find(v=>{cov_1jfepr207i().f[22]++;cov_1jfepr207i().s[154]++;return v.sqlName===rows[0].TableReferenced;}));cov_1jfepr207i().s[155]++;if((cov_1jfepr207i().b[17][0]++,!ownerTable)||(cov_1jfepr207i().b[17][1]++,!relatedTable)){cov_1jfepr207i().b[16][0]++;cov_1jfepr207i().s[156]++;TomgUtils.LogError(`Relation between tables ${rows[0].TableWithForeignKey} and ${rows[0].TableReferenced} wasn't found in entity model.`,true);cov_1jfepr207i().s[157]++;return;}else{cov_1jfepr207i().b[16][1]++;}const internal=(cov_1jfepr207i().s[158]++,{ownerColumns:[],relatedColumns:[],ownerTable,relatedTable});cov_1jfepr207i().s[159]++;switch(rows[0].onDelete){case"NO_ACTION":cov_1jfepr207i().b[18][0]++;cov_1jfepr207i().s[160]++;break;case"SET_NULL":cov_1jfepr207i().b[18][1]++;cov_1jfepr207i().s[161]++;internal.onDelete="SET NULL";cov_1jfepr207i().s[162]++;break;default:cov_1jfepr207i().b[18][2]++;cov_1jfepr207i().s[163]++;internal.onDelete=rows[0].onDelete;cov_1jfepr207i().s[164]++;break;}cov_1jfepr207i().s[165]++;switch(rows[0].onUpdate){case"NO_ACTION":cov_1jfepr207i().b[19][0]++;cov_1jfepr207i().s[166]++;break;case"SET_NULL":cov_1jfepr207i().b[19][1]++;cov_1jfepr207i().s[167]++;internal.onUpdate="SET NULL";cov_1jfepr207i().s[168]++;break;default:cov_1jfepr207i().b[19][2]++;cov_1jfepr207i().s[169]++;internal.onUpdate=rows[0].onUpdate;cov_1jfepr207i().s[170]++;break;}cov_1jfepr207i().s[171]++;rows.forEach(row=>{cov_1jfepr207i().f[23]++;cov_1jfepr207i().s[172]++;internal.ownerColumns.push(row.ForeignKeyColumn);cov_1jfepr207i().s[173]++;internal.relatedColumns.push(row.ForeignKeyColumnReferenced);});cov_1jfepr207i().s[174]++;relationsTemp.push(internal);});const retVal=(cov_1jfepr207i().s[175]++,MssqlDriver.GetRelationsFromRelationTempInfo(relationsTemp,entities,generationOptions));cov_1jfepr207i().s[176]++;return retVal;}async DisconnectFromServer(){cov_1jfepr207i().f[24]++;cov_1jfepr207i().s[177]++;if(this.Connection){cov_1jfepr207i().b[20][0]++;cov_1jfepr207i().s[178]++;await this.Connection.close();}else{cov_1jfepr207i().b[20][1]++;}}async ConnectToServer(connectionOptons){cov_1jfepr207i().f[25]++;const databaseName=(cov_1jfepr207i().s[179]++,connectionOptons.databaseName.split(",")[0]);const config=(cov_1jfepr207i().s[180]++,{database:databaseName,options:{appName:"typeorm-model-generator",encrypt:connectionOptons.ssl},password:connectionOptons.password,port:connectionOptons.port,requestTimeout:60*60*1000,server:connectionOptons.host,user:connectionOptons.user});const promise=(cov_1jfepr207i().s[181]++,new Promise((resolve,reject)=>{cov_1jfepr207i().f[26]++;cov_1jfepr207i().s[182]++;this.Connection=new this.MSSQL.ConnectionPool(config,err=>{cov_1jfepr207i().f[27]++;cov_1jfepr207i().s[183]++;if(!err){cov_1jfepr207i().b[21][0]++;cov_1jfepr207i().s[184]++;resolve(true);}else{cov_1jfepr207i().b[21][1]++;cov_1jfepr207i().s[185]++;TomgUtils.LogError("Error connecting to MSSQL Server.",false,err.message);cov_1jfepr207i().s[186]++;reject(err);}});}));cov_1jfepr207i().s[187]++;await promise;}async CreateDB(dbName){cov_1jfepr207i().f[28]++;const request=(cov_1jfepr207i().s[188]++,new this.MSSQL.Request(this.Connection));cov_1jfepr207i().s[189]++;await request.query(`CREATE DATABASE ${dbName}; `);}async UseDB(dbName){cov_1jfepr207i().f[29]++;const request=(cov_1jfepr207i().s[190]++,new this.MSSQL.Request(this.Connection));cov_1jfepr207i().s[191]++;await request.query(`USE ${dbName}; `);}async DropDB(dbName){cov_1jfepr207i().f[30]++;const request=(cov_1jfepr207i().s[192]++,new this.MSSQL.Request(this.Connection));cov_1jfepr207i().s[193]++;await request.query(`DROP DATABASE ${dbName}; `);}async CheckIfDBExists(dbName){cov_1jfepr207i().f[31]++;const request=(cov_1jfepr207i().s[194]++,new this.MSSQL.Request(this.Connection));const resp=(cov_1jfepr207i().s[195]++,await request.query(`SELECT name FROM master.sys.databases WHERE name = N'${dbName}' `));cov_1jfepr207i().s[196]++;return resp.recordset.length>0;}static ReturnDefaultValueFunction(defVal){cov_1jfepr207i().f[32]++;let defaultValue=(cov_1jfepr207i().s[197]++,defVal);cov_1jfepr207i().s[198]++;if(!defaultValue){cov_1jfepr207i().b[22][0]++;cov_1jfepr207i().s[199]++;return undefined;}else{cov_1jfepr207i().b[22][1]++;}cov_1jfepr207i().s[200]++;if((cov_1jfepr207i().b[24][0]++,defaultValue.startsWith("("))&&(cov_1jfepr207i().b[24][1]++,defaultValue.endsWith(")"))){cov_1jfepr207i().b[23][0]++;cov_1jfepr207i().s[201]++;defaultValue=defaultValue.slice(1,-1);}else{cov_1jfepr207i().b[23][1]++;}cov_1jfepr207i().s[202]++;return`() => "${defaultValue}"`;}}cov_1jfepr207i().s[203]++;exports.default=MssqlDriver;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,