{"version":3,"file":"/home/nemo/work/github/typeorm-model-generator/src/drivers/SqliteDriver.ts","sources":["/home/nemo/work/github/typeorm-model-generator/src/drivers/SqliteDriver.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConnectionOptions } from \"typeorm\";\nimport * as TypeormDriver from \"typeorm/driver/sqlite/SqliteDriver\";\nimport { DataTypeDefaults } from \"typeorm/driver/types/DataTypeDefaults\";\nimport type * as sqliteLib from \"sqlite3\";\nimport * as TomgUtils from \"../Utils\";\nimport AbstractDriver from \"./AbstractDriver\";\nimport IConnectionOptions from \"../IConnectionOptions\";\nimport { Entity } from \"../models/Entity\";\nimport { Column } from \"../models/Column\";\nimport { Index } from \"../models/Index\";\nimport IGenerationOptions from \"../IGenerationOptions\";\nimport { RelationInternal } from \"../models/RelationInternal\";\n\nexport default class SqliteDriver extends AbstractDriver {\n    public defaultValues: DataTypeDefaults = new TypeormDriver.SqliteDriver({\n        options: { database: \"true\" } as ConnectionOptions,\n    } as any).dataTypeDefaults;\n\n    public readonly standardPort = 0;\n\n    public readonly standardUser = \"\";\n\n    public readonly standardSchema = \"\";\n\n    private sqliteLib: typeof sqliteLib;\n\n    private sqlite: sqliteLib.sqlite3;\n\n    private db: sqliteLib.Database;\n\n    private tablesWithGeneratedPrimaryKey: string[] = new Array<string>();\n\n    public GetAllTablesQuery: any;\n\n    public constructor() {\n        super();\n        try {\n            // eslint-disable-next-line import/no-extraneous-dependencies, global-require, import/no-unresolved\n            this.sqliteLib = require(\"sqlite3\");\n            this.sqlite = this.sqliteLib.verbose();\n        } catch (error) {\n            TomgUtils.LogError(\"\", false, error);\n            throw error;\n        }\n    }\n\n    public async GetAllTables(\n        schema: string,\n        dbNames: string,\n        tableNames: string[]\n    ): Promise<Entity[]> {\n        const ret: Entity[] = [] as Entity[];\n        const tableCondition =\n            tableNames.length > 0\n                ? ` AND NOT tbl_name IN ('${tableNames.join(\"','\")}')`\n                : \"\";\n        const rows = await this.ExecQuery<{ tbl_name: string; sql: string }>(\n            `SELECT tbl_name, sql FROM \"sqlite_master\" WHERE \"type\" = 'table'  AND name NOT LIKE 'sqlite_%' ${tableCondition}`\n        );\n        rows.forEach((val) => {\n            if (val.sql.includes(\"AUTOINCREMENT\")) {\n                this.tablesWithGeneratedPrimaryKey.push(val.tbl_name);\n            }\n            ret.push({\n                columns: [],\n                indices: [],\n                relations: [],\n                relationIds: [],\n                sqlName: val.tbl_name,\n                tscName: val.tbl_name,\n                fileImports: [],\n            });\n        });\n        return ret;\n    }\n\n    public async GetCoulmnsFromEntity(entities: Entity[]): Promise<Entity[]> {\n        await Promise.all(\n            entities.map(async (ent) => {\n                const response = await this.ExecQuery<{\n                    cid: number;\n                    name: string;\n                    type: string;\n                    notnull: number;\n                    dflt_value: string;\n                    pk: number;\n                }>(`PRAGMA table_info('${ent.tscName}');`);\n                response.forEach((resp) => {\n                    const tscName = resp.name;\n                    let tscType = \"\";\n                    const options: Column[\"options\"] = { name: resp.name };\n                    if (resp.notnull === 0) options.nullable = true;\n                    const isPrimary = resp.pk > 0 ? true : undefined;\n                    const defaultValue = SqliteDriver.ReturnDefaultValueFunction(\n                        resp.dflt_value\n                    );\n                    const columnType = resp.type\n                        .replace(/\\([0-9 ,]+\\)/g, \"\")\n                        .toLowerCase()\n                        .trim();\n                    const generated =\n                        isPrimary &&\n                        this.tablesWithGeneratedPrimaryKey.includes(ent.tscName)\n                            ? true\n                            : undefined;\n                    switch (columnType) {\n                        case \"int\":\n                            tscType = \"number\";\n                            break;\n                        case \"integer\":\n                            tscType = \"number\";\n                            break;\n                        case \"int2\":\n                            tscType = \"number\";\n                            break;\n                        case \"int8\":\n                            tscType = \"number\";\n                            break;\n                        case \"tinyint\":\n                            tscType = \"number\";\n                            break;\n                        case \"smallint\":\n                            tscType = \"number\";\n                            break;\n                        case \"mediumint\":\n                            tscType = \"number\";\n                            break;\n                        case \"bigint\":\n                            tscType = \"string\";\n                            break;\n                        case \"unsigned big int\":\n                            tscType = \"string\";\n                            break;\n                        case \"character\":\n                            tscType = \"string\";\n                            break;\n                        case \"varchar\":\n                            tscType = \"string\";\n                            break;\n                        case \"varying character\":\n                            tscType = \"string\";\n                            break;\n                        case \"nchar\":\n                            tscType = \"string\";\n                            break;\n                        case \"native character\":\n                            tscType = \"string\";\n                            break;\n                        case \"nvarchar\":\n                            tscType = \"string\";\n                            break;\n                        case \"text\":\n                            tscType = \"string\";\n                            break;\n                        case \"blob\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"clob\":\n                            tscType = \"string\";\n                            break;\n                        case \"real\":\n                            tscType = \"number\";\n                            break;\n                        case \"double\":\n                            tscType = \"number\";\n                            break;\n                        case \"double precision\":\n                            tscType = \"number\";\n                            break;\n                        case \"float\":\n                            tscType = \"number\";\n                            break;\n                        case \"numeric\":\n                            tscType = \"number\";\n                            break;\n                        case \"decimal\":\n                            tscType = \"number\";\n                            break;\n                        case \"boolean\":\n                            tscType = \"boolean\";\n                            break;\n                        case \"date\":\n                            tscType = \"string\";\n                            break;\n                        case \"datetime\":\n                            tscType = \"Date\";\n                            break;\n                        default:\n                            tscType = \"NonNullable<unknown>\";\n                            TomgUtils.LogError(\n                                `Unknown column type: ${columnType}  table name: ${ent.tscName} column name: ${resp.name}`\n                            );\n                            break;\n                    }\n                    const sqlOptions = resp.type.match(/\\([0-9 ,]+\\)/g);\n                    if (\n                        this.ColumnTypesWithPrecision.some(\n                            (v) => v === columnType\n                        ) &&\n                        sqlOptions\n                    ) {\n                        options.precision = Number.parseInt(\n                            sqlOptions[0]\n                                .substring(1, sqlOptions[0].length - 1)\n                                .split(\",\")[0],\n                            10\n                        );\n                        options.scale = Number.parseInt(\n                            sqlOptions[0]\n                                .substring(1, sqlOptions[0].length - 1)\n                                .split(\",\")[1],\n                            10\n                        );\n                    }\n                    if (\n                        this.ColumnTypesWithLength.some(\n                            (v) => v === columnType\n                        ) &&\n                        sqlOptions\n                    ) {\n                        options.length = Number.parseInt(\n                            sqlOptions[0].substring(\n                                1,\n                                sqlOptions[0].length - 1\n                            ),\n                            10\n                        );\n                    }\n                    if (\n                        this.ColumnTypesWithWidth.some(\n                            (v) => v === columnType && tscType !== \"boolean\"\n                        ) &&\n                        sqlOptions\n                    ) {\n                        options.width = Number.parseInt(\n                            sqlOptions[0].substring(\n                                1,\n                                sqlOptions[0].length - 1\n                            ),\n                            10\n                        );\n                    }\n\n                    ent.columns.push({\n                        generated,\n                        primary: isPrimary,\n                        type: columnType,\n                        default: defaultValue,\n                        options,\n                        tscName,\n                        tscType,\n                    });\n                });\n            })\n        );\n\n        return entities;\n    }\n\n    public async GetIndexesFromEntity(entities: Entity[]): Promise<Entity[]> {\n        await Promise.all(\n            entities.map(async (ent) => {\n                const response = await this.ExecQuery<{\n                    seq: number;\n                    name: string;\n                    unique: number;\n                    origin: string;\n                    partial: number;\n                }>(`PRAGMA index_list('${ent.tscName}');`);\n                await Promise.all(\n                    response.map(async (resp) => {\n                        const indexColumnsResponse = await this.ExecQuery<{\n                            seqno: number;\n                            cid: number;\n                            name: string;\n                        }>(`PRAGMA index_info('${resp.name}');`);\n\n                        const indexInfo: Index = {\n                            name: resp.name,\n                            columns: [],\n                            options: {},\n                        };\n                        if (resp.unique === 1) indexInfo.options.unique = true;\n\n                        indexColumnsResponse.forEach((record) => {\n                            indexInfo.columns.push(record.name);\n                        });\n                        if (\n                            indexColumnsResponse.length === 1 &&\n                            indexInfo.options.unique\n                        ) {\n                            ent.columns\n                                .filter(\n                                    (v) => v.tscName === indexInfo.columns[0]\n                                )\n                                .forEach((v) => {\n                                    // eslint-disable-next-line no-param-reassign\n                                    v.options.unique = true;\n                                });\n                        }\n                        ent.indices.push(indexInfo);\n                    })\n                );\n            })\n        );\n\n        return entities;\n    }\n\n    public async GetRelations(\n        entities: Entity[],\n        schema: string,\n        dbNames: string,\n        generationOptions: IGenerationOptions\n    ): Promise<Entity[]> {\n        let retVal = entities;\n        await Promise.all(\n            retVal.map(async (entity) => {\n                const response = await this.ExecQuery<{\n                    id: number;\n                    seq: number;\n                    table: string;\n                    from: string;\n                    to: string;\n                    on_update:\n                        | \"RESTRICT\"\n                        | \"CASCADE\"\n                        | \"SET NULL\"\n                        | \"NO ACTION\";\n                    on_delete:\n                        | \"RESTRICT\"\n                        | \"CASCADE\"\n                        | \"SET NULL\"\n                        | \"NO ACTION\";\n                    match: string;\n                }>(`PRAGMA foreign_key_list('${entity.tscName}');`);\n\n                const relationsTemp: RelationInternal[] = [] as RelationInternal[];\n                const relationKeys = new Set(response.map((v) => v.id));\n\n                relationKeys.forEach((relationId) => {\n                    const rows = response.filter((v) => v.id === relationId);\n                    const ownerTable = entities.find(\n                        (v) => v.sqlName === entity.tscName\n                    );\n                    const relatedTable = entities.find(\n                        (v) => v.sqlName === rows[0].table\n                    );\n                    if (!ownerTable || !relatedTable) {\n                        TomgUtils.LogError(\n                            `Relation between tables ${entity.tscName} and ${rows[0].table} wasn't found in entity model.`,\n                            true\n                        );\n                        return;\n                    }\n                    const internal: RelationInternal = {\n                        ownerColumns: [],\n                        relatedColumns: [],\n                        ownerTable,\n                        relatedTable,\n                    };\n                    if (rows[0].on_delete !== \"NO ACTION\") {\n                        internal.onDelete = rows[0].on_delete;\n                    }\n                    if (rows[0].on_update !== \"NO ACTION\") {\n                        internal.onUpdate = rows[0].on_update;\n                    }\n                    rows.forEach((row) => {\n                        internal.ownerColumns.push(row.from);\n                        internal.relatedColumns.push(row.to);\n                    });\n                    relationsTemp.push(internal);\n                });\n\n                retVal = SqliteDriver.GetRelationsFromRelationTempInfo(\n                    relationsTemp,\n                    retVal,\n                    generationOptions\n                );\n            })\n        );\n        return retVal;\n    }\n\n    public async DisconnectFromServer() {\n        this.db.close();\n    }\n\n    public async ConnectToServer(connectionOptons: IConnectionOptions) {\n        await this.UseDB(connectionOptons.databaseName);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    public async CreateDB() {\n        // not supported\n    }\n\n    public async UseDB(dbName: string) {\n        const promise = new Promise<boolean>((resolve, reject) => {\n            this.db = new this.sqlite.Database(dbName, (err) => {\n                if (err) {\n                    TomgUtils.LogError(\n                        \"Error connecting to SQLite database.\",\n                        false,\n                        err.message\n                    );\n                    reject(err);\n                    return;\n                }\n                resolve();\n            });\n        });\n        return promise;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    public async DropDB() {\n        // not supported\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    public async CheckIfDBExists(): Promise<boolean> {\n        return true;\n    }\n\n    public async ExecQuery<T>(sql: string): Promise<T[]> {\n        let ret: T[] = [];\n        const promise = new Promise<boolean>((resolve, reject) => {\n            this.db.serialize(() => {\n                this.db.all(sql, [], (err, row) => {\n                    if (!err) {\n                        ret = row;\n                        resolve(true);\n                    } else {\n                        TomgUtils.LogError(\n                            \"Error executing query on SQLite.\",\n                            false,\n                            err.message\n                        );\n                        reject(err);\n                    }\n                });\n            });\n        });\n        await promise;\n        return ret;\n    }\n\n    private static ReturnDefaultValueFunction(\n        defVal: string | null\n    ): string | undefined {\n        if (!defVal) {\n            return undefined;\n        }\n\n        return `() => \"${defVal}\"`;\n    }\n}\n"]}