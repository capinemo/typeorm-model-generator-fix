{"version":3,"file":"/home/nemo/work/github/typeorm-model-generator/src/drivers/MysqlDriver.ts","sources":["/home/nemo/work/github/typeorm-model-generator/src/drivers/MysqlDriver.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as MYSQL from \"mysql\";\nimport { ConnectionOptions } from \"typeorm\";\nimport * as TypeormDriver from \"typeorm/driver/mysql/MysqlDriver\";\nimport { DataTypeDefaults } from \"typeorm/driver/types/DataTypeDefaults\";\nimport * as TomgUtils from \"../Utils\";\nimport AbstractDriver from \"./AbstractDriver\";\nimport IConnectionOptions from \"../IConnectionOptions\";\nimport { Entity } from \"../models/Entity\";\nimport { Column } from \"../models/Column\";\nimport { Index } from \"../models/Index\";\nimport { RelationInternal } from \"../models/RelationInternal\";\nimport IGenerationOptions from \"../IGenerationOptions\";\n\nexport default class MysqlDriver extends AbstractDriver {\n    public defaultValues: DataTypeDefaults = new TypeormDriver.MysqlDriver({\n        options: { replication: undefined } as ConnectionOptions,\n    } as any).dataTypeDefaults;\n\n    public readonly EngineName: string = \"MySQL\";\n\n    public readonly standardPort = 3306;\n\n    public readonly standardUser = \"root\";\n\n    public readonly standardSchema = \"\";\n\n    private MYSQL: typeof MYSQL;\n\n    private Connection: MYSQL.Connection;\n\n    public constructor() {\n        super();\n        try {\n            // eslint-disable-next-line import/no-extraneous-dependencies, global-require, import/no-unresolved\n            this.MYSQL = require(\"mysql\");\n        } catch (error) {\n            TomgUtils.LogError(\"\", false, error);\n            throw error;\n        }\n    }\n\n    public GetAllTablesQuery = async (\n        schema: string,\n        dbNames: string,\n        tableNames: string[]\n    ) => {\n        const tableCondition =\n            tableNames.length > 0\n                ? ` AND NOT TABLE_NAME IN ('${tableNames.join(\"','\")}')`\n                : \"\";\n        const response = this.ExecQuery<{\n            TABLE_SCHEMA: string;\n            TABLE_NAME: string;\n            DB_NAME: string;\n        }>(`SELECT TABLE_SCHEMA, TABLE_NAME, TABLE_SCHEMA as DB_NAME\n            FROM information_schema.tables\n            WHERE table_type='BASE TABLE'\n            AND table_schema IN (${MysqlDriver.escapeCommaSeparatedList(\n                dbNames\n            )}) ${tableCondition}`);\n        return response;\n    };\n\n    public async GetCoulmnsFromEntity(\n        entities: Entity[],\n        schema: string,\n        dbNames: string\n    ): Promise<Entity[]> {\n        const response = await this.ExecQuery<{\n            TABLE_NAME: string;\n            COLUMN_NAME: string;\n            COLUMN_DEFAULT: string;\n            IS_NULLABLE: string;\n            DATA_TYPE: string;\n            CHARACTER_MAXIMUM_LENGTH: number;\n            NUMERIC_PRECISION: number | null;\n            NUMERIC_SCALE: number | null;\n            IsIdentity: number;\n            COLUMN_TYPE: string;\n            COLUMN_KEY: string;\n            COLUMN_COMMENT: string;\n        }>(`SELECT TABLE_NAME,COLUMN_NAME,COLUMN_DEFAULT,IS_NULLABLE,\n            DATA_TYPE,CHARACTER_MAXIMUM_LENGTH,NUMERIC_PRECISION,NUMERIC_SCALE,\n            CASE WHEN EXTRA like '%auto_increment%' THEN 1 ELSE 0 END IsIdentity, COLUMN_TYPE, COLUMN_KEY, COLUMN_COMMENT\n            FROM INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA IN (${MysqlDriver.escapeCommaSeparatedList(\n                dbNames\n            )})\n\t\t\torder by ordinal_position`);\n        entities.forEach((ent) => {\n            response\n                .filter((filterVal) => filterVal.TABLE_NAME === ent.tscName)\n                .forEach((resp) => {\n                    const tscName = resp.COLUMN_NAME;\n                    let tscType = \"\";\n                    const options: Column[\"options\"] = {\n                        name: resp.COLUMN_NAME,\n                    };\n                    const generated = resp.IsIdentity === 1 ? true : undefined;\n                    const defaultValue = MysqlDriver.ReturnDefaultValueFunction(\n                        resp.COLUMN_DEFAULT,\n                        resp.DATA_TYPE\n                    );\n                    let columnType = resp.DATA_TYPE;\n                    if (resp.IS_NULLABLE === \"YES\") options.nullable = true;\n                    if (resp.COLUMN_KEY === \"UNI\") options.unique = true;\n                    if (resp.COLUMN_COMMENT)\n                        options.comment = resp.COLUMN_COMMENT;\n                    if (resp.COLUMN_TYPE.endsWith(\" unsigned\"))\n                        options.unsigned = true;\n                    switch (resp.DATA_TYPE) {\n                        case \"int\":\n                            tscType = \"number\";\n                            break;\n                        case \"bit\":\n                            if (resp.COLUMN_TYPE === \"bit(1)\") {\n                                tscType = \"boolean\";\n                            } else {\n                                tscType = \"number\";\n                            }\n                            break;\n                        case \"tinyint\":\n                            if (resp.COLUMN_TYPE === \"tinyint(1)\") {\n                                options.width = 1;\n                                tscType = \"boolean\";\n                            } else {\n                                tscType = \"number\";\n                            }\n                            break;\n                        case \"smallint\":\n                            tscType = \"number\";\n                            break;\n                        case \"mediumint\":\n                            tscType = \"number\";\n                            break;\n                        case \"bigint\":\n                            tscType = \"string\";\n                            break;\n                        case \"float\":\n                            tscType = \"number\";\n                            break;\n                        case \"double\":\n                            tscType = \"number\";\n                            break;\n                        case \"decimal\":\n                            tscType = \"string\";\n                            break;\n                        case \"date\":\n                            tscType = \"string\";\n                            break;\n                        case \"datetime\":\n                            tscType = \"Date\";\n                            break;\n                        case \"timestamp\":\n                            tscType = \"Date\";\n                            break;\n                        case \"time\":\n                            tscType = \"string\";\n                            break;\n                        case \"year\":\n                            tscType = \"number\";\n                            break;\n                        case \"char\":\n                            tscType = \"string\";\n                            break;\n                        case \"varchar\":\n                            tscType = \"string\";\n                            break;\n                        case \"blob\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"text\":\n                            tscType = \"string\";\n                            break;\n                        case \"tinyblob\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"tinytext\":\n                            tscType = \"string\";\n                            break;\n                        case \"mediumblob\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"mediumtext\":\n                            tscType = \"string\";\n                            break;\n                        case \"longblob\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"longtext\":\n                            tscType = \"string\";\n                            break;\n                        case \"enum\":\n                            tscType = resp.COLUMN_TYPE.substring(\n                                5,\n                                resp.COLUMN_TYPE.length - 1\n                            )\n                                .replace(/'/gi, '\"')\n                                .replace(/\",\"/gi, '\" | \"');\n                            options.enum = resp.COLUMN_TYPE.substring(\n                                5,\n                                resp.COLUMN_TYPE.length - 1\n                            )\n                                .replace(/'/gi, \"\")\n                                .split(\",\");\n                            break;\n                        case \"set\":\n                            tscType = `(${resp.COLUMN_TYPE.substring(\n                                4,\n                                resp.COLUMN_TYPE.length - 1\n                            )\n                                .replace(/'/gi, '\"')\n                                .replace(/\",\"/gi, '\" | \"')})[]`;\n                            options.enum = resp.COLUMN_TYPE.substring(\n                                4,\n                                resp.COLUMN_TYPE.length - 1\n                            )\n                                .replace(/'/gi, \"\")\n                                .split(\",\");\n                            break;\n                        case \"json\":\n                            tscType = \"object\";\n                            break;\n                        case \"binary\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"varbinary\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"geometry\":\n                            tscType = \"string\";\n                            break;\n                        case \"point\":\n                            tscType = \"string\";\n                            break;\n                        case \"linestring\":\n                            tscType = \"string\";\n                            break;\n                        case \"polygon\":\n                            tscType = \"string\";\n                            break;\n                        case \"multipoint\":\n                            tscType = \"string\";\n                            break;\n                        case \"multilinestring\":\n                            tscType = \"string\";\n                            break;\n                        case \"multipolygon\":\n                            tscType = \"string\";\n                            break;\n                        case \"geometrycollection\":\n                        case \"geomcollection\":\n                            columnType = \"geometrycollection\";\n                            tscType = \"string\";\n                            break;\n                        default:\n                            tscType = \"NonNullable<unknown>\";\n                            TomgUtils.LogError(\n                                `Unknown column type: ${resp.DATA_TYPE}  table name: ${resp.TABLE_NAME} column name: ${resp.COLUMN_NAME}`\n                            );\n                            break;\n                    }\n                    if (\n                        this.ColumnTypesWithPrecision.some(\n                            (v) => v === columnType\n                        )\n                    ) {\n                        if (resp.NUMERIC_PRECISION !== null) {\n                            options.precision = resp.NUMERIC_PRECISION;\n                        }\n                        if (resp.NUMERIC_SCALE !== null) {\n                            options.scale = resp.NUMERIC_SCALE;\n                        }\n                    }\n                    if (\n                        this.ColumnTypesWithLength.some((v) => v === columnType)\n                    ) {\n                        options.length =\n                            resp.CHARACTER_MAXIMUM_LENGTH > 0\n                                ? resp.CHARACTER_MAXIMUM_LENGTH\n                                : undefined;\n                    }\n                    if (\n                        this.ColumnTypesWithWidth.some(\n                            (v) => v === columnType && tscType !== \"boolean\"\n                        )\n                    ) {\n                        options.width =\n                            resp.CHARACTER_MAXIMUM_LENGTH > 0\n                                ? resp.CHARACTER_MAXIMUM_LENGTH\n                                : undefined;\n                    }\n\n                    ent.columns.push({\n                        generated,\n                        type: columnType,\n                        default: defaultValue,\n                        options,\n                        tscName,\n                        tscType,\n                    });\n                });\n        });\n        return entities;\n    }\n\n    public async GetIndexesFromEntity(\n        entities: Entity[],\n        schema: string,\n        dbNames: string\n    ): Promise<Entity[]> {\n        const response = await this.ExecQuery<{\n            TableName: string;\n            IndexName: string;\n            ColumnName: string;\n            is_unique: number;\n            is_primary_key: number;\n        }>(`SELECT TABLE_NAME TableName,INDEX_NAME IndexName,COLUMN_NAME ColumnName,CASE WHEN NON_UNIQUE=0 THEN 1 ELSE 0 END is_unique,\n            CASE WHEN INDEX_NAME='PRIMARY' THEN 1 ELSE 0 END is_primary_key\n            FROM information_schema.statistics sta\n            WHERE table_schema IN (${MysqlDriver.escapeCommaSeparatedList(\n                dbNames\n            )})`);\n        entities.forEach((ent) => {\n            const entityIndices = response.filter(\n                (filterVal) => filterVal.TableName === ent.tscName\n            );\n            const indexNames = new Set(entityIndices.map((v) => v.IndexName));\n            indexNames.forEach((indexName) => {\n                const records = entityIndices.filter(\n                    (v) => v.IndexName === indexName\n                );\n\n                const indexInfo: Index = {\n                    name: indexName,\n                    columns: [],\n                    options: {},\n                };\n                if (records[0].is_primary_key === 1) indexInfo.primary = true;\n                if (records[0].is_unique === 1) indexInfo.options.unique = true;\n\n                records.forEach((record) => {\n                    indexInfo.columns.push(record.ColumnName);\n                });\n                ent.indices.push(indexInfo);\n            });\n        });\n\n        return entities;\n    }\n\n    public async GetRelations(\n        entities: Entity[],\n        schema: string,\n        dbNames: string,\n        generationOptions: IGenerationOptions\n    ): Promise<Entity[]> {\n        const response = await this.ExecQuery<{\n            TableWithForeignKey: string;\n            FK_PartNo: number;\n            ForeignKeyColumn: string;\n            TableReferenced: string;\n            ForeignKeyColumnReferenced: string;\n            onDelete: \"RESTRICT\" | \"CASCADE\" | \"SET NULL\" | \"NO_ACTION\";\n            onUpdate: \"RESTRICT\" | \"CASCADE\" | \"SET NULL\" | \"NO_ACTION\";\n            object_id: string;\n        }>(`SELECT\n            CU.TABLE_NAME TableWithForeignKey,\n            CU.ORDINAL_POSITION FK_PartNo,\n            CU.COLUMN_NAME ForeignKeyColumn,\n            CU.REFERENCED_TABLE_NAME TableReferenced,\n            CU.REFERENCED_COLUMN_NAME ForeignKeyColumnReferenced,\n            RC.DELETE_RULE onDelete,\n            RC.UPDATE_RULE onUpdate,\n            CU.CONSTRAINT_NAME object_id\n           FROM\n            INFORMATION_SCHEMA.KEY_COLUMN_USAGE CU\n           JOIN\n            INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC\n                ON CU.CONSTRAINT_NAME=RC.CONSTRAINT_NAME AND CU.CONSTRAINT_SCHEMA = RC.CONSTRAINT_SCHEMA\n          WHERE\n            TABLE_SCHEMA IN (${MysqlDriver.escapeCommaSeparatedList(dbNames)})\n            AND CU.REFERENCED_TABLE_NAME IS NOT NULL;\n            `);\n        const relationsTemp: RelationInternal[] = [] as RelationInternal[];\n        const relationKeys = new Set(response.map((v) => v.object_id));\n\n        relationKeys.forEach((relationId) => {\n            const rows = response.filter((v) => v.object_id === relationId);\n            const ownerTable = entities.find(\n                (v) => v.sqlName === rows[0].TableWithForeignKey\n            );\n            const relatedTable = entities.find(\n                (v) => v.sqlName === rows[0].TableReferenced\n            );\n\n            if (!ownerTable || !relatedTable) {\n                TomgUtils.LogError(\n                    `Relation between tables ${rows[0].TableWithForeignKey} and ${rows[0].TableReferenced} wasn't found in entity model.`,\n                    true\n                );\n                return;\n            }\n            const internal: RelationInternal = {\n                ownerColumns: [],\n                relatedColumns: [],\n                ownerTable,\n                relatedTable,\n            };\n            if (rows[0].onDelete !== \"NO_ACTION\") {\n                internal.onDelete = rows[0].onDelete;\n            }\n            if (rows[0].onUpdate !== \"NO_ACTION\") {\n                internal.onUpdate = rows[0].onUpdate;\n            }\n            rows.forEach((row) => {\n                internal.ownerColumns.push(row.ForeignKeyColumn);\n                internal.relatedColumns.push(row.ForeignKeyColumnReferenced);\n            });\n            relationsTemp.push(internal);\n        });\n\n        const retVal = MysqlDriver.GetRelationsFromRelationTempInfo(\n            relationsTemp,\n            entities,\n            generationOptions\n        );\n        return retVal;\n    }\n\n    public async DisconnectFromServer() {\n        const promise = new Promise<boolean>((resolve, reject) => {\n            this.Connection.end((err) => {\n                if (!err) {\n                    resolve(true);\n                } else {\n                    TomgUtils.LogError(\n                        `Error disconnecting from ${this.EngineName} Server.`,\n                        false,\n                        err.message\n                    );\n                    reject(err);\n                }\n            });\n        });\n        if (this.Connection) {\n            await promise;\n        }\n    }\n\n    public async ConnectToServer(connectionOptons: IConnectionOptions) {\n        const databaseName = connectionOptons.databaseName.split(\",\")[0];\n        let config: MYSQL.ConnectionConfig;\n        if (connectionOptons.ssl) {\n            config = {\n                database: databaseName,\n                host: connectionOptons.host,\n                password: connectionOptons.password,\n                port: connectionOptons.port,\n                ssl: {\n                    rejectUnauthorized: false,\n                },\n                timeout: 60 * 60 * 1000,\n                user: connectionOptons.user,\n            };\n        } else {\n            config = {\n                database: databaseName,\n                host: connectionOptons.host,\n                password: connectionOptons.password,\n                port: connectionOptons.port,\n                timeout: 60 * 60 * 1000,\n                user: connectionOptons.user,\n            };\n        }\n\n        const promise = new Promise<boolean>((resolve, reject) => {\n            this.Connection = this.MYSQL.createConnection(config);\n\n            this.Connection.connect((err) => {\n                if (!err) {\n                    resolve(true);\n                } else {\n                    TomgUtils.LogError(\n                        `Error connecting to ${this.EngineName} Server.`,\n                        false,\n                        err.message\n                    );\n                    reject(err);\n                }\n            });\n        });\n\n        await promise;\n    }\n\n    public async CreateDB(dbName: string) {\n        await this.ExecQuery(`CREATE DATABASE ${dbName}; `);\n    }\n\n    public async UseDB(dbName: string) {\n        await this.ExecQuery(`USE ${dbName}; `);\n    }\n\n    public async DropDB(dbName: string) {\n        await this.ExecQuery(`DROP DATABASE ${dbName}; `);\n    }\n\n    public async CheckIfDBExists(dbName: string): Promise<boolean> {\n        const resp = await this.ExecQuery(`SHOW DATABASES LIKE '${dbName}' `);\n        return resp.length > 0;\n    }\n\n    public async ExecQuery<T>(sql: string): Promise<T[]> {\n        const ret: T[] = [];\n        const query = this.Connection.query(sql);\n        const stream = query.stream({});\n        const promise = new Promise<boolean>((resolve, reject) => {\n            stream.on(\"data\", (chunk) => {\n                ret.push((chunk as unknown) as T);\n            });\n            stream.on(\"error\", (err) => reject(err));\n            stream.on(\"end\", () => resolve(true));\n        });\n        await promise;\n        return ret;\n    }\n\n    private static ReturnDefaultValueFunction(\n        defVal: string | undefined,\n        dataType: string\n    ): string | undefined {\n        let defaultValue = defVal;\n        if (!defaultValue || defaultValue === \"NULL\") {\n            return undefined;\n        }\n        if (defaultValue.toLowerCase() === \"current_timestamp()\") {\n            defaultValue = \"CURRENT_TIMESTAMP\";\n        }\n        if (\n            defaultValue === \"CURRENT_TIMESTAMP\" ||\n            defaultValue.startsWith(`'`)\n        ) {\n            return `() => \"${defaultValue}\"`;\n        }\n        if (dataType === \"set\") {\n            return `() => ['${defaultValue.split(\",\").join(\"','\")}']`;\n        }\n\n        return `() => \"'${defaultValue}'\"`;\n    }\n}\n"]}