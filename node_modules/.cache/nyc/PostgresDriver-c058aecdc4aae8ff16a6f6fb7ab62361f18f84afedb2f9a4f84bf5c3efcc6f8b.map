{"version":3,"file":"/home/nemo/work/github/typeorm-model-generator/src/drivers/PostgresDriver.ts","sources":["/home/nemo/work/github/typeorm-model-generator/src/drivers/PostgresDriver.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as PG from \"pg\";\nimport { ConnectionOptions } from \"typeorm\";\nimport * as TypeormDriver from \"typeorm/driver/postgres/PostgresDriver\";\nimport { DataTypeDefaults } from \"typeorm/driver/types/DataTypeDefaults\";\nimport * as TomgUtils from \"../Utils\";\nimport AbstractDriver from \"./AbstractDriver\";\nimport IConnectionOptions from \"../IConnectionOptions\";\nimport { Entity } from \"../models/Entity\";\nimport { Column } from \"../models/Column\";\nimport { Index } from \"../models/Index\";\nimport IGenerationOptions from \"../IGenerationOptions\";\nimport { RelationInternal } from \"../models/RelationInternal\";\n\nexport default class PostgresDriver extends AbstractDriver {\n    public defaultValues: DataTypeDefaults = new TypeormDriver.PostgresDriver({\n        options: { replication: undefined } as ConnectionOptions,\n    } as any).dataTypeDefaults;\n\n    public readonly standardPort = 5432;\n\n    public readonly standardUser = \"postgres\";\n\n    public readonly standardSchema = \"public\";\n\n    private PG: typeof PG;\n\n    private Connection: PG.Client;\n\n    public constructor() {\n        super();\n        try {\n            // eslint-disable-next-line import/no-extraneous-dependencies, global-require, import/no-unresolved\n            this.PG = require(\"pg\");\n        } catch (error) {\n            TomgUtils.LogError(\"\", false, error);\n            throw error;\n        }\n    }\n\n    public GetAllTablesQuery = async (\n        schema: string,\n        dbNames: string,\n        tableNames: string[]\n    ) => {\n        const tableCondition =\n            tableNames.length > 0\n                ? ` AND NOT table_name IN ('${tableNames.join(\"','\")}')`\n                : \"\";\n        const response: {\n            TABLE_SCHEMA: string;\n            TABLE_NAME: string;\n            DB_NAME: string;\n        }[] = (\n            await this.Connection.query(\n                `SELECT table_schema as \"TABLE_SCHEMA\",table_name as \"TABLE_NAME\", table_catalog as \"DB_NAME\" FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE' AND table_schema in (${schema}) ${tableCondition}`\n            )\n        ).rows;\n        return response;\n    };\n\n    public async GetCoulmnsFromEntity(\n        entities: Entity[],\n        schema: string\n    ): Promise<Entity[]> {\n        const response: {\n            table_name: string;\n            column_name: string;\n            udt_name: string;\n            column_default: string;\n            is_nullable: string;\n            data_type: string;\n            character_maximum_length: number;\n            numeric_precision: number;\n            numeric_scale: number;\n            isidentity: string;\n            isunique: string;\n            enumvalues: string | null;\n        }[] = (\n            await this.Connection\n                .query(`SELECT table_name,column_name,udt_name,column_default,is_nullable,\n                    data_type,character_maximum_length,numeric_precision,numeric_scale,\n                    case when column_default LIKE 'nextval%' then 'YES' else 'NO' end isidentity,\n        \t\t\t(SELECT count(*)\n            FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc\n                inner join INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE cu\n                    on cu.CONSTRAINT_NAME = tc.CONSTRAINT_NAME\n            where\n                tc.CONSTRAINT_TYPE = 'UNIQUE'\n                and tc.TABLE_NAME = c.TABLE_NAME\n                and cu.COLUMN_NAME = c.COLUMN_NAME\n                and tc.TABLE_SCHEMA=c.TABLE_SCHEMA) IsUnique,\n                (SELECT\n        string_agg(enumlabel, ',')\n        FROM \"pg_enum\" \"e\"\n        INNER JOIN \"pg_type\" \"t\" ON \"t\".\"oid\" = \"e\".\"enumtypid\"\n        INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"t\".\"typnamespace\"\n        WHERE \"n\".\"nspname\" = table_schema AND \"t\".\"typname\"=udt_name\n                ) enumValues\n                    FROM INFORMATION_SCHEMA.COLUMNS c\n                    where table_schema in (${schema})\n        \t\t\torder by ordinal_position`)\n        ).rows;\n        entities.forEach((ent) => {\n            response\n                .filter((filterVal) => filterVal.table_name === ent.tscName)\n                .forEach((resp) => {\n                    const tscName = resp.column_name;\n                    const options: Column[\"options\"] = {\n                        name: resp.column_name,\n                    };\n                    if (resp.is_nullable === \"YES\") options.nullable = true;\n                    if (resp.isunique === \"1\") options.unique = true;\n\n                    const generated =\n                        resp.isidentity === \"YES\" ? true : undefined;\n                    const defaultValue = generated\n                        ? undefined\n                        : PostgresDriver.ReturnDefaultValueFunction(\n                              resp.column_default,\n                              resp.data_type\n                          );\n\n                    const columnTypes = this.MatchColumnTypes(\n                        resp.data_type,\n                        resp.udt_name,\n                        resp.enumvalues\n                    );\n                    if (columnTypes.tsType === \"NonNullable<unknown>\") {\n                        if (\n                            resp.data_type === \"USER-DEFINED\" ||\n                            resp.data_type === \"ARRAY\"\n                        ) {\n                            TomgUtils.LogError(\n                                `Unknown ${resp.data_type} column type: ${resp.udt_name} table name: ${resp.table_name} column name: ${resp.column_name}`\n                            );\n                        } else {\n                            TomgUtils.LogError(\n                                `Unknown column type: ${resp.data_type} table name: ${resp.table_name} column name: ${resp.column_name}`\n                            );\n                        }\n                        return;\n                    }\n\n                    const columnType = columnTypes.sqlType;\n                    let tscType = columnTypes.tsType;\n                    if (columnTypes.isArray) options.array = true;\n                    if (columnTypes.enumValues.length > 0)\n                        options.enum = columnTypes.enumValues;\n                    if (options.array) {\n                        tscType = tscType\n                            .split(\"|\")\n                            .map((x) => `${x.replace(\"|\", \"\").trim()}[]`)\n                            .join(\" | \");\n                    }\n\n                    if (\n                        this.ColumnTypesWithPrecision.some(\n                            (v) => v === columnType\n                        )\n                    ) {\n                        if (resp.numeric_precision !== null) {\n                            options.precision = resp.numeric_precision;\n                        }\n                        if (resp.numeric_scale !== null) {\n                            options.scale = resp.numeric_scale;\n                        }\n                    }\n                    if (\n                        this.ColumnTypesWithLength.some((v) => v === columnType)\n                    ) {\n                        options.length =\n                            resp.character_maximum_length > 0\n                                ? resp.character_maximum_length\n                                : undefined;\n                    }\n                    if (\n                        this.ColumnTypesWithWidth.some((v) => v === columnType)\n                    ) {\n                        options.width =\n                            resp.character_maximum_length > 0\n                                ? resp.character_maximum_length\n                                : undefined;\n                    }\n\n                    ent.columns.push({\n                        generated,\n                        type: columnType,\n                        default: defaultValue,\n                        options,\n                        tscName,\n                        tscType,\n                    });\n                });\n        });\n        return entities;\n    }\n\n    public MatchColumnTypes(\n        dataType: string,\n        udtName: string,\n        enumValues: string | null\n    ) {\n        let ret: {\n            tsType: Column[\"tscType\"];\n            sqlType: string;\n            isArray: boolean;\n            enumValues: string[];\n        } = {\n            tsType: \"\",\n            sqlType: dataType,\n            isArray: false,\n            enumValues: [],\n        };\n        switch (dataType) {\n            case \"int2\":\n                ret.tsType = \"number\";\n                break;\n            case \"int4\":\n                ret.tsType = \"number\";\n                break;\n            case \"int8\":\n                ret.tsType = \"string\";\n                break;\n            case \"smallint\":\n                ret.tsType = \"number\";\n                break;\n            case \"integer\":\n                ret.tsType = \"number\";\n                break;\n            case \"bigint\":\n                ret.tsType = \"string\";\n                break;\n            case \"decimal\":\n                ret.tsType = \"string\";\n                break;\n            case \"numeric\":\n                ret.tsType = \"string\";\n                break;\n            case \"real\":\n                ret.tsType = \"number\";\n                break;\n            case \"float\":\n                ret.tsType = \"number\";\n                break;\n            case \"float4\":\n                ret.tsType = \"number\";\n                break;\n            case \"float8\":\n                ret.tsType = \"number\";\n                break;\n            case \"double precision\":\n                ret.tsType = \"number\";\n                break;\n            case \"money\":\n                ret.tsType = \"string\";\n                break;\n            case \"character varying\":\n                ret.tsType = \"string\";\n                break;\n            case \"varchar\":\n                ret.tsType = \"string\";\n                break;\n            case \"character\":\n                ret.tsType = \"string\";\n                break;\n            case \"char\":\n                ret.tsType = \"string\";\n                break;\n            case \"bpchar\":\n                ret.sqlType = \"char\";\n                ret.tsType = \"string\";\n                break;\n            case \"text\":\n                ret.tsType = \"string\";\n                break;\n            case \"citext\":\n                ret.tsType = \"string\";\n                break;\n            case \"hstore\":\n                ret.tsType = \"string\";\n                break;\n            case \"bytea\":\n                ret.tsType = \"Buffer\";\n                break;\n            case \"bit\":\n                ret.tsType = \"string\";\n                break;\n            case \"varbit\":\n                ret.tsType = \"string\";\n                break;\n            case \"bit varying\":\n                ret.tsType = \"string\";\n                break;\n            case \"timetz\":\n                ret.tsType = \"string\";\n                break;\n            case \"timestamptz\":\n                ret.tsType = \"Date\";\n                break;\n            case \"timestamp\":\n                ret.tsType = \"string\";\n                break;\n            case \"timestamp without time zone\":\n                ret.tsType = \"Date\";\n                break;\n            case \"timestamp with time zone\":\n                ret.tsType = \"Date\";\n                break;\n            case \"date\":\n                ret.tsType = \"string\";\n                break;\n            case \"time\":\n                ret.tsType = \"string\";\n                break;\n            case \"time without time zone\":\n                ret.tsType = \"string\";\n                break;\n            case \"time with time zone\":\n                ret.tsType = \"string\";\n                break;\n            case \"interval\":\n                ret.tsType = \"any\";\n                break;\n            case \"bool\":\n                ret.tsType = \"boolean\";\n                break;\n            case \"boolean\":\n                ret.tsType = \"boolean\";\n                break;\n            case \"point\":\n                ret.tsType = \"string | object\";\n                break;\n            case \"line\":\n                ret.tsType = \"string\";\n                break;\n            case \"lseg\":\n                ret.tsType = \"string | string[]\";\n                break;\n            case \"box\":\n                ret.tsType = \"string | object\";\n                break;\n            case \"path\":\n                ret.tsType = \"string\";\n                break;\n            case \"polygon\":\n                ret.tsType = \"string\";\n                break;\n            case \"circle\":\n                ret.tsType = \"string | object\";\n                break;\n            case \"cidr\":\n                ret.tsType = \"string\";\n                break;\n            case \"inet\":\n                ret.tsType = \"string\";\n                break;\n            case \"macaddr\":\n                ret.tsType = \"string\";\n                break;\n            case \"tsvector\":\n                ret.tsType = \"string\";\n                break;\n            case \"tsquery\":\n                ret.tsType = \"string\";\n                break;\n            case \"uuid\":\n                ret.tsType = \"string\";\n                break;\n            case \"xml\":\n                ret.tsType = \"string\";\n                break;\n            case \"json\":\n                ret.tsType = \"object\";\n                break;\n            case \"jsonb\":\n                ret.tsType = \"object\";\n                break;\n            case \"int4range\":\n                ret.tsType = \"string\";\n                break;\n            case \"int8range\":\n                ret.tsType = \"string\";\n                break;\n            case \"numrange\":\n                ret.tsType = \"string\";\n                break;\n            case \"tsrange\":\n                ret.tsType = \"string\";\n                break;\n            case \"tstzrange\":\n                ret.tsType = \"string\";\n                break;\n            case \"daterange\":\n                ret.tsType = \"string\";\n                break;\n            case \"ARRAY\":\n                ret = this.MatchColumnTypes(\n                    udtName.substring(1),\n                    udtName,\n                    enumValues\n                );\n                ret.isArray = true;\n                break;\n            case \"USER-DEFINED\":\n                ret.tsType = \"string\";\n                switch (udtName) {\n                    case \"citext\":\n                    case \"hstore\":\n                    case \"geography\":\n                    case \"geometry\":\n                        ret.sqlType = udtName;\n                        break;\n                    default:\n                        if (enumValues) {\n                            ret.tsType = (`\"${enumValues\n                                .split(\",\")\n                                .join('\" | \"')}\"` as never) as string;\n                            ret.sqlType = \"enum\";\n                            ret.enumValues = enumValues.split(\",\");\n                        }\n                        break;\n                }\n                break;\n            default:\n                ret.tsType = \"NonNullable<unknown>\";\n                break;\n        }\n        return ret;\n    }\n\n    public async GetIndexesFromEntity(\n        entities: Entity[],\n        schema: string\n    ): Promise<Entity[]> {\n        const response: {\n            tablename: string;\n            indexname: string;\n            columnname: string;\n            is_unique: number;\n            is_primary_key: number;\n        }[] = (\n            await this.Connection.query(`SELECT\n        c.relname AS tablename,\n        i.relname as indexname,\n        f.attname AS columnname,\n        CASE\n            WHEN ix.indisunique = true THEN 1\n            ELSE 0\n        END AS is_unique,\n        CASE\n            WHEN ix.indisprimary='true' THEN 1\n            ELSE 0\n        END AS is_primary_key\n        FROM pg_attribute f\n        JOIN pg_class c ON c.oid = f.attrelid\n        JOIN pg_type t ON t.oid = f.atttypid\n        LEFT JOIN pg_attrdef d ON d.adrelid = c.oid AND d.adnum = f.attnum\n        LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\n        LEFT JOIN pg_index AS ix ON f.attnum = ANY(ix.indkey) and c.oid = f.attrelid and c.oid = ix.indrelid\n        LEFT JOIN pg_class AS i ON ix.indexrelid = i.oid\n        WHERE c.relkind = 'r'::char\n        AND n.nspname in (${schema})\n        AND f.attnum > 0\n        AND i.oid<>0\n        ORDER BY c.relname,f.attname;`)\n        ).rows;\n        entities.forEach((ent) => {\n            const entityIndices = response.filter(\n                (filterVal) => filterVal.tablename === ent.tscName\n            );\n            const indexNames = new Set(entityIndices.map((v) => v.indexname));\n            indexNames.forEach((indexName) => {\n                const records = entityIndices.filter(\n                    (v) => v.indexname === indexName\n                );\n                const indexInfo: Index = {\n                    columns: [],\n                    options: {},\n                    name: records[0].indexname,\n                };\n                if (records[0].is_primary_key === 1) indexInfo.primary = true;\n                if (records[0].is_unique === 1) indexInfo.options.unique = true;\n                records.forEach((record) => {\n                    indexInfo.columns.push(record.columnname);\n                });\n                ent.indices.push(indexInfo);\n            });\n        });\n\n        return entities;\n    }\n\n    public async GetRelations(\n        entities: Entity[],\n        schema: string,\n        dbNames: string,\n        generationOptions: IGenerationOptions\n    ): Promise<Entity[]> {\n        const response: {\n            tablewithforeignkey: string;\n            fk_partno: number;\n            foreignkeycolumn: string;\n            tablereferenced: string;\n            foreignkeycolumnreferenced: string;\n            ondelete: \"RESTRICT\" | \"CASCADE\" | \"SET NULL\" | \"NO ACTION\";\n            onupdate: \"RESTRICT\" | \"CASCADE\" | \"SET NULL\" | \"NO ACTION\";\n            object_id: string;\n            // Distinct because of note in https://www.postgresql.org/docs/9.1/information-schema.html\n        }[] = (\n            await this.Connection.query(`SELECT DISTINCT\n            con.relname AS tablewithforeignkey,\n            att.attnum as fk_partno,\n                 att2.attname AS foreignkeycolumn,\n              cl.relname AS tablereferenced,\n              att.attname AS foreignkeycolumnreferenced,\n              delete_rule as ondelete,\n              update_rule as onupdate,\n                concat(con.conname,con.conrelid,con.confrelid) as object_id\n               FROM (\n                   SELECT\n                     unnest(con1.conkey) AS parent,\n                     unnest(con1.confkey) AS child,\n                     con1.confrelid,\n                     con1.conrelid,\n                     cl_1.relname,\n                   con1.conname,\n                   nspname\n                   FROM\n                     pg_class cl_1,\n                     pg_namespace ns,\n                     pg_constraint con1\n                   WHERE\n                     con1.contype = 'f'::\"char\"\n                     AND cl_1.relnamespace = ns.oid\n                     AND con1.conrelid = cl_1.oid\n                     and nspname in (${schema})\n              ) con,\n                pg_attribute att,\n                pg_class cl,\n                pg_attribute att2,\n                information_schema.referential_constraints rc\n              WHERE\n                att.attrelid = con.confrelid\n                AND att.attnum = con.child\n                AND cl.oid = con.confrelid\n                AND att2.attrelid = con.conrelid\n                AND att2.attnum = con.parent\n                AND rc.constraint_name= con.conname AND constraint_catalog=current_database() AND rc.constraint_schema=nspname\n                `)\n        ).rows;\n\n        const relationsTemp: RelationInternal[] = [] as RelationInternal[];\n        const relationKeys = new Set(response.map((v) => v.object_id));\n\n        relationKeys.forEach((relationId) => {\n            const rows = response.filter((v) => v.object_id === relationId);\n            const ownerTable = entities.find(\n                (v) => v.sqlName === rows[0].tablewithforeignkey\n            );\n            const relatedTable = entities.find(\n                (v) => v.sqlName === rows[0].tablereferenced\n            );\n            if (!ownerTable || !relatedTable) {\n                TomgUtils.LogError(\n                    `Relation between tables ${rows[0].tablewithforeignkey} and ${rows[0].tablereferenced} wasn't found in entity model.`,\n                    true\n                );\n                return;\n            }\n            const internal: RelationInternal = {\n                ownerColumns: [],\n                relatedColumns: [],\n                ownerTable,\n                relatedTable,\n            };\n            if (rows[0].ondelete !== \"NO ACTION\") {\n                internal.onDelete = rows[0].ondelete;\n            }\n            if (rows[0].onupdate !== \"NO ACTION\") {\n                internal.onUpdate = rows[0].onupdate;\n            }\n            rows.forEach((row) => {\n                internal.ownerColumns.push(row.foreignkeycolumn);\n                internal.relatedColumns.push(row.foreignkeycolumnreferenced);\n            });\n            relationsTemp.push(internal);\n        });\n\n        const retVal = PostgresDriver.GetRelationsFromRelationTempInfo(\n            relationsTemp,\n            entities,\n            generationOptions\n        );\n        return retVal;\n    }\n\n    public async DisconnectFromServer() {\n        if (this.Connection) {\n            const promise = new Promise<boolean>((resolve, reject) => {\n                this.Connection.end((err) => {\n                    if (!err) {\n                        resolve(true);\n                    } else {\n                        TomgUtils.LogError(\n                            \"Error disconnecting from to Postgres Server.\",\n                            false,\n                            err.message\n                        );\n                        reject(err);\n                    }\n                });\n            });\n            await promise;\n        }\n    }\n\n    public async ConnectToServer(connectionOptons: IConnectionOptions) {\n        this.Connection = new this.PG.Client({\n            database: connectionOptons.databaseName,\n            host: connectionOptons.host,\n            password: connectionOptons.password,\n            port: connectionOptons.port,\n            ssl: connectionOptons.ssl,\n            // eslint-disable-next-line @typescript-eslint/camelcase\n            statement_timeout: 60 * 60 * 1000,\n            user: connectionOptons.user,\n        });\n\n        const promise = new Promise<boolean>((resolve, reject) => {\n            this.Connection.connect((err) => {\n                if (!err) {\n                    resolve(true);\n                } else {\n                    TomgUtils.LogError(\n                        \"Error connecting to Postgres Server.\",\n                        false,\n                        err.message\n                    );\n                    reject(err);\n                }\n            });\n        });\n\n        await promise;\n    }\n\n    public async CreateDB(dbName: string) {\n        await this.Connection.query(`CREATE DATABASE ${dbName}; `);\n    }\n\n    public async UseDB(dbName: string) {\n        await this.Connection.query(`USE ${dbName}; `);\n    }\n\n    public async DropDB(dbName: string) {\n        await this.Connection.query(`DROP DATABASE ${dbName}; `);\n    }\n\n    public async CheckIfDBExists(dbName: string): Promise<boolean> {\n        const resp = await this.Connection.query(\n            `SELECT datname FROM pg_database  WHERE datname  ='${dbName}' `\n        );\n        return resp.rowCount > 0;\n    }\n\n    private static ReturnDefaultValueFunction(\n        defVal: string | null,\n        dataType: string\n    ): string | undefined {\n        let defaultValue = defVal;\n        if (!defaultValue) {\n            return undefined;\n        }\n        defaultValue = defaultValue.replace(/'::[\\w\" ]*/, \"'\");\n\n        if ([\"json\", \"jsonb\"].some((x) => x === dataType)) {\n            return `${defaultValue.slice(1, defaultValue.length - 1)}`;\n        }\n        return /^'(.*)?'|[-]?[\\d.]+$/.test(defaultValue)\n            ? defaultValue\n            : `() => \"${defaultValue}\"`;\n    }\n}\n"]}