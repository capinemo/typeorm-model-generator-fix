{"version":3,"file":"/home/nemo/work/github/typeorm-model-generator/src/drivers/MssqlDriver.ts","sources":["/home/nemo/work/github/typeorm-model-generator/src/drivers/MssqlDriver.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as MSSQL from \"mssql\";\nimport { ConnectionOptions } from \"typeorm\";\nimport * as TypeormDriver from \"typeorm/driver/sqlserver/SqlServerDriver\";\nimport { DataTypeDefaults } from \"typeorm/driver/types/DataTypeDefaults\";\nimport * as TomgUtils from \"../Utils\";\nimport AbstractDriver from \"./AbstractDriver\";\nimport IConnectionOptions from \"../IConnectionOptions\";\nimport { Entity } from \"../models/Entity\";\nimport { Column } from \"../models/Column\";\nimport { Index } from \"../models/Index\";\nimport IGenerationOptions from \"../IGenerationOptions\";\nimport { RelationInternal } from \"../models/RelationInternal\";\n\nexport default class MssqlDriver extends AbstractDriver {\n    public defaultValues: DataTypeDefaults = new TypeormDriver.SqlServerDriver({\n        options: { replication: undefined } as ConnectionOptions,\n    } as any).dataTypeDefaults;\n\n    public readonly standardPort = 1433;\n\n    public readonly standardSchema = \"dbo\";\n\n    public readonly standardUser = \"sa\";\n\n    private MSSQL: typeof MSSQL;\n\n    private Connection: MSSQL.ConnectionPool;\n\n    public constructor() {\n        super();\n        try {\n            // eslint-disable-next-line import/no-extraneous-dependencies, global-require, import/no-unresolved\n            this.MSSQL = require(\"mssql\");\n        } catch (error) {\n            TomgUtils.LogError(\"\", false, error);\n            throw error;\n        }\n    }\n\n    public GetAllTablesQuery = async (\n        schema: string,\n        dbNames: string,\n        tableNames: string[]\n    ) => {\n        const request = new this.MSSQL.Request(this.Connection);\n        const tableCondition =\n            tableNames.length > 0\n                ? ` AND NOT TABLE_NAME IN ('${tableNames.join(\"','\")}')`\n                : \"\";\n        const response: {\n            TABLE_SCHEMA: string;\n            TABLE_NAME: string;\n            DB_NAME: string;\n        }[] = (\n            await request.query(\n                `SELECT TABLE_SCHEMA,TABLE_NAME, table_catalog as \"DB_NAME\" FROM INFORMATION_SCHEMA.TABLES\nWHERE TABLE_TYPE='BASE TABLE' and TABLE_SCHEMA in (${schema}) AND TABLE_CATALOG in (${MssqlDriver.escapeCommaSeparatedList(\n                    dbNames\n                )}) ${tableCondition}`\n            )\n        ).recordset;\n        return response;\n    };\n\n    public async GetCoulmnsFromEntity(\n        entities: Entity[],\n        schema: string,\n        dbNames: string\n    ): Promise<Entity[]> {\n        const request = new this.MSSQL.Request(this.Connection);\n        const response: {\n            TABLE_NAME: string;\n            COLUMN_NAME: string;\n            TABLE_SCHEMA: string;\n            COLUMN_DEFAULT: string;\n            IS_NULLABLE: string;\n            DATA_TYPE: string;\n            CHARACTER_MAXIMUM_LENGTH: number;\n            NUMERIC_PRECISION: number;\n            NUMERIC_SCALE: number;\n            IsIdentity: number;\n            IsUnique: number;\n        }[] = (\n            await request.query(`SELECT TABLE_NAME,TABLE_SCHEMA,COLUMN_NAME,COLUMN_DEFAULT,IS_NULLABLE,\n        DATA_TYPE,CHARACTER_MAXIMUM_LENGTH,NUMERIC_PRECISION,NUMERIC_SCALE,\n        COLUMNPROPERTY(object_id(TABLE_NAME), COLUMN_NAME, 'IsIdentity') IsIdentity,\n        (SELECT count(*)\n         FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc\n             inner join INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE cu\n                 on cu.CONSTRAINT_NAME = tc.CONSTRAINT_NAME\n         where\n             tc.CONSTRAINT_TYPE = 'UNIQUE'\n             and tc.TABLE_NAME = c.TABLE_NAME\n             and cu.COLUMN_NAME = c.COLUMN_NAME\n             and tc.TABLE_SCHEMA=c.TABLE_SCHEMA) IsUnique\n        FROM INFORMATION_SCHEMA.COLUMNS c\n        where TABLE_SCHEMA in (${schema}) AND TABLE_CATALOG in (${MssqlDriver.escapeCommaSeparatedList(\n                dbNames\n            )})\n             order by ordinal_position`)\n        ).recordset;\n        entities.forEach((ent) => {\n            response\n                .filter((filterVal) => {\n                    return (\n                        filterVal.TABLE_NAME === ent.tscName &&\n                        filterVal.TABLE_SCHEMA === ent.schema\n                    );\n                })\n                .forEach((resp) => {\n                    const tscName = resp.COLUMN_NAME;\n                    const options: Column[\"options\"] = {\n                        name: resp.COLUMN_NAME,\n                    };\n                    if (resp.IS_NULLABLE === \"YES\") options.nullable = true;\n                    if (resp.IsUnique === 1) options.unique = true;\n                    const generated = resp.IsIdentity === 1 ? true : undefined;\n                    const defaultValue = MssqlDriver.ReturnDefaultValueFunction(\n                        resp.COLUMN_DEFAULT\n                    );\n                    const columnType = resp.DATA_TYPE;\n                    let tscType = \"\";\n                    switch (resp.DATA_TYPE) {\n                        case \"bigint\":\n                            tscType = \"string\";\n                            break;\n                        case \"bit\":\n                            tscType = \"boolean\";\n                            break;\n                        case \"decimal\":\n                            tscType = \"number\";\n                            break;\n                        case \"int\":\n                            tscType = \"number\";\n                            break;\n                        case \"money\":\n                            tscType = \"number\";\n                            break;\n                        case \"numeric\":\n                            tscType = \"number\";\n                            break;\n                        case \"smallint\":\n                            tscType = \"number\";\n                            break;\n                        case \"smallmoney\":\n                            tscType = \"number\";\n                            break;\n                        case \"tinyint\":\n                            tscType = \"number\";\n                            break;\n                        case \"float\":\n                            tscType = \"number\";\n                            break;\n                        case \"real\":\n                            tscType = \"number\";\n                            break;\n                        case \"date\":\n                            tscType = \"Date\";\n                            break;\n                        case \"datetime2\":\n                            tscType = \"Date\";\n                            break;\n                        case \"datetime\":\n                            tscType = \"Date\";\n                            break;\n                        case \"datetimeoffset\":\n                            tscType = \"Date\";\n                            break;\n                        case \"smalldatetime\":\n                            tscType = \"Date\";\n                            break;\n                        case \"time\":\n                            tscType = \"Date\";\n                            break;\n                        case \"char\":\n                            tscType = \"string\";\n                            break;\n                        case \"text\":\n                            tscType = \"string\";\n                            break;\n                        case \"varchar\":\n                            tscType = \"string\";\n                            break;\n                        case \"nchar\":\n                            tscType = \"string\";\n                            break;\n                        case \"ntext\":\n                            tscType = \"string\";\n                            break;\n                        case \"nvarchar\":\n                            tscType = \"string\";\n                            break;\n                        case \"binary\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"image\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"varbinary\":\n                            tscType = \"Buffer\";\n                            break;\n                        case \"hierarchyid\":\n                            tscType = \"string\";\n                            break;\n                        case \"sql_variant\":\n                            tscType = \"string\";\n                            break;\n                        case \"timestamp\":\n                            tscType = \"Date\";\n                            break;\n                        case \"uniqueidentifier\":\n                            tscType = \"string\";\n                            break;\n                        case \"xml\":\n                            tscType = \"string\";\n                            break;\n                        case \"geometry\":\n                            tscType = \"string\";\n                            break;\n                        case \"geography\":\n                            tscType = \"string\";\n                            break;\n                        default:\n                            tscType = \"NonNullable<unknown>\";\n                            TomgUtils.LogError(\n                                `Unknown column type: ${resp.DATA_TYPE}  table name: ${resp.TABLE_NAME} column name: ${resp.COLUMN_NAME}`\n                            );\n                            break;\n                    }\n\n                    if (\n                        this.ColumnTypesWithPrecision.some(\n                            (v) => v === columnType\n                        )\n                    ) {\n                        if (resp.NUMERIC_PRECISION !== null) {\n                            options.precision = resp.NUMERIC_PRECISION;\n                        }\n                        if (resp.NUMERIC_SCALE !== null) {\n                            options.scale = resp.NUMERIC_SCALE;\n                        }\n                    }\n                    if (\n                        this.ColumnTypesWithLength.some((v) => v === columnType)\n                    ) {\n                        options.length =\n                            resp.CHARACTER_MAXIMUM_LENGTH > 0\n                                ? resp.CHARACTER_MAXIMUM_LENGTH\n                                : undefined;\n                    }\n                    ent.columns.push({\n                        generated,\n                        type: columnType,\n                        default: defaultValue,\n                        options,\n                        tscName,\n                        tscType,\n                    });\n                });\n        });\n        return entities;\n    }\n\n    public async GetIndexesFromEntity(\n        entities: Entity[],\n        schema: string,\n        dbNames: string\n    ): Promise<Entity[]> {\n        const request = new this.MSSQL.Request(this.Connection);\n        const response: {\n            TableName: string;\n            TableSchema: string;\n            IndexName: string;\n            ColumnName: string;\n            is_unique: boolean;\n            is_primary_key: boolean;\n        }[] = [];\n        await Promise.all(\n            dbNames.split(\",\").map(async (dbName) => {\n                if (dbNames.length > 1) {\n                    await this.UseDB(dbName);\n                }\n                const resp: {\n                    TableName: string;\n                    TableSchema: string;\n                    IndexName: string;\n                    ColumnName: string;\n                    is_unique: boolean;\n                    is_primary_key: boolean;\n                }[] = (\n                    await request.query(`SELECT\n             TableName = t.name,\n             TableSchema = s.name,\n             IndexName = ind.name,\n             ColumnName = col.name,\n             ind.is_unique,\n             ind.is_primary_key\n        FROM\n             sys.indexes ind\n        INNER JOIN\n             sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id\n        INNER JOIN\n             sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id\n        INNER JOIN\n             sys.tables t ON ind.object_id = t.object_id\n        INNER JOIN\n             sys.schemas s on s.schema_id=t.schema_id\n        WHERE\n             t.is_ms_shipped = 0 and s.name in (${schema})\n        ORDER BY\n             t.name, ind.name, ind.index_id, ic.key_ordinal;`)\n                ).recordset;\n                response.push(...resp);\n            })\n        );\n\n        entities.forEach((ent) => {\n            const entityIndices = response.filter(\n                (filterVal) =>\n                    filterVal.TableName === ent.tscName &&\n                    filterVal.TableSchema === ent.schema\n            );\n            const indexNames = new Set(entityIndices.map((v) => v.IndexName));\n            indexNames.forEach((indexName) => {\n                const records = entityIndices.filter(\n                    (v) => v.IndexName === indexName\n                );\n                const indexInfo: Index = {\n                    columns: [],\n                    options: {},\n                    name: records[0].IndexName,\n                };\n                if (records[0].is_primary_key) indexInfo.primary = true;\n                if (records[0].is_unique) indexInfo.options.unique = true;\n                records.forEach((record) => {\n                    indexInfo.columns.push(record.ColumnName);\n                });\n                ent.indices.push(indexInfo);\n            });\n        });\n\n        return entities;\n    }\n\n    public async GetRelations(\n        entities: Entity[],\n        schema: string,\n        dbNames: string,\n        generationOptions: IGenerationOptions\n    ): Promise<Entity[]> {\n        const request = new this.MSSQL.Request(this.Connection);\n        const response: {\n            TableWithForeignKey: string;\n            FK_PartNo: number;\n            ForeignKeyColumn: string;\n            TableReferenced: string;\n            ForeignKeyColumnReferenced: string;\n            onDelete: \"RESTRICT\" | \"CASCADE\" | \"SET_NULL\" | \"NO_ACTION\";\n            onUpdate: \"RESTRICT\" | \"CASCADE\" | \"SET_NULL\" | \"NO_ACTION\";\n            objectId: number;\n        }[] = [];\n        await Promise.all(\n            dbNames.split(\",\").map(async (dbName) => {\n                if (dbNames.length > 1) {\n                    await this.UseDB(dbName);\n                }\n                const resp: {\n                    TableWithForeignKey: string;\n                    FK_PartNo: number;\n                    ForeignKeyColumn: string;\n                    TableReferenced: string;\n                    ForeignKeyColumnReferenced: string;\n                    onDelete: \"RESTRICT\" | \"CASCADE\" | \"SET_NULL\" | \"NO_ACTION\";\n                    onUpdate: \"RESTRICT\" | \"CASCADE\" | \"SET_NULL\" | \"NO_ACTION\";\n                    objectId: number;\n                }[] = (\n                    await request.query(`select\n            parentTable.name as TableWithForeignKey,\n            fkc.constraint_column_id as FK_PartNo,\n             parentColumn.name as ForeignKeyColumn,\n             referencedTable.name as TableReferenced,\n             referencedColumn.name as ForeignKeyColumnReferenced,\n             fk.delete_referential_action_desc as onDelete,\n             fk.update_referential_action_desc as onUpdate,\n             fk.object_id as objectId\n        from\n            sys.foreign_keys fk\n        inner join\n            sys.foreign_key_columns as fkc on fkc.constraint_object_id=fk.object_id\n        inner join\n            sys.tables as parentTable on fkc.parent_object_id = parentTable.object_id\n        inner join\n            sys.columns as parentColumn on fkc.parent_object_id = parentColumn.object_id and fkc.parent_column_id = parentColumn.column_id\n        inner join\n            sys.tables as referencedTable on fkc.referenced_object_id = referencedTable.object_id\n        inner join\n            sys.columns as referencedColumn on fkc.referenced_object_id = referencedColumn.object_id and fkc.referenced_column_id = referencedColumn.column_id\n        inner join\n        \tsys.schemas as parentSchema on parentSchema.schema_id=parentTable.schema_id\n        where\n            fk.is_disabled=0 and fk.is_ms_shipped=0 and parentSchema.name in (${schema})\n        order by\n            TableWithForeignKey, FK_PartNo`)\n                ).recordset;\n                response.push(...resp);\n            })\n        );\n        const relationsTemp: RelationInternal[] = [] as RelationInternal[];\n        const relationKeys = new Set(response.map((v) => v.objectId));\n\n        relationKeys.forEach((relationId) => {\n            const rows = response.filter((v) => v.objectId === relationId);\n            const ownerTable = entities.find(\n                (v) => v.sqlName === rows[0].TableWithForeignKey\n            );\n            const relatedTable = entities.find(\n                (v) => v.sqlName === rows[0].TableReferenced\n            );\n            if (!ownerTable || !relatedTable) {\n                TomgUtils.LogError(\n                    `Relation between tables ${rows[0].TableWithForeignKey} and ${rows[0].TableReferenced} wasn't found in entity model.`,\n                    true\n                );\n                return;\n            }\n            const internal: RelationInternal = {\n                ownerColumns: [],\n                relatedColumns: [],\n                ownerTable,\n                relatedTable,\n            };\n            switch (rows[0].onDelete) {\n                case \"NO_ACTION\":\n                    break;\n                case \"SET_NULL\":\n                    internal.onDelete = \"SET NULL\";\n                    break;\n                default:\n                    internal.onDelete = rows[0].onDelete;\n                    break;\n            }\n            switch (rows[0].onUpdate) {\n                case \"NO_ACTION\":\n                    break;\n                case \"SET_NULL\":\n                    internal.onUpdate = \"SET NULL\";\n                    break;\n                default:\n                    internal.onUpdate = rows[0].onUpdate;\n                    break;\n            }\n            rows.forEach((row) => {\n                internal.ownerColumns.push(row.ForeignKeyColumn);\n                internal.relatedColumns.push(row.ForeignKeyColumnReferenced);\n            });\n            relationsTemp.push(internal);\n        });\n\n        const retVal = MssqlDriver.GetRelationsFromRelationTempInfo(\n            relationsTemp,\n            entities,\n            generationOptions\n        );\n        return retVal;\n    }\n\n    public async DisconnectFromServer() {\n        if (this.Connection) {\n            await this.Connection.close();\n        }\n    }\n\n    public async ConnectToServer(connectionOptons: IConnectionOptions) {\n        const databaseName = connectionOptons.databaseName.split(\",\")[0];\n        const config: MSSQL.config = {\n            database: databaseName,\n            options: {\n                appName: \"typeorm-model-generator\",\n                encrypt: connectionOptons.ssl,\n            },\n            password: connectionOptons.password,\n            port: connectionOptons.port,\n            requestTimeout: 60 * 60 * 1000,\n            server: connectionOptons.host,\n            user: connectionOptons.user,\n        };\n\n        const promise = new Promise<boolean>((resolve, reject) => {\n            this.Connection = new this.MSSQL.ConnectionPool(config, (err) => {\n                if (!err) {\n                    resolve(true);\n                } else {\n                    TomgUtils.LogError(\n                        \"Error connecting to MSSQL Server.\",\n                        false,\n                        err.message\n                    );\n                    reject(err);\n                }\n            });\n        });\n\n        await promise;\n    }\n\n    public async CreateDB(dbName: string) {\n        const request = new this.MSSQL.Request(this.Connection);\n        await request.query(`CREATE DATABASE ${dbName}; `);\n    }\n\n    public async UseDB(dbName: string) {\n        const request = new this.MSSQL.Request(this.Connection);\n        await request.query(`USE ${dbName}; `);\n    }\n\n    public async DropDB(dbName: string) {\n        const request = new this.MSSQL.Request(this.Connection);\n        await request.query(`DROP DATABASE ${dbName}; `);\n    }\n\n    public async CheckIfDBExists(dbName: string): Promise<boolean> {\n        const request = new this.MSSQL.Request(this.Connection);\n        const resp = await request.query(\n            `SELECT name FROM master.sys.databases WHERE name = N'${dbName}' `\n        );\n        return resp.recordset.length > 0;\n    }\n\n    private static ReturnDefaultValueFunction(\n        defVal: string | null\n    ): string | undefined {\n        let defaultValue = defVal;\n        if (!defaultValue) {\n            return undefined;\n        }\n        if (defaultValue.startsWith(\"(\") && defaultValue.endsWith(\")\")) {\n            defaultValue = defaultValue.slice(1, -1);\n        }\n\n        return `() => \"${defaultValue}\"`;\n    }\n}\n"]}