{"version":3,"file":"/home/nemo/work/github/typeorm-model-generator/src/Utils.ts","sources":["/home/nemo/work/github/typeorm-model-generator/src/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as changeCase from \"change-case\";\nimport * as path from \"path\";\nimport * as packagejson from \"../package.json\";\nimport { Entity } from \"./models/Entity\";\n\nexport function LogError(\n    errText: string,\n    isABug = true,\n    passedError?: string | ErrorConstructor\n): void {\n    let errObject = passedError;\n    console.error(errText);\n    console.error(`Error occurred in typeorm-model-generator.`);\n    console.error(`${packageVersion()}  node@${process.version}`);\n    console.error(\n        `If you think this is a bug please open an issue including this log on ${packagejson.bugs.url}`\n    );\n    if (isABug && !passedError) {\n        errObject = new Error().stack;\n    }\n    if (errObject) {\n        console.error(errObject);\n    }\n}\nexport function packageVersion(): string {\n    return `${packagejson.name}@${packagejson.version}`;\n}\nexport function findNameForNewField(\n    _fieldName: string,\n    entity: Entity,\n    columnOldName = \"\"\n): string {\n    let fieldName = _fieldName;\n    const validNameCondition = () =>\n        (entity.columns.every(\n            (v) =>\n                changeCase.camelCase(v.tscName) !==\n                changeCase.camelCase(fieldName)\n        ) &&\n            entity.relations.every(\n                (v) =>\n                    changeCase.camelCase(v.fieldName) !==\n                    changeCase.camelCase(fieldName)\n            ) &&\n            entity.relationIds.every(\n                (v) =>\n                    changeCase.camelCase(v.fieldName) !==\n                    changeCase.camelCase(fieldName)\n            )) ||\n        (columnOldName &&\n            changeCase.camelCase(columnOldName) ===\n                changeCase.camelCase(fieldName));\n    if (!validNameCondition()) {\n        fieldName += \"_\";\n        for (\n            let i = 2;\n            i <= entity.columns.length + entity.relations.length;\n            i++\n        ) {\n            fieldName =\n                fieldName.substring(0, fieldName.length - i.toString().length) +\n                i.toString();\n            if (validNameCondition()) {\n                break;\n            }\n        }\n    }\n    return fieldName;\n}\n\nexport function requireLocalFile(fileName: string): any {\n    try {\n        // eslint-disable-next-line global-require, import/no-dynamic-require, @typescript-eslint/no-var-requires\n        return require(fileName);\n    } catch (err) {\n        if (!path.isAbsolute(fileName)) {\n            // eslint-disable-next-line global-require, import/no-dynamic-require, @typescript-eslint/no-var-requires\n            return require(path.resolve(process.cwd(), fileName));\n        }\n        throw err;\n    }\n}\n"]}